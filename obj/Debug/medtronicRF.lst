                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                                      4 ; This file was generated Fri Apr 24 20:01:27 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module medtronicRF
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _stopTimerInt
                                     13 	.globl _resetTimerCounter
                                     14 	.globl _enableTimerInt
                                     15 	.globl _txFilter
                                     16 	.globl _halUartGetNumRxBytes
                                     17 	.globl _halUartRead
                                     18 	.globl _halUartWrite
                                     19 	.globl _usbUartProcess
                                     20 	.globl _decode4b6b
                                     21 	.globl _encode4b6b
                                     22 	.globl _crc16
                                     23 	.globl _crc16Init
                                     24 	.globl _crc8
                                     25 	.globl _MODE
                                     26 	.globl _RE
                                     27 	.globl _SLAVE
                                     28 	.globl _FE
                                     29 	.globl _ERR
                                     30 	.globl _RX_BYTE
                                     31 	.globl _TX_BYTE
                                     32 	.globl _ACTIVE
                                     33 	.globl _B_7
                                     34 	.globl _B_6
                                     35 	.globl _B_5
                                     36 	.globl _B_4
                                     37 	.globl _B_3
                                     38 	.globl _B_2
                                     39 	.globl _B_1
                                     40 	.globl _B_0
                                     41 	.globl _WDTIF
                                     42 	.globl _P1IF
                                     43 	.globl _UTX1IF
                                     44 	.globl _UTX0IF
                                     45 	.globl _P2IF
                                     46 	.globl _ACC_7
                                     47 	.globl _ACC_6
                                     48 	.globl _ACC_5
                                     49 	.globl _ACC_4
                                     50 	.globl _ACC_3
                                     51 	.globl _ACC_2
                                     52 	.globl _ACC_1
                                     53 	.globl _ACC_0
                                     54 	.globl _OVFIM
                                     55 	.globl _T4CH1IF
                                     56 	.globl _T4CH0IF
                                     57 	.globl _T4OVFIF
                                     58 	.globl _T3CH1IF
                                     59 	.globl _T3CH0IF
                                     60 	.globl _T3OVFIF
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _STIF
                                     70 	.globl _P0IF
                                     71 	.globl _T4IF
                                     72 	.globl _T3IF
                                     73 	.globl _T2IF
                                     74 	.globl _T1IF
                                     75 	.globl _DMAIF
                                     76 	.globl _P0IE
                                     77 	.globl _T4IE
                                     78 	.globl _T3IE
                                     79 	.globl _T2IE
                                     80 	.globl _T1IE
                                     81 	.globl _DMAIE
                                     82 	.globl _EA
                                     83 	.globl _STIE
                                     84 	.globl _ENCIE
                                     85 	.globl _URX1IE
                                     86 	.globl _URX0IE
                                     87 	.globl _ADCIE
                                     88 	.globl _RFTXRXIE
                                     89 	.globl _P2_7
                                     90 	.globl _P2_6
                                     91 	.globl _P2_5
                                     92 	.globl _P2_4
                                     93 	.globl _P2_3
                                     94 	.globl _P2_2
                                     95 	.globl _P2_1
                                     96 	.globl _P2_0
                                     97 	.globl _ENCIF_1
                                     98 	.globl _ENCIF_0
                                     99 	.globl _P1_7
                                    100 	.globl _P1_6
                                    101 	.globl _P1_5
                                    102 	.globl _P1_4
                                    103 	.globl _P1_3
                                    104 	.globl _P1_2
                                    105 	.globl _P1_1
                                    106 	.globl _P1_0
                                    107 	.globl _URX1IF
                                    108 	.globl _ADCIF
                                    109 	.globl _URX0IF
                                    110 	.globl _IT1
                                    111 	.globl _RFTXRXIF
                                    112 	.globl _IT0
                                    113 	.globl _P0_7
                                    114 	.globl _P0_6
                                    115 	.globl _P0_5
                                    116 	.globl _P0_4
                                    117 	.globl _P0_3
                                    118 	.globl _P0_2
                                    119 	.globl _P0_1
                                    120 	.globl _P0_0
                                    121 	.globl _P2DIR
                                    122 	.globl _P1DIR
                                    123 	.globl _P0DIR
                                    124 	.globl _U1GCR
                                    125 	.globl _U1UCR
                                    126 	.globl _U1BAUD
                                    127 	.globl _U1DBUF
                                    128 	.globl _U1CSR
                                    129 	.globl _P2INP
                                    130 	.globl _P1INP
                                    131 	.globl _P2SEL
                                    132 	.globl _P1SEL
                                    133 	.globl _P0SEL
                                    134 	.globl _ADCCFG
                                    135 	.globl _PERCFG
                                    136 	.globl _B
                                    137 	.globl _T4CC1
                                    138 	.globl _T4CCTL1
                                    139 	.globl _T4CC0
                                    140 	.globl _T4CCTL0
                                    141 	.globl _T4CTL
                                    142 	.globl _T4CNT
                                    143 	.globl _RFIF
                                    144 	.globl _IRCON2
                                    145 	.globl _T1CCTL2
                                    146 	.globl _T1CCTL1
                                    147 	.globl _T1CCTL0
                                    148 	.globl _T1CTL
                                    149 	.globl _T1CNTH
                                    150 	.globl _T1CNTL
                                    151 	.globl _RFST
                                    152 	.globl _ACC
                                    153 	.globl _T1CC2H
                                    154 	.globl _T1CC2L
                                    155 	.globl _T1CC1H
                                    156 	.globl _T1CC1L
                                    157 	.globl _T1CC0H
                                    158 	.globl _T1CC0L
                                    159 	.globl _RFD
                                    160 	.globl _TIMIF
                                    161 	.globl _DMAREQ
                                    162 	.globl _DMAARM
                                    163 	.globl _DMA0CFGH
                                    164 	.globl _DMA0CFGL
                                    165 	.globl _DMA1CFGH
                                    166 	.globl _DMA1CFGL
                                    167 	.globl _DMAIRQ
                                    168 	.globl _PSW
                                    169 	.globl _T3CC1
                                    170 	.globl _T3CCTL1
                                    171 	.globl _T3CC0
                                    172 	.globl _T3CCTL0
                                    173 	.globl _T3CTL
                                    174 	.globl _T3CNT
                                    175 	.globl _WDCTL
                                    176 	.globl __SFRC8
                                    177 	.globl _MEMCTR
                                    178 	.globl _CLKCON
                                    179 	.globl _U0GCR
                                    180 	.globl _U0UCR
                                    181 	.globl __SFRC3
                                    182 	.globl _U0BAUD
                                    183 	.globl _U0DBUF
                                    184 	.globl _IRCON
                                    185 	.globl __SFRBF
                                    186 	.globl _SLEEP
                                    187 	.globl _RNDH
                                    188 	.globl _RNDL
                                    189 	.globl _ADCH
                                    190 	.globl _ADCL
                                    191 	.globl _IP1
                                    192 	.globl _IEN1
                                    193 	.globl __SFRB7
                                    194 	.globl _ADCCON3
                                    195 	.globl _ADCCON2
                                    196 	.globl _ADCCON1
                                    197 	.globl _ENCCS
                                    198 	.globl _ENCDO
                                    199 	.globl _ENCDI
                                    200 	.globl __SFRB0
                                    201 	.globl _FWDATA
                                    202 	.globl _FCTL
                                    203 	.globl _FADDRH
                                    204 	.globl _FADDRL
                                    205 	.globl _FWT
                                    206 	.globl __SFRAA
                                    207 	.globl _IP0
                                    208 	.globl _IEN0
                                    209 	.globl __SFRA7
                                    210 	.globl _WORTIME1
                                    211 	.globl _WORTIME0
                                    212 	.globl _WOREVT1
                                    213 	.globl _WOREVT0
                                    214 	.globl _WORCTRL
                                    215 	.globl _WORIRQ
                                    216 	.globl _P2
                                    217 	.globl __SFR9F
                                    218 	.globl _T2CTL
                                    219 	.globl _T2PR
                                    220 	.globl _T2CT
                                    221 	.globl _S1CON
                                    222 	.globl _IEN2
                                    223 	.globl __SFR99
                                    224 	.globl _S0CON
                                    225 	.globl __SFR97
                                    226 	.globl __SFR96
                                    227 	.globl __SFR95
                                    228 	.globl __SFR94
                                    229 	.globl __XPAGE
                                    230 	.globl _MPAGE
                                    231 	.globl _DPS
                                    232 	.globl _RFIM
                                    233 	.globl _P1
                                    234 	.globl _P0INP
                                    235 	.globl __SFR8E
                                    236 	.globl _P1IEN
                                    237 	.globl _PICTL
                                    238 	.globl _P2IFG
                                    239 	.globl _P1IFG
                                    240 	.globl _P0IFG
                                    241 	.globl _TCON
                                    242 	.globl _PCON
                                    243 	.globl _U0CSR
                                    244 	.globl _DPH1
                                    245 	.globl _DPL1
                                    246 	.globl _DPH0
                                    247 	.globl _DPL0
                                    248 	.globl _SP
                                    249 	.globl _P0
                                    250 	.globl _X_P2DIR
                                    251 	.globl _X_P1DIR
                                    252 	.globl _X_P0DIR
                                    253 	.globl _X_U1GCR
                                    254 	.globl _X_U1UCR
                                    255 	.globl _X_U1BAUD
                                    256 	.globl _X_U1DBUF
                                    257 	.globl _X_U1CSR
                                    258 	.globl _X_P2INP
                                    259 	.globl _X_P1INP
                                    260 	.globl _X_P2SEL
                                    261 	.globl _X_P1SEL
                                    262 	.globl _X_P0SEL
                                    263 	.globl _X_ADCCFG
                                    264 	.globl _X_PERCFG
                                    265 	.globl __NA_B
                                    266 	.globl _X_T4CC1
                                    267 	.globl _X_T4CCTL1
                                    268 	.globl _X_T4CC0
                                    269 	.globl _X_T4CCTL0
                                    270 	.globl _X_T4CTL
                                    271 	.globl _X_T4CNT
                                    272 	.globl _X_RFIF
                                    273 	.globl __NA_IRCON2
                                    274 	.globl _X_T1CCTL2
                                    275 	.globl _X_T1CCTL1
                                    276 	.globl _X_T1CCTL0
                                    277 	.globl _X_T1CTL
                                    278 	.globl _X_T1CNTH
                                    279 	.globl _X_T1CNTL
                                    280 	.globl _X_RFST
                                    281 	.globl __NA_ACC
                                    282 	.globl _X_T1CC2H
                                    283 	.globl _X_T1CC2L
                                    284 	.globl _X_T1CC1H
                                    285 	.globl _X_T1CC1L
                                    286 	.globl _X_T1CC0H
                                    287 	.globl _X_T1CC0L
                                    288 	.globl _X_RFD
                                    289 	.globl _X_TIMIF
                                    290 	.globl _X_DMAREQ
                                    291 	.globl _X_DMAARM
                                    292 	.globl _X_DMA0CFGH
                                    293 	.globl _X_DMA0CFGL
                                    294 	.globl _X_DMA1CFGH
                                    295 	.globl _X_DMA1CFGL
                                    296 	.globl _X_DMAIRQ
                                    297 	.globl __NA_PSW
                                    298 	.globl _X_T3CC1
                                    299 	.globl _X_T3CCTL1
                                    300 	.globl _X_T3CC0
                                    301 	.globl _X_T3CCTL0
                                    302 	.globl _X_T3CTL
                                    303 	.globl _X_T3CNT
                                    304 	.globl _X_WDCTL
                                    305 	.globl __X_SFRC8
                                    306 	.globl _X_MEMCTR
                                    307 	.globl _X_CLKCON
                                    308 	.globl _X_U0GCR
                                    309 	.globl _X_U0UCR
                                    310 	.globl __X_SFRC3
                                    311 	.globl _X_U0BAUD
                                    312 	.globl _X_U0DBUF
                                    313 	.globl __NA_IRCON
                                    314 	.globl __X_SFRBF
                                    315 	.globl _X_SLEEP
                                    316 	.globl _X_RNDH
                                    317 	.globl _X_RNDL
                                    318 	.globl _X_ADCH
                                    319 	.globl _X_ADCL
                                    320 	.globl __NA_IP1
                                    321 	.globl __NA_IEN1
                                    322 	.globl __X_SFRB7
                                    323 	.globl _X_ADCCON3
                                    324 	.globl _X_ADCCON2
                                    325 	.globl _X_ADCCON1
                                    326 	.globl _X_ENCCS
                                    327 	.globl _X_ENCDO
                                    328 	.globl _X_ENCDI
                                    329 	.globl __X_SFRB0
                                    330 	.globl _X_FWDATA
                                    331 	.globl _X_FCTL
                                    332 	.globl _X_FADDRH
                                    333 	.globl _X_FADDRL
                                    334 	.globl _X_FWT
                                    335 	.globl __X_SFRAA
                                    336 	.globl __NA_IP0
                                    337 	.globl __NA_IEN0
                                    338 	.globl __X_SFRA7
                                    339 	.globl _X_WORTIME1
                                    340 	.globl _X_WORTIME0
                                    341 	.globl _X_WOREVT1
                                    342 	.globl _X_WOREVT0
                                    343 	.globl _X_WORCTRL
                                    344 	.globl _X_WORIRQ
                                    345 	.globl __NA_P2
                                    346 	.globl __X_SFR9F
                                    347 	.globl _X_T2CTL
                                    348 	.globl _X_T2PR
                                    349 	.globl _X_T2CT
                                    350 	.globl __NA_S1CON
                                    351 	.globl __NA_IEN2
                                    352 	.globl __X_SFR99
                                    353 	.globl __NA_S0CON
                                    354 	.globl __X_SFR97
                                    355 	.globl __X_SFR96
                                    356 	.globl __X_SFR95
                                    357 	.globl __X_SFR94
                                    358 	.globl _X_MPAGE
                                    359 	.globl __NA_DPS
                                    360 	.globl _X_RFIM
                                    361 	.globl __NA_P1
                                    362 	.globl _X_P0INP
                                    363 	.globl __X_SFR8E
                                    364 	.globl _X_P1IEN
                                    365 	.globl _X_PICTL
                                    366 	.globl _X_P2IFG
                                    367 	.globl _X_P1IFG
                                    368 	.globl _X_P0IFG
                                    369 	.globl __NA_TCON
                                    370 	.globl __NA_PCON
                                    371 	.globl _X_U0CSR
                                    372 	.globl __NA_DPH1
                                    373 	.globl __NA_DPL1
                                    374 	.globl __NA_DPH0
                                    375 	.globl __NA_DPL0
                                    376 	.globl __NA_SP
                                    377 	.globl __NA_P0
                                    378 	.globl _I2SCLKF2
                                    379 	.globl _I2SCLKF1
                                    380 	.globl _I2SCLKF0
                                    381 	.globl _I2SSTAT
                                    382 	.globl _I2SWCNT
                                    383 	.globl _I2SDATH
                                    384 	.globl _I2SDATL
                                    385 	.globl _I2SCFG1
                                    386 	.globl _I2SCFG0
                                    387 	.globl _VCO_VC_DAC
                                    388 	.globl _PKTSTATUS
                                    389 	.globl _MARCSTATE
                                    390 	.globl _RSSI
                                    391 	.globl _LQI
                                    392 	.globl _FREQEST
                                    393 	.globl _VERSION
                                    394 	.globl _PARTNUM
                                    395 	.globl __XREGDF35
                                    396 	.globl __XREGDF34
                                    397 	.globl __XREGDF33
                                    398 	.globl __XREGDF32
                                    399 	.globl _IOCFG0
                                    400 	.globl _IOCFG1
                                    401 	.globl _IOCFG2
                                    402 	.globl _PA_TABLE0
                                    403 	.globl _PA_TABLE1
                                    404 	.globl _PA_TABLE2
                                    405 	.globl _PA_TABLE3
                                    406 	.globl _PA_TABLE4
                                    407 	.globl _PA_TABLE5
                                    408 	.globl _PA_TABLE6
                                    409 	.globl _PA_TABLE7
                                    410 	.globl __XREGDF26
                                    411 	.globl _TEST0
                                    412 	.globl _TEST1
                                    413 	.globl _TEST2
                                    414 	.globl __XREGDF22
                                    415 	.globl __XREGDF21
                                    416 	.globl __XREGDF20
                                    417 	.globl _FSCAL0
                                    418 	.globl _FSCAL1
                                    419 	.globl _FSCAL2
                                    420 	.globl _FSCAL3
                                    421 	.globl _FREND0
                                    422 	.globl _FREND1
                                    423 	.globl _AGCCTRL0
                                    424 	.globl _AGCCTRL1
                                    425 	.globl _AGCCTRL2
                                    426 	.globl _BSCFG
                                    427 	.globl _FOCCFG
                                    428 	.globl _MCSM0
                                    429 	.globl _MCSM1
                                    430 	.globl _MCSM2
                                    431 	.globl _DEVIATN
                                    432 	.globl _MDMCFG0
                                    433 	.globl _MDMCFG1
                                    434 	.globl _MDMCFG2
                                    435 	.globl _MDMCFG3
                                    436 	.globl _MDMCFG4
                                    437 	.globl _FREQ0
                                    438 	.globl _FREQ1
                                    439 	.globl _FREQ2
                                    440 	.globl _FSCTRL0
                                    441 	.globl _FSCTRL1
                                    442 	.globl _CHANNR
                                    443 	.globl _ADDR
                                    444 	.globl _PKTCTRL0
                                    445 	.globl _PKTCTRL1
                                    446 	.globl _PKTLEN
                                    447 	.globl _SYNC0
                                    448 	.globl _SYNC1
                                    449 	.globl _MDMCTRL0H
                                    450 	.globl _receiveMedtronicMessage_PARM_2
                                    451 	.globl _sendMedtronicMessage_PARM_3
                                    452 	.globl _sendMedtronicMessage_PARM_2
                                    453 	.globl _sendMedtronicMessage
                                    454 	.globl _receiveMedtronicMessage
                                    455 	.globl _usbReceiveData
                                    456 ;--------------------------------------------------------
                                    457 ; special function registers
                                    458 ;--------------------------------------------------------
                                    459 	.area RSEG    (ABS,DATA)
      000000                        460 	.org 0x0000
                           000080   461 G$P0$0$0 == 0x0080
                           000080   462 _P0	=	0x0080
                           000081   463 G$SP$0$0 == 0x0081
                           000081   464 _SP	=	0x0081
                           000082   465 G$DPL0$0$0 == 0x0082
                           000082   466 _DPL0	=	0x0082
                           000083   467 G$DPH0$0$0 == 0x0083
                           000083   468 _DPH0	=	0x0083
                           000084   469 G$DPL1$0$0 == 0x0084
                           000084   470 _DPL1	=	0x0084
                           000085   471 G$DPH1$0$0 == 0x0085
                           000085   472 _DPH1	=	0x0085
                           000086   473 G$U0CSR$0$0 == 0x0086
                           000086   474 _U0CSR	=	0x0086
                           000087   475 G$PCON$0$0 == 0x0087
                           000087   476 _PCON	=	0x0087
                           000088   477 G$TCON$0$0 == 0x0088
                           000088   478 _TCON	=	0x0088
                           000089   479 G$P0IFG$0$0 == 0x0089
                           000089   480 _P0IFG	=	0x0089
                           00008A   481 G$P1IFG$0$0 == 0x008a
                           00008A   482 _P1IFG	=	0x008a
                           00008B   483 G$P2IFG$0$0 == 0x008b
                           00008B   484 _P2IFG	=	0x008b
                           00008C   485 G$PICTL$0$0 == 0x008c
                           00008C   486 _PICTL	=	0x008c
                           00008D   487 G$P1IEN$0$0 == 0x008d
                           00008D   488 _P1IEN	=	0x008d
                           00008E   489 G$_SFR8E$0$0 == 0x008e
                           00008E   490 __SFR8E	=	0x008e
                           00008F   491 G$P0INP$0$0 == 0x008f
                           00008F   492 _P0INP	=	0x008f
                           000090   493 G$P1$0$0 == 0x0090
                           000090   494 _P1	=	0x0090
                           000091   495 G$RFIM$0$0 == 0x0091
                           000091   496 _RFIM	=	0x0091
                           000092   497 G$DPS$0$0 == 0x0092
                           000092   498 _DPS	=	0x0092
                           000093   499 G$MPAGE$0$0 == 0x0093
                           000093   500 _MPAGE	=	0x0093
                           000093   501 G$_XPAGE$0$0 == 0x0093
                           000093   502 __XPAGE	=	0x0093
                           000094   503 G$_SFR94$0$0 == 0x0094
                           000094   504 __SFR94	=	0x0094
                           000095   505 G$_SFR95$0$0 == 0x0095
                           000095   506 __SFR95	=	0x0095
                           000096   507 G$_SFR96$0$0 == 0x0096
                           000096   508 __SFR96	=	0x0096
                           000097   509 G$_SFR97$0$0 == 0x0097
                           000097   510 __SFR97	=	0x0097
                           000098   511 G$S0CON$0$0 == 0x0098
                           000098   512 _S0CON	=	0x0098
                           000099   513 G$_SFR99$0$0 == 0x0099
                           000099   514 __SFR99	=	0x0099
                           00009A   515 G$IEN2$0$0 == 0x009a
                           00009A   516 _IEN2	=	0x009a
                           00009B   517 G$S1CON$0$0 == 0x009b
                           00009B   518 _S1CON	=	0x009b
                           00009C   519 G$T2CT$0$0 == 0x009c
                           00009C   520 _T2CT	=	0x009c
                           00009D   521 G$T2PR$0$0 == 0x009d
                           00009D   522 _T2PR	=	0x009d
                           00009E   523 G$T2CTL$0$0 == 0x009e
                           00009E   524 _T2CTL	=	0x009e
                           00009F   525 G$_SFR9F$0$0 == 0x009f
                           00009F   526 __SFR9F	=	0x009f
                           0000A0   527 G$P2$0$0 == 0x00a0
                           0000A0   528 _P2	=	0x00a0
                           0000A1   529 G$WORIRQ$0$0 == 0x00a1
                           0000A1   530 _WORIRQ	=	0x00a1
                           0000A2   531 G$WORCTRL$0$0 == 0x00a2
                           0000A2   532 _WORCTRL	=	0x00a2
                           0000A3   533 G$WOREVT0$0$0 == 0x00a3
                           0000A3   534 _WOREVT0	=	0x00a3
                           0000A4   535 G$WOREVT1$0$0 == 0x00a4
                           0000A4   536 _WOREVT1	=	0x00a4
                           0000A5   537 G$WORTIME0$0$0 == 0x00a5
                           0000A5   538 _WORTIME0	=	0x00a5
                           0000A6   539 G$WORTIME1$0$0 == 0x00a6
                           0000A6   540 _WORTIME1	=	0x00a6
                           0000A7   541 G$_SFRA7$0$0 == 0x00a7
                           0000A7   542 __SFRA7	=	0x00a7
                           0000A8   543 G$IEN0$0$0 == 0x00a8
                           0000A8   544 _IEN0	=	0x00a8
                           0000A9   545 G$IP0$0$0 == 0x00a9
                           0000A9   546 _IP0	=	0x00a9
                           0000AA   547 G$_SFRAA$0$0 == 0x00aa
                           0000AA   548 __SFRAA	=	0x00aa
                           0000AB   549 G$FWT$0$0 == 0x00ab
                           0000AB   550 _FWT	=	0x00ab
                           0000AC   551 G$FADDRL$0$0 == 0x00ac
                           0000AC   552 _FADDRL	=	0x00ac
                           0000AD   553 G$FADDRH$0$0 == 0x00ad
                           0000AD   554 _FADDRH	=	0x00ad
                           0000AE   555 G$FCTL$0$0 == 0x00ae
                           0000AE   556 _FCTL	=	0x00ae
                           0000AF   557 G$FWDATA$0$0 == 0x00af
                           0000AF   558 _FWDATA	=	0x00af
                           0000B0   559 G$_SFRB0$0$0 == 0x00b0
                           0000B0   560 __SFRB0	=	0x00b0
                           0000B1   561 G$ENCDI$0$0 == 0x00b1
                           0000B1   562 _ENCDI	=	0x00b1
                           0000B2   563 G$ENCDO$0$0 == 0x00b2
                           0000B2   564 _ENCDO	=	0x00b2
                           0000B3   565 G$ENCCS$0$0 == 0x00b3
                           0000B3   566 _ENCCS	=	0x00b3
                           0000B4   567 G$ADCCON1$0$0 == 0x00b4
                           0000B4   568 _ADCCON1	=	0x00b4
                           0000B5   569 G$ADCCON2$0$0 == 0x00b5
                           0000B5   570 _ADCCON2	=	0x00b5
                           0000B6   571 G$ADCCON3$0$0 == 0x00b6
                           0000B6   572 _ADCCON3	=	0x00b6
                           0000B7   573 G$_SFRB7$0$0 == 0x00b7
                           0000B7   574 __SFRB7	=	0x00b7
                           0000B8   575 G$IEN1$0$0 == 0x00b8
                           0000B8   576 _IEN1	=	0x00b8
                           0000B9   577 G$IP1$0$0 == 0x00b9
                           0000B9   578 _IP1	=	0x00b9
                           0000BA   579 G$ADCL$0$0 == 0x00ba
                           0000BA   580 _ADCL	=	0x00ba
                           0000BB   581 G$ADCH$0$0 == 0x00bb
                           0000BB   582 _ADCH	=	0x00bb
                           0000BC   583 G$RNDL$0$0 == 0x00bc
                           0000BC   584 _RNDL	=	0x00bc
                           0000BD   585 G$RNDH$0$0 == 0x00bd
                           0000BD   586 _RNDH	=	0x00bd
                           0000BE   587 G$SLEEP$0$0 == 0x00be
                           0000BE   588 _SLEEP	=	0x00be
                           0000BF   589 G$_SFRBF$0$0 == 0x00bf
                           0000BF   590 __SFRBF	=	0x00bf
                           0000C0   591 G$IRCON$0$0 == 0x00c0
                           0000C0   592 _IRCON	=	0x00c0
                           0000C1   593 G$U0DBUF$0$0 == 0x00c1
                           0000C1   594 _U0DBUF	=	0x00c1
                           0000C2   595 G$U0BAUD$0$0 == 0x00c2
                           0000C2   596 _U0BAUD	=	0x00c2
                           0000C3   597 G$_SFRC3$0$0 == 0x00c3
                           0000C3   598 __SFRC3	=	0x00c3
                           0000C4   599 G$U0UCR$0$0 == 0x00c4
                           0000C4   600 _U0UCR	=	0x00c4
                           0000C5   601 G$U0GCR$0$0 == 0x00c5
                           0000C5   602 _U0GCR	=	0x00c5
                           0000C6   603 G$CLKCON$0$0 == 0x00c6
                           0000C6   604 _CLKCON	=	0x00c6
                           0000C7   605 G$MEMCTR$0$0 == 0x00c7
                           0000C7   606 _MEMCTR	=	0x00c7
                           0000C8   607 G$_SFRC8$0$0 == 0x00c8
                           0000C8   608 __SFRC8	=	0x00c8
                           0000C9   609 G$WDCTL$0$0 == 0x00c9
                           0000C9   610 _WDCTL	=	0x00c9
                           0000CA   611 G$T3CNT$0$0 == 0x00ca
                           0000CA   612 _T3CNT	=	0x00ca
                           0000CB   613 G$T3CTL$0$0 == 0x00cb
                           0000CB   614 _T3CTL	=	0x00cb
                           0000CC   615 G$T3CCTL0$0$0 == 0x00cc
                           0000CC   616 _T3CCTL0	=	0x00cc
                           0000CD   617 G$T3CC0$0$0 == 0x00cd
                           0000CD   618 _T3CC0	=	0x00cd
                           0000CE   619 G$T3CCTL1$0$0 == 0x00ce
                           0000CE   620 _T3CCTL1	=	0x00ce
                           0000CF   621 G$T3CC1$0$0 == 0x00cf
                           0000CF   622 _T3CC1	=	0x00cf
                           0000D0   623 G$PSW$0$0 == 0x00d0
                           0000D0   624 _PSW	=	0x00d0
                           0000D1   625 G$DMAIRQ$0$0 == 0x00d1
                           0000D1   626 _DMAIRQ	=	0x00d1
                           0000D2   627 G$DMA1CFGL$0$0 == 0x00d2
                           0000D2   628 _DMA1CFGL	=	0x00d2
                           0000D3   629 G$DMA1CFGH$0$0 == 0x00d3
                           0000D3   630 _DMA1CFGH	=	0x00d3
                           0000D4   631 G$DMA0CFGL$0$0 == 0x00d4
                           0000D4   632 _DMA0CFGL	=	0x00d4
                           0000D5   633 G$DMA0CFGH$0$0 == 0x00d5
                           0000D5   634 _DMA0CFGH	=	0x00d5
                           0000D6   635 G$DMAARM$0$0 == 0x00d6
                           0000D6   636 _DMAARM	=	0x00d6
                           0000D7   637 G$DMAREQ$0$0 == 0x00d7
                           0000D7   638 _DMAREQ	=	0x00d7
                           0000D8   639 G$TIMIF$0$0 == 0x00d8
                           0000D8   640 _TIMIF	=	0x00d8
                           0000D9   641 G$RFD$0$0 == 0x00d9
                           0000D9   642 _RFD	=	0x00d9
                           0000DA   643 G$T1CC0L$0$0 == 0x00da
                           0000DA   644 _T1CC0L	=	0x00da
                           0000DB   645 G$T1CC0H$0$0 == 0x00db
                           0000DB   646 _T1CC0H	=	0x00db
                           0000DC   647 G$T1CC1L$0$0 == 0x00dc
                           0000DC   648 _T1CC1L	=	0x00dc
                           0000DD   649 G$T1CC1H$0$0 == 0x00dd
                           0000DD   650 _T1CC1H	=	0x00dd
                           0000DE   651 G$T1CC2L$0$0 == 0x00de
                           0000DE   652 _T1CC2L	=	0x00de
                           0000DF   653 G$T1CC2H$0$0 == 0x00df
                           0000DF   654 _T1CC2H	=	0x00df
                           0000E0   655 G$ACC$0$0 == 0x00e0
                           0000E0   656 _ACC	=	0x00e0
                           0000E1   657 G$RFST$0$0 == 0x00e1
                           0000E1   658 _RFST	=	0x00e1
                           0000E2   659 G$T1CNTL$0$0 == 0x00e2
                           0000E2   660 _T1CNTL	=	0x00e2
                           0000E3   661 G$T1CNTH$0$0 == 0x00e3
                           0000E3   662 _T1CNTH	=	0x00e3
                           0000E4   663 G$T1CTL$0$0 == 0x00e4
                           0000E4   664 _T1CTL	=	0x00e4
                           0000E5   665 G$T1CCTL0$0$0 == 0x00e5
                           0000E5   666 _T1CCTL0	=	0x00e5
                           0000E6   667 G$T1CCTL1$0$0 == 0x00e6
                           0000E6   668 _T1CCTL1	=	0x00e6
                           0000E7   669 G$T1CCTL2$0$0 == 0x00e7
                           0000E7   670 _T1CCTL2	=	0x00e7
                           0000E8   671 G$IRCON2$0$0 == 0x00e8
                           0000E8   672 _IRCON2	=	0x00e8
                           0000E9   673 G$RFIF$0$0 == 0x00e9
                           0000E9   674 _RFIF	=	0x00e9
                           0000EA   675 G$T4CNT$0$0 == 0x00ea
                           0000EA   676 _T4CNT	=	0x00ea
                           0000EB   677 G$T4CTL$0$0 == 0x00eb
                           0000EB   678 _T4CTL	=	0x00eb
                           0000EC   679 G$T4CCTL0$0$0 == 0x00ec
                           0000EC   680 _T4CCTL0	=	0x00ec
                           0000ED   681 G$T4CC0$0$0 == 0x00ed
                           0000ED   682 _T4CC0	=	0x00ed
                           0000EE   683 G$T4CCTL1$0$0 == 0x00ee
                           0000EE   684 _T4CCTL1	=	0x00ee
                           0000EF   685 G$T4CC1$0$0 == 0x00ef
                           0000EF   686 _T4CC1	=	0x00ef
                           0000F0   687 G$B$0$0 == 0x00f0
                           0000F0   688 _B	=	0x00f0
                           0000F1   689 G$PERCFG$0$0 == 0x00f1
                           0000F1   690 _PERCFG	=	0x00f1
                           0000F2   691 G$ADCCFG$0$0 == 0x00f2
                           0000F2   692 _ADCCFG	=	0x00f2
                           0000F3   693 G$P0SEL$0$0 == 0x00f3
                           0000F3   694 _P0SEL	=	0x00f3
                           0000F4   695 G$P1SEL$0$0 == 0x00f4
                           0000F4   696 _P1SEL	=	0x00f4
                           0000F5   697 G$P2SEL$0$0 == 0x00f5
                           0000F5   698 _P2SEL	=	0x00f5
                           0000F6   699 G$P1INP$0$0 == 0x00f6
                           0000F6   700 _P1INP	=	0x00f6
                           0000F7   701 G$P2INP$0$0 == 0x00f7
                           0000F7   702 _P2INP	=	0x00f7
                           0000F8   703 G$U1CSR$0$0 == 0x00f8
                           0000F8   704 _U1CSR	=	0x00f8
                           0000F9   705 G$U1DBUF$0$0 == 0x00f9
                           0000F9   706 _U1DBUF	=	0x00f9
                           0000FA   707 G$U1BAUD$0$0 == 0x00fa
                           0000FA   708 _U1BAUD	=	0x00fa
                           0000FB   709 G$U1UCR$0$0 == 0x00fb
                           0000FB   710 _U1UCR	=	0x00fb
                           0000FC   711 G$U1GCR$0$0 == 0x00fc
                           0000FC   712 _U1GCR	=	0x00fc
                           0000FD   713 G$P0DIR$0$0 == 0x00fd
                           0000FD   714 _P0DIR	=	0x00fd
                           0000FE   715 G$P1DIR$0$0 == 0x00fe
                           0000FE   716 _P1DIR	=	0x00fe
                           0000FF   717 G$P2DIR$0$0 == 0x00ff
                           0000FF   718 _P2DIR	=	0x00ff
                                    719 ;--------------------------------------------------------
                                    720 ; special function bits
                                    721 ;--------------------------------------------------------
                                    722 	.area RSEG    (ABS,DATA)
      000000                        723 	.org 0x0000
                           000080   724 G$P0_0$0$0 == 0x0080
                           000080   725 _P0_0	=	0x0080
                           000081   726 G$P0_1$0$0 == 0x0081
                           000081   727 _P0_1	=	0x0081
                           000082   728 G$P0_2$0$0 == 0x0082
                           000082   729 _P0_2	=	0x0082
                           000083   730 G$P0_3$0$0 == 0x0083
                           000083   731 _P0_3	=	0x0083
                           000084   732 G$P0_4$0$0 == 0x0084
                           000084   733 _P0_4	=	0x0084
                           000085   734 G$P0_5$0$0 == 0x0085
                           000085   735 _P0_5	=	0x0085
                           000086   736 G$P0_6$0$0 == 0x0086
                           000086   737 _P0_6	=	0x0086
                           000087   738 G$P0_7$0$0 == 0x0087
                           000087   739 _P0_7	=	0x0087
                           000088   740 G$IT0$0$0 == 0x0088
                           000088   741 _IT0	=	0x0088
                           000089   742 G$RFTXRXIF$0$0 == 0x0089
                           000089   743 _RFTXRXIF	=	0x0089
                           00008A   744 G$IT1$0$0 == 0x008a
                           00008A   745 _IT1	=	0x008a
                           00008B   746 G$URX0IF$0$0 == 0x008b
                           00008B   747 _URX0IF	=	0x008b
                           00008D   748 G$ADCIF$0$0 == 0x008d
                           00008D   749 _ADCIF	=	0x008d
                           00008F   750 G$URX1IF$0$0 == 0x008f
                           00008F   751 _URX1IF	=	0x008f
                           000090   752 G$P1_0$0$0 == 0x0090
                           000090   753 _P1_0	=	0x0090
                           000091   754 G$P1_1$0$0 == 0x0091
                           000091   755 _P1_1	=	0x0091
                           000092   756 G$P1_2$0$0 == 0x0092
                           000092   757 _P1_2	=	0x0092
                           000093   758 G$P1_3$0$0 == 0x0093
                           000093   759 _P1_3	=	0x0093
                           000094   760 G$P1_4$0$0 == 0x0094
                           000094   761 _P1_4	=	0x0094
                           000095   762 G$P1_5$0$0 == 0x0095
                           000095   763 _P1_5	=	0x0095
                           000096   764 G$P1_6$0$0 == 0x0096
                           000096   765 _P1_6	=	0x0096
                           000097   766 G$P1_7$0$0 == 0x0097
                           000097   767 _P1_7	=	0x0097
                           000098   768 G$ENCIF_0$0$0 == 0x0098
                           000098   769 _ENCIF_0	=	0x0098
                           000099   770 G$ENCIF_1$0$0 == 0x0099
                           000099   771 _ENCIF_1	=	0x0099
                           0000A0   772 G$P2_0$0$0 == 0x00a0
                           0000A0   773 _P2_0	=	0x00a0
                           0000A1   774 G$P2_1$0$0 == 0x00a1
                           0000A1   775 _P2_1	=	0x00a1
                           0000A2   776 G$P2_2$0$0 == 0x00a2
                           0000A2   777 _P2_2	=	0x00a2
                           0000A3   778 G$P2_3$0$0 == 0x00a3
                           0000A3   779 _P2_3	=	0x00a3
                           0000A4   780 G$P2_4$0$0 == 0x00a4
                           0000A4   781 _P2_4	=	0x00a4
                           0000A5   782 G$P2_5$0$0 == 0x00a5
                           0000A5   783 _P2_5	=	0x00a5
                           0000A6   784 G$P2_6$0$0 == 0x00a6
                           0000A6   785 _P2_6	=	0x00a6
                           0000A7   786 G$P2_7$0$0 == 0x00a7
                           0000A7   787 _P2_7	=	0x00a7
                           0000A8   788 G$RFTXRXIE$0$0 == 0x00a8
                           0000A8   789 _RFTXRXIE	=	0x00a8
                           0000A9   790 G$ADCIE$0$0 == 0x00a9
                           0000A9   791 _ADCIE	=	0x00a9
                           0000AA   792 G$URX0IE$0$0 == 0x00aa
                           0000AA   793 _URX0IE	=	0x00aa
                           0000AB   794 G$URX1IE$0$0 == 0x00ab
                           0000AB   795 _URX1IE	=	0x00ab
                           0000AC   796 G$ENCIE$0$0 == 0x00ac
                           0000AC   797 _ENCIE	=	0x00ac
                           0000AD   798 G$STIE$0$0 == 0x00ad
                           0000AD   799 _STIE	=	0x00ad
                           0000AF   800 G$EA$0$0 == 0x00af
                           0000AF   801 _EA	=	0x00af
                           0000B8   802 G$DMAIE$0$0 == 0x00b8
                           0000B8   803 _DMAIE	=	0x00b8
                           0000B9   804 G$T1IE$0$0 == 0x00b9
                           0000B9   805 _T1IE	=	0x00b9
                           0000BA   806 G$T2IE$0$0 == 0x00ba
                           0000BA   807 _T2IE	=	0x00ba
                           0000BB   808 G$T3IE$0$0 == 0x00bb
                           0000BB   809 _T3IE	=	0x00bb
                           0000BC   810 G$T4IE$0$0 == 0x00bc
                           0000BC   811 _T4IE	=	0x00bc
                           0000BD   812 G$P0IE$0$0 == 0x00bd
                           0000BD   813 _P0IE	=	0x00bd
                           0000C0   814 G$DMAIF$0$0 == 0x00c0
                           0000C0   815 _DMAIF	=	0x00c0
                           0000C1   816 G$T1IF$0$0 == 0x00c1
                           0000C1   817 _T1IF	=	0x00c1
                           0000C2   818 G$T2IF$0$0 == 0x00c2
                           0000C2   819 _T2IF	=	0x00c2
                           0000C3   820 G$T3IF$0$0 == 0x00c3
                           0000C3   821 _T3IF	=	0x00c3
                           0000C4   822 G$T4IF$0$0 == 0x00c4
                           0000C4   823 _T4IF	=	0x00c4
                           0000C5   824 G$P0IF$0$0 == 0x00c5
                           0000C5   825 _P0IF	=	0x00c5
                           0000C7   826 G$STIF$0$0 == 0x00c7
                           0000C7   827 _STIF	=	0x00c7
                           0000D0   828 G$P$0$0 == 0x00d0
                           0000D0   829 _P	=	0x00d0
                           0000D1   830 G$F1$0$0 == 0x00d1
                           0000D1   831 _F1	=	0x00d1
                           0000D2   832 G$OV$0$0 == 0x00d2
                           0000D2   833 _OV	=	0x00d2
                           0000D3   834 G$RS0$0$0 == 0x00d3
                           0000D3   835 _RS0	=	0x00d3
                           0000D4   836 G$RS1$0$0 == 0x00d4
                           0000D4   837 _RS1	=	0x00d4
                           0000D5   838 G$F0$0$0 == 0x00d5
                           0000D5   839 _F0	=	0x00d5
                           0000D6   840 G$AC$0$0 == 0x00d6
                           0000D6   841 _AC	=	0x00d6
                           0000D7   842 G$CY$0$0 == 0x00d7
                           0000D7   843 _CY	=	0x00d7
                           0000D8   844 G$T3OVFIF$0$0 == 0x00d8
                           0000D8   845 _T3OVFIF	=	0x00d8
                           0000D9   846 G$T3CH0IF$0$0 == 0x00d9
                           0000D9   847 _T3CH0IF	=	0x00d9
                           0000DA   848 G$T3CH1IF$0$0 == 0x00da
                           0000DA   849 _T3CH1IF	=	0x00da
                           0000DB   850 G$T4OVFIF$0$0 == 0x00db
                           0000DB   851 _T4OVFIF	=	0x00db
                           0000DC   852 G$T4CH0IF$0$0 == 0x00dc
                           0000DC   853 _T4CH0IF	=	0x00dc
                           0000DD   854 G$T4CH1IF$0$0 == 0x00dd
                           0000DD   855 _T4CH1IF	=	0x00dd
                           0000DE   856 G$OVFIM$0$0 == 0x00de
                           0000DE   857 _OVFIM	=	0x00de
                           0000E0   858 G$ACC_0$0$0 == 0x00e0
                           0000E0   859 _ACC_0	=	0x00e0
                           0000E1   860 G$ACC_1$0$0 == 0x00e1
                           0000E1   861 _ACC_1	=	0x00e1
                           0000E2   862 G$ACC_2$0$0 == 0x00e2
                           0000E2   863 _ACC_2	=	0x00e2
                           0000E3   864 G$ACC_3$0$0 == 0x00e3
                           0000E3   865 _ACC_3	=	0x00e3
                           0000E4   866 G$ACC_4$0$0 == 0x00e4
                           0000E4   867 _ACC_4	=	0x00e4
                           0000E5   868 G$ACC_5$0$0 == 0x00e5
                           0000E5   869 _ACC_5	=	0x00e5
                           0000E6   870 G$ACC_6$0$0 == 0x00e6
                           0000E6   871 _ACC_6	=	0x00e6
                           0000E7   872 G$ACC_7$0$0 == 0x00e7
                           0000E7   873 _ACC_7	=	0x00e7
                           0000E8   874 G$P2IF$0$0 == 0x00e8
                           0000E8   875 _P2IF	=	0x00e8
                           0000E9   876 G$UTX0IF$0$0 == 0x00e9
                           0000E9   877 _UTX0IF	=	0x00e9
                           0000EA   878 G$UTX1IF$0$0 == 0x00ea
                           0000EA   879 _UTX1IF	=	0x00ea
                           0000EB   880 G$P1IF$0$0 == 0x00eb
                           0000EB   881 _P1IF	=	0x00eb
                           0000EC   882 G$WDTIF$0$0 == 0x00ec
                           0000EC   883 _WDTIF	=	0x00ec
                           0000F0   884 G$B_0$0$0 == 0x00f0
                           0000F0   885 _B_0	=	0x00f0
                           0000F1   886 G$B_1$0$0 == 0x00f1
                           0000F1   887 _B_1	=	0x00f1
                           0000F2   888 G$B_2$0$0 == 0x00f2
                           0000F2   889 _B_2	=	0x00f2
                           0000F3   890 G$B_3$0$0 == 0x00f3
                           0000F3   891 _B_3	=	0x00f3
                           0000F4   892 G$B_4$0$0 == 0x00f4
                           0000F4   893 _B_4	=	0x00f4
                           0000F5   894 G$B_5$0$0 == 0x00f5
                           0000F5   895 _B_5	=	0x00f5
                           0000F6   896 G$B_6$0$0 == 0x00f6
                           0000F6   897 _B_6	=	0x00f6
                           0000F7   898 G$B_7$0$0 == 0x00f7
                           0000F7   899 _B_7	=	0x00f7
                           0000F8   900 G$ACTIVE$0$0 == 0x00f8
                           0000F8   901 _ACTIVE	=	0x00f8
                           0000F9   902 G$TX_BYTE$0$0 == 0x00f9
                           0000F9   903 _TX_BYTE	=	0x00f9
                           0000FA   904 G$RX_BYTE$0$0 == 0x00fa
                           0000FA   905 _RX_BYTE	=	0x00fa
                           0000FB   906 G$ERR$0$0 == 0x00fb
                           0000FB   907 _ERR	=	0x00fb
                           0000FC   908 G$FE$0$0 == 0x00fc
                           0000FC   909 _FE	=	0x00fc
                           0000FD   910 G$SLAVE$0$0 == 0x00fd
                           0000FD   911 _SLAVE	=	0x00fd
                           0000FE   912 G$RE$0$0 == 0x00fe
                           0000FE   913 _RE	=	0x00fe
                           0000FF   914 G$MODE$0$0 == 0x00ff
                           0000FF   915 _MODE	=	0x00ff
                                    916 ;--------------------------------------------------------
                                    917 ; overlayable register banks
                                    918 ;--------------------------------------------------------
                                    919 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        920 	.ds 8
                                    921 ;--------------------------------------------------------
                                    922 ; internal ram data
                                    923 ;--------------------------------------------------------
                                    924 	.area DSEG    (DATA)
                           000000   925 LmedtronicRF.sendMedtronicMessage$length$1$26==.
      000000                        926 _sendMedtronicMessage_PARM_2:
      000000                        927 	.ds 2
                           000002   928 LmedtronicRF.sendMedtronicMessage$times$1$26==.
      000002                        929 _sendMedtronicMessage_PARM_3:
      000002                        930 	.ds 2
                           000004   931 LmedtronicRF.receiveMedtronicMessage$length$1$30==.
      000004                        932 _receiveMedtronicMessage_PARM_2:
      000004                        933 	.ds 3
                           000007   934 LmedtronicRF.receiveMedtronicMessage$message$1$30==.
      000007                        935 _receiveMedtronicMessage_message_1_30:
      000007                        936 	.ds 3
                           00000A   937 LmedtronicRF.receiveMedtronicMessage$calcCRC$1$31==.
      00000A                        938 _receiveMedtronicMessage_calcCRC_1_31:
      00000A                        939 	.ds 1
                           00000B   940 LmedtronicRF.receiveMedtronicMessage$calcCRC16$1$31==.
      00000B                        941 _receiveMedtronicMessage_calcCRC16_1_31:
      00000B                        942 	.ds 2
                           00000D   943 LmedtronicRF.receiveMedtronicMessage$sloc0$1$0==.
      00000D                        944 _receiveMedtronicMessage_sloc0_1_0:
      00000D                        945 	.ds 2
                           00000F   946 LmedtronicRF.usbReceiveData$tempData$1$39==.
      00000F                        947 _usbReceiveData_tempData_1_39:
      00000F                        948 	.ds 128
                           00008F   949 LmedtronicRF.usbReceiveData$nBytes$1$39==.
      00008F                        950 _usbReceiveData_nBytes_1_39:
      00008F                        951 	.ds 2
                           000091   952 LmedtronicRF.usbReceiveData$i$1$39==.
      000091                        953 _usbReceiveData_i_1_39:
      000091                        954 	.ds 2
                                    955 ;--------------------------------------------------------
                                    956 ; overlayable items in internal ram 
                                    957 ;--------------------------------------------------------
                                    958 ;--------------------------------------------------------
                                    959 ; indirectly addressable internal ram data
                                    960 ;--------------------------------------------------------
                                    961 	.area ISEG    (DATA)
                                    962 ;--------------------------------------------------------
                                    963 ; absolute internal ram data
                                    964 ;--------------------------------------------------------
                                    965 	.area IABS    (ABS,DATA)
                                    966 	.area IABS    (ABS,DATA)
                                    967 ;--------------------------------------------------------
                                    968 ; bit data
                                    969 ;--------------------------------------------------------
                                    970 	.area BSEG    (BIT)
                                    971 ;--------------------------------------------------------
                                    972 ; paged external ram data
                                    973 ;--------------------------------------------------------
                                    974 	.area PSEG    (PAG,XDATA)
                                    975 ;--------------------------------------------------------
                                    976 ; external ram data
                                    977 ;--------------------------------------------------------
                                    978 	.area XSEG    (XDATA)
                           00DF02   979 G$MDMCTRL0H$0$0 == 0xdf02
                           00DF02   980 _MDMCTRL0H	=	0xdf02
                           00DF00   981 G$SYNC1$0$0 == 0xdf00
                           00DF00   982 _SYNC1	=	0xdf00
                           00DF01   983 G$SYNC0$0$0 == 0xdf01
                           00DF01   984 _SYNC0	=	0xdf01
                           00DF02   985 G$PKTLEN$0$0 == 0xdf02
                           00DF02   986 _PKTLEN	=	0xdf02
                           00DF03   987 G$PKTCTRL1$0$0 == 0xdf03
                           00DF03   988 _PKTCTRL1	=	0xdf03
                           00DF04   989 G$PKTCTRL0$0$0 == 0xdf04
                           00DF04   990 _PKTCTRL0	=	0xdf04
                           00DF05   991 G$ADDR$0$0 == 0xdf05
                           00DF05   992 _ADDR	=	0xdf05
                           00DF06   993 G$CHANNR$0$0 == 0xdf06
                           00DF06   994 _CHANNR	=	0xdf06
                           00DF07   995 G$FSCTRL1$0$0 == 0xdf07
                           00DF07   996 _FSCTRL1	=	0xdf07
                           00DF08   997 G$FSCTRL0$0$0 == 0xdf08
                           00DF08   998 _FSCTRL0	=	0xdf08
                           00DF09   999 G$FREQ2$0$0 == 0xdf09
                           00DF09  1000 _FREQ2	=	0xdf09
                           00DF0A  1001 G$FREQ1$0$0 == 0xdf0a
                           00DF0A  1002 _FREQ1	=	0xdf0a
                           00DF0B  1003 G$FREQ0$0$0 == 0xdf0b
                           00DF0B  1004 _FREQ0	=	0xdf0b
                           00DF0C  1005 G$MDMCFG4$0$0 == 0xdf0c
                           00DF0C  1006 _MDMCFG4	=	0xdf0c
                           00DF0D  1007 G$MDMCFG3$0$0 == 0xdf0d
                           00DF0D  1008 _MDMCFG3	=	0xdf0d
                           00DF0E  1009 G$MDMCFG2$0$0 == 0xdf0e
                           00DF0E  1010 _MDMCFG2	=	0xdf0e
                           00DF0F  1011 G$MDMCFG1$0$0 == 0xdf0f
                           00DF0F  1012 _MDMCFG1	=	0xdf0f
                           00DF10  1013 G$MDMCFG0$0$0 == 0xdf10
                           00DF10  1014 _MDMCFG0	=	0xdf10
                           00DF11  1015 G$DEVIATN$0$0 == 0xdf11
                           00DF11  1016 _DEVIATN	=	0xdf11
                           00DF12  1017 G$MCSM2$0$0 == 0xdf12
                           00DF12  1018 _MCSM2	=	0xdf12
                           00DF13  1019 G$MCSM1$0$0 == 0xdf13
                           00DF13  1020 _MCSM1	=	0xdf13
                           00DF14  1021 G$MCSM0$0$0 == 0xdf14
                           00DF14  1022 _MCSM0	=	0xdf14
                           00DF15  1023 G$FOCCFG$0$0 == 0xdf15
                           00DF15  1024 _FOCCFG	=	0xdf15
                           00DF16  1025 G$BSCFG$0$0 == 0xdf16
                           00DF16  1026 _BSCFG	=	0xdf16
                           00DF17  1027 G$AGCCTRL2$0$0 == 0xdf17
                           00DF17  1028 _AGCCTRL2	=	0xdf17
                           00DF18  1029 G$AGCCTRL1$0$0 == 0xdf18
                           00DF18  1030 _AGCCTRL1	=	0xdf18
                           00DF19  1031 G$AGCCTRL0$0$0 == 0xdf19
                           00DF19  1032 _AGCCTRL0	=	0xdf19
                           00DF1A  1033 G$FREND1$0$0 == 0xdf1a
                           00DF1A  1034 _FREND1	=	0xdf1a
                           00DF1B  1035 G$FREND0$0$0 == 0xdf1b
                           00DF1B  1036 _FREND0	=	0xdf1b
                           00DF1C  1037 G$FSCAL3$0$0 == 0xdf1c
                           00DF1C  1038 _FSCAL3	=	0xdf1c
                           00DF1D  1039 G$FSCAL2$0$0 == 0xdf1d
                           00DF1D  1040 _FSCAL2	=	0xdf1d
                           00DF1E  1041 G$FSCAL1$0$0 == 0xdf1e
                           00DF1E  1042 _FSCAL1	=	0xdf1e
                           00DF1F  1043 G$FSCAL0$0$0 == 0xdf1f
                           00DF1F  1044 _FSCAL0	=	0xdf1f
                           00DF20  1045 G$_XREGDF20$0$0 == 0xdf20
                           00DF20  1046 __XREGDF20	=	0xdf20
                           00DF21  1047 G$_XREGDF21$0$0 == 0xdf21
                           00DF21  1048 __XREGDF21	=	0xdf21
                           00DF22  1049 G$_XREGDF22$0$0 == 0xdf22
                           00DF22  1050 __XREGDF22	=	0xdf22
                           00DF23  1051 G$TEST2$0$0 == 0xdf23
                           00DF23  1052 _TEST2	=	0xdf23
                           00DF24  1053 G$TEST1$0$0 == 0xdf24
                           00DF24  1054 _TEST1	=	0xdf24
                           00DF25  1055 G$TEST0$0$0 == 0xdf25
                           00DF25  1056 _TEST0	=	0xdf25
                           00DF26  1057 G$_XREGDF26$0$0 == 0xdf26
                           00DF26  1058 __XREGDF26	=	0xdf26
                           00DF27  1059 G$PA_TABLE7$0$0 == 0xdf27
                           00DF27  1060 _PA_TABLE7	=	0xdf27
                           00DF28  1061 G$PA_TABLE6$0$0 == 0xdf28
                           00DF28  1062 _PA_TABLE6	=	0xdf28
                           00DF29  1063 G$PA_TABLE5$0$0 == 0xdf29
                           00DF29  1064 _PA_TABLE5	=	0xdf29
                           00DF2A  1065 G$PA_TABLE4$0$0 == 0xdf2a
                           00DF2A  1066 _PA_TABLE4	=	0xdf2a
                           00DF2B  1067 G$PA_TABLE3$0$0 == 0xdf2b
                           00DF2B  1068 _PA_TABLE3	=	0xdf2b
                           00DF2C  1069 G$PA_TABLE2$0$0 == 0xdf2c
                           00DF2C  1070 _PA_TABLE2	=	0xdf2c
                           00DF2D  1071 G$PA_TABLE1$0$0 == 0xdf2d
                           00DF2D  1072 _PA_TABLE1	=	0xdf2d
                           00DF2E  1073 G$PA_TABLE0$0$0 == 0xdf2e
                           00DF2E  1074 _PA_TABLE0	=	0xdf2e
                           00DF2F  1075 G$IOCFG2$0$0 == 0xdf2f
                           00DF2F  1076 _IOCFG2	=	0xdf2f
                           00DF30  1077 G$IOCFG1$0$0 == 0xdf30
                           00DF30  1078 _IOCFG1	=	0xdf30
                           00DF31  1079 G$IOCFG0$0$0 == 0xdf31
                           00DF31  1080 _IOCFG0	=	0xdf31
                           00DF32  1081 G$_XREGDF32$0$0 == 0xdf32
                           00DF32  1082 __XREGDF32	=	0xdf32
                           00DF33  1083 G$_XREGDF33$0$0 == 0xdf33
                           00DF33  1084 __XREGDF33	=	0xdf33
                           00DF34  1085 G$_XREGDF34$0$0 == 0xdf34
                           00DF34  1086 __XREGDF34	=	0xdf34
                           00DF35  1087 G$_XREGDF35$0$0 == 0xdf35
                           00DF35  1088 __XREGDF35	=	0xdf35
                           00DF36  1089 G$PARTNUM$0$0 == 0xdf36
                           00DF36  1090 _PARTNUM	=	0xdf36
                           00DF37  1091 G$VERSION$0$0 == 0xdf37
                           00DF37  1092 _VERSION	=	0xdf37
                           00DF38  1093 G$FREQEST$0$0 == 0xdf38
                           00DF38  1094 _FREQEST	=	0xdf38
                           00DF39  1095 G$LQI$0$0 == 0xdf39
                           00DF39  1096 _LQI	=	0xdf39
                           00DF3A  1097 G$RSSI$0$0 == 0xdf3a
                           00DF3A  1098 _RSSI	=	0xdf3a
                           00DF3B  1099 G$MARCSTATE$0$0 == 0xdf3b
                           00DF3B  1100 _MARCSTATE	=	0xdf3b
                           00DF3C  1101 G$PKTSTATUS$0$0 == 0xdf3c
                           00DF3C  1102 _PKTSTATUS	=	0xdf3c
                           00DF3D  1103 G$VCO_VC_DAC$0$0 == 0xdf3d
                           00DF3D  1104 _VCO_VC_DAC	=	0xdf3d
                           00DF40  1105 G$I2SCFG0$0$0 == 0xdf40
                           00DF40  1106 _I2SCFG0	=	0xdf40
                           00DF41  1107 G$I2SCFG1$0$0 == 0xdf41
                           00DF41  1108 _I2SCFG1	=	0xdf41
                           00DF42  1109 G$I2SDATL$0$0 == 0xdf42
                           00DF42  1110 _I2SDATL	=	0xdf42
                           00DF43  1111 G$I2SDATH$0$0 == 0xdf43
                           00DF43  1112 _I2SDATH	=	0xdf43
                           00DF44  1113 G$I2SWCNT$0$0 == 0xdf44
                           00DF44  1114 _I2SWCNT	=	0xdf44
                           00DF45  1115 G$I2SSTAT$0$0 == 0xdf45
                           00DF45  1116 _I2SSTAT	=	0xdf45
                           00DF46  1117 G$I2SCLKF0$0$0 == 0xdf46
                           00DF46  1118 _I2SCLKF0	=	0xdf46
                           00DF47  1119 G$I2SCLKF1$0$0 == 0xdf47
                           00DF47  1120 _I2SCLKF1	=	0xdf47
                           00DF48  1121 G$I2SCLKF2$0$0 == 0xdf48
                           00DF48  1122 _I2SCLKF2	=	0xdf48
                           00DF80  1123 G$_NA_P0$0$0 == 0xdf80
                           00DF80  1124 __NA_P0	=	0xdf80
                           00DF81  1125 G$_NA_SP$0$0 == 0xdf81
                           00DF81  1126 __NA_SP	=	0xdf81
                           00DF82  1127 G$_NA_DPL0$0$0 == 0xdf82
                           00DF82  1128 __NA_DPL0	=	0xdf82
                           00DF83  1129 G$_NA_DPH0$0$0 == 0xdf83
                           00DF83  1130 __NA_DPH0	=	0xdf83
                           00DF84  1131 G$_NA_DPL1$0$0 == 0xdf84
                           00DF84  1132 __NA_DPL1	=	0xdf84
                           00DF85  1133 G$_NA_DPH1$0$0 == 0xdf85
                           00DF85  1134 __NA_DPH1	=	0xdf85
                           00DF86  1135 G$X_U0CSR$0$0 == 0xdf86
                           00DF86  1136 _X_U0CSR	=	0xdf86
                           00DF87  1137 G$_NA_PCON$0$0 == 0xdf87
                           00DF87  1138 __NA_PCON	=	0xdf87
                           00DF88  1139 G$_NA_TCON$0$0 == 0xdf88
                           00DF88  1140 __NA_TCON	=	0xdf88
                           00DF89  1141 G$X_P0IFG$0$0 == 0xdf89
                           00DF89  1142 _X_P0IFG	=	0xdf89
                           00DF8A  1143 G$X_P1IFG$0$0 == 0xdf8a
                           00DF8A  1144 _X_P1IFG	=	0xdf8a
                           00DF8B  1145 G$X_P2IFG$0$0 == 0xdf8b
                           00DF8B  1146 _X_P2IFG	=	0xdf8b
                           00DF8C  1147 G$X_PICTL$0$0 == 0xdf8c
                           00DF8C  1148 _X_PICTL	=	0xdf8c
                           00DF8D  1149 G$X_P1IEN$0$0 == 0xdf8d
                           00DF8D  1150 _X_P1IEN	=	0xdf8d
                           00DF8E  1151 G$_X_SFR8E$0$0 == 0xdf8e
                           00DF8E  1152 __X_SFR8E	=	0xdf8e
                           00DF8F  1153 G$X_P0INP$0$0 == 0xdf8f
                           00DF8F  1154 _X_P0INP	=	0xdf8f
                           00DF90  1155 G$_NA_P1$0$0 == 0xdf90
                           00DF90  1156 __NA_P1	=	0xdf90
                           00DF91  1157 G$X_RFIM$0$0 == 0xdf91
                           00DF91  1158 _X_RFIM	=	0xdf91
                           00DF92  1159 G$_NA_DPS$0$0 == 0xdf92
                           00DF92  1160 __NA_DPS	=	0xdf92
                           00DF93  1161 G$X_MPAGE$0$0 == 0xdf93
                           00DF93  1162 _X_MPAGE	=	0xdf93
                           00DF94  1163 G$_X_SFR94$0$0 == 0xdf94
                           00DF94  1164 __X_SFR94	=	0xdf94
                           00DF95  1165 G$_X_SFR95$0$0 == 0xdf95
                           00DF95  1166 __X_SFR95	=	0xdf95
                           00DF96  1167 G$_X_SFR96$0$0 == 0xdf96
                           00DF96  1168 __X_SFR96	=	0xdf96
                           00DF97  1169 G$_X_SFR97$0$0 == 0xdf97
                           00DF97  1170 __X_SFR97	=	0xdf97
                           00DF98  1171 G$_NA_S0CON$0$0 == 0xdf98
                           00DF98  1172 __NA_S0CON	=	0xdf98
                           00DF99  1173 G$_X_SFR99$0$0 == 0xdf99
                           00DF99  1174 __X_SFR99	=	0xdf99
                           00DF9A  1175 G$_NA_IEN2$0$0 == 0xdf9a
                           00DF9A  1176 __NA_IEN2	=	0xdf9a
                           00DF9B  1177 G$_NA_S1CON$0$0 == 0xdf9b
                           00DF9B  1178 __NA_S1CON	=	0xdf9b
                           00DF9C  1179 G$X_T2CT$0$0 == 0xdf9c
                           00DF9C  1180 _X_T2CT	=	0xdf9c
                           00DF9D  1181 G$X_T2PR$0$0 == 0xdf9d
                           00DF9D  1182 _X_T2PR	=	0xdf9d
                           00DF9E  1183 G$X_T2CTL$0$0 == 0xdf9e
                           00DF9E  1184 _X_T2CTL	=	0xdf9e
                           00DF9F  1185 G$_X_SFR9F$0$0 == 0xdf9f
                           00DF9F  1186 __X_SFR9F	=	0xdf9f
                           00DFA0  1187 G$_NA_P2$0$0 == 0xdfa0
                           00DFA0  1188 __NA_P2	=	0xdfa0
                           00DFA1  1189 G$X_WORIRQ$0$0 == 0xdfa1
                           00DFA1  1190 _X_WORIRQ	=	0xdfa1
                           00DFA2  1191 G$X_WORCTRL$0$0 == 0xdfa2
                           00DFA2  1192 _X_WORCTRL	=	0xdfa2
                           00DFA3  1193 G$X_WOREVT0$0$0 == 0xdfa3
                           00DFA3  1194 _X_WOREVT0	=	0xdfa3
                           00DFA4  1195 G$X_WOREVT1$0$0 == 0xdfa4
                           00DFA4  1196 _X_WOREVT1	=	0xdfa4
                           00DFA5  1197 G$X_WORTIME0$0$0 == 0xdfa5
                           00DFA5  1198 _X_WORTIME0	=	0xdfa5
                           00DFA6  1199 G$X_WORTIME1$0$0 == 0xdfa6
                           00DFA6  1200 _X_WORTIME1	=	0xdfa6
                           00DFA7  1201 G$_X_SFRA7$0$0 == 0xdfa7
                           00DFA7  1202 __X_SFRA7	=	0xdfa7
                           00DFA8  1203 G$_NA_IEN0$0$0 == 0xdfa8
                           00DFA8  1204 __NA_IEN0	=	0xdfa8
                           00DFA9  1205 G$_NA_IP0$0$0 == 0xdfa9
                           00DFA9  1206 __NA_IP0	=	0xdfa9
                           00DFAA  1207 G$_X_SFRAA$0$0 == 0xdfaa
                           00DFAA  1208 __X_SFRAA	=	0xdfaa
                           00DFAB  1209 G$X_FWT$0$0 == 0xdfab
                           00DFAB  1210 _X_FWT	=	0xdfab
                           00DFAC  1211 G$X_FADDRL$0$0 == 0xdfac
                           00DFAC  1212 _X_FADDRL	=	0xdfac
                           00DFAD  1213 G$X_FADDRH$0$0 == 0xdfad
                           00DFAD  1214 _X_FADDRH	=	0xdfad
                           00DFAE  1215 G$X_FCTL$0$0 == 0xdfae
                           00DFAE  1216 _X_FCTL	=	0xdfae
                           00DFAF  1217 G$X_FWDATA$0$0 == 0xdfaf
                           00DFAF  1218 _X_FWDATA	=	0xdfaf
                           00DFB0  1219 G$_X_SFRB0$0$0 == 0xdfb0
                           00DFB0  1220 __X_SFRB0	=	0xdfb0
                           00DFB1  1221 G$X_ENCDI$0$0 == 0xdfb1
                           00DFB1  1222 _X_ENCDI	=	0xdfb1
                           00DFB2  1223 G$X_ENCDO$0$0 == 0xdfb2
                           00DFB2  1224 _X_ENCDO	=	0xdfb2
                           00DFB3  1225 G$X_ENCCS$0$0 == 0xdfb3
                           00DFB3  1226 _X_ENCCS	=	0xdfb3
                           00DFB4  1227 G$X_ADCCON1$0$0 == 0xdfb4
                           00DFB4  1228 _X_ADCCON1	=	0xdfb4
                           00DFB5  1229 G$X_ADCCON2$0$0 == 0xdfb5
                           00DFB5  1230 _X_ADCCON2	=	0xdfb5
                           00DFB6  1231 G$X_ADCCON3$0$0 == 0xdfb6
                           00DFB6  1232 _X_ADCCON3	=	0xdfb6
                           00DFB7  1233 G$_X_SFRB7$0$0 == 0xdfb7
                           00DFB7  1234 __X_SFRB7	=	0xdfb7
                           00DFB8  1235 G$_NA_IEN1$0$0 == 0xdfb8
                           00DFB8  1236 __NA_IEN1	=	0xdfb8
                           00DFB9  1237 G$_NA_IP1$0$0 == 0xdfb9
                           00DFB9  1238 __NA_IP1	=	0xdfb9
                           00DFBA  1239 G$X_ADCL$0$0 == 0xdfba
                           00DFBA  1240 _X_ADCL	=	0xdfba
                           00DFBB  1241 G$X_ADCH$0$0 == 0xdfbb
                           00DFBB  1242 _X_ADCH	=	0xdfbb
                           00DFBC  1243 G$X_RNDL$0$0 == 0xdfbc
                           00DFBC  1244 _X_RNDL	=	0xdfbc
                           00DFBD  1245 G$X_RNDH$0$0 == 0xdfbd
                           00DFBD  1246 _X_RNDH	=	0xdfbd
                           00DFBE  1247 G$X_SLEEP$0$0 == 0xdfbe
                           00DFBE  1248 _X_SLEEP	=	0xdfbe
                           00DFBF  1249 G$_X_SFRBF$0$0 == 0xdfbf
                           00DFBF  1250 __X_SFRBF	=	0xdfbf
                           00DFC0  1251 G$_NA_IRCON$0$0 == 0xdfc0
                           00DFC0  1252 __NA_IRCON	=	0xdfc0
                           00DFC1  1253 G$X_U0DBUF$0$0 == 0xdfc1
                           00DFC1  1254 _X_U0DBUF	=	0xdfc1
                           00DFC2  1255 G$X_U0BAUD$0$0 == 0xdfc2
                           00DFC2  1256 _X_U0BAUD	=	0xdfc2
                           00DFC3  1257 G$_X_SFRC3$0$0 == 0xdfc3
                           00DFC3  1258 __X_SFRC3	=	0xdfc3
                           00DFC4  1259 G$X_U0UCR$0$0 == 0xdfc4
                           00DFC4  1260 _X_U0UCR	=	0xdfc4
                           00DFC5  1261 G$X_U0GCR$0$0 == 0xdfc5
                           00DFC5  1262 _X_U0GCR	=	0xdfc5
                           00DFC6  1263 G$X_CLKCON$0$0 == 0xdfc6
                           00DFC6  1264 _X_CLKCON	=	0xdfc6
                           00DFC7  1265 G$X_MEMCTR$0$0 == 0xdfc7
                           00DFC7  1266 _X_MEMCTR	=	0xdfc7
                           00DFC8  1267 G$_X_SFRC8$0$0 == 0xdfc8
                           00DFC8  1268 __X_SFRC8	=	0xdfc8
                           00DFC9  1269 G$X_WDCTL$0$0 == 0xdfc9
                           00DFC9  1270 _X_WDCTL	=	0xdfc9
                           00DFCA  1271 G$X_T3CNT$0$0 == 0xdfca
                           00DFCA  1272 _X_T3CNT	=	0xdfca
                           00DFCB  1273 G$X_T3CTL$0$0 == 0xdfcb
                           00DFCB  1274 _X_T3CTL	=	0xdfcb
                           00DFCC  1275 G$X_T3CCTL0$0$0 == 0xdfcc
                           00DFCC  1276 _X_T3CCTL0	=	0xdfcc
                           00DFCD  1277 G$X_T3CC0$0$0 == 0xdfcd
                           00DFCD  1278 _X_T3CC0	=	0xdfcd
                           00DFCE  1279 G$X_T3CCTL1$0$0 == 0xdfce
                           00DFCE  1280 _X_T3CCTL1	=	0xdfce
                           00DFCF  1281 G$X_T3CC1$0$0 == 0xdfcf
                           00DFCF  1282 _X_T3CC1	=	0xdfcf
                           00DFD0  1283 G$_NA_PSW$0$0 == 0xdfd0
                           00DFD0  1284 __NA_PSW	=	0xdfd0
                           00DFD1  1285 G$X_DMAIRQ$0$0 == 0xdfd1
                           00DFD1  1286 _X_DMAIRQ	=	0xdfd1
                           00DFD2  1287 G$X_DMA1CFGL$0$0 == 0xdfd2
                           00DFD2  1288 _X_DMA1CFGL	=	0xdfd2
                           00DFD3  1289 G$X_DMA1CFGH$0$0 == 0xdfd3
                           00DFD3  1290 _X_DMA1CFGH	=	0xdfd3
                           00DFD4  1291 G$X_DMA0CFGL$0$0 == 0xdfd4
                           00DFD4  1292 _X_DMA0CFGL	=	0xdfd4
                           00DFD5  1293 G$X_DMA0CFGH$0$0 == 0xdfd5
                           00DFD5  1294 _X_DMA0CFGH	=	0xdfd5
                           00DFD6  1295 G$X_DMAARM$0$0 == 0xdfd6
                           00DFD6  1296 _X_DMAARM	=	0xdfd6
                           00DFD7  1297 G$X_DMAREQ$0$0 == 0xdfd7
                           00DFD7  1298 _X_DMAREQ	=	0xdfd7
                           00DFD8  1299 G$X_TIMIF$0$0 == 0xdfd8
                           00DFD8  1300 _X_TIMIF	=	0xdfd8
                           00DFD9  1301 G$X_RFD$0$0 == 0xdfd9
                           00DFD9  1302 _X_RFD	=	0xdfd9
                           00DFDA  1303 G$X_T1CC0L$0$0 == 0xdfda
                           00DFDA  1304 _X_T1CC0L	=	0xdfda
                           00DFDB  1305 G$X_T1CC0H$0$0 == 0xdfdb
                           00DFDB  1306 _X_T1CC0H	=	0xdfdb
                           00DFDC  1307 G$X_T1CC1L$0$0 == 0xdfdc
                           00DFDC  1308 _X_T1CC1L	=	0xdfdc
                           00DFDD  1309 G$X_T1CC1H$0$0 == 0xdfdd
                           00DFDD  1310 _X_T1CC1H	=	0xdfdd
                           00DFDE  1311 G$X_T1CC2L$0$0 == 0xdfde
                           00DFDE  1312 _X_T1CC2L	=	0xdfde
                           00DFDF  1313 G$X_T1CC2H$0$0 == 0xdfdf
                           00DFDF  1314 _X_T1CC2H	=	0xdfdf
                           00DFE0  1315 G$_NA_ACC$0$0 == 0xdfe0
                           00DFE0  1316 __NA_ACC	=	0xdfe0
                           00DFE1  1317 G$X_RFST$0$0 == 0xdfe1
                           00DFE1  1318 _X_RFST	=	0xdfe1
                           00DFE2  1319 G$X_T1CNTL$0$0 == 0xdfe2
                           00DFE2  1320 _X_T1CNTL	=	0xdfe2
                           00DFE3  1321 G$X_T1CNTH$0$0 == 0xdfe3
                           00DFE3  1322 _X_T1CNTH	=	0xdfe3
                           00DFE4  1323 G$X_T1CTL$0$0 == 0xdfe4
                           00DFE4  1324 _X_T1CTL	=	0xdfe4
                           00DFE5  1325 G$X_T1CCTL0$0$0 == 0xdfe5
                           00DFE5  1326 _X_T1CCTL0	=	0xdfe5
                           00DFE6  1327 G$X_T1CCTL1$0$0 == 0xdfe6
                           00DFE6  1328 _X_T1CCTL1	=	0xdfe6
                           00DFE7  1329 G$X_T1CCTL2$0$0 == 0xdfe7
                           00DFE7  1330 _X_T1CCTL2	=	0xdfe7
                           00DFE8  1331 G$_NA_IRCON2$0$0 == 0xdfe8
                           00DFE8  1332 __NA_IRCON2	=	0xdfe8
                           00DFE9  1333 G$X_RFIF$0$0 == 0xdfe9
                           00DFE9  1334 _X_RFIF	=	0xdfe9
                           00DFEA  1335 G$X_T4CNT$0$0 == 0xdfea
                           00DFEA  1336 _X_T4CNT	=	0xdfea
                           00DFEB  1337 G$X_T4CTL$0$0 == 0xdfeb
                           00DFEB  1338 _X_T4CTL	=	0xdfeb
                           00DFEC  1339 G$X_T4CCTL0$0$0 == 0xdfec
                           00DFEC  1340 _X_T4CCTL0	=	0xdfec
                           00DFED  1341 G$X_T4CC0$0$0 == 0xdfed
                           00DFED  1342 _X_T4CC0	=	0xdfed
                           00DFEE  1343 G$X_T4CCTL1$0$0 == 0xdfee
                           00DFEE  1344 _X_T4CCTL1	=	0xdfee
                           00DFEF  1345 G$X_T4CC1$0$0 == 0xdfef
                           00DFEF  1346 _X_T4CC1	=	0xdfef
                           00DFF0  1347 G$_NA_B$0$0 == 0xdff0
                           00DFF0  1348 __NA_B	=	0xdff0
                           00DFF1  1349 G$X_PERCFG$0$0 == 0xdff1
                           00DFF1  1350 _X_PERCFG	=	0xdff1
                           00DFF2  1351 G$X_ADCCFG$0$0 == 0xdff2
                           00DFF2  1352 _X_ADCCFG	=	0xdff2
                           00DFF3  1353 G$X_P0SEL$0$0 == 0xdff3
                           00DFF3  1354 _X_P0SEL	=	0xdff3
                           00DFF4  1355 G$X_P1SEL$0$0 == 0xdff4
                           00DFF4  1356 _X_P1SEL	=	0xdff4
                           00DFF5  1357 G$X_P2SEL$0$0 == 0xdff5
                           00DFF5  1358 _X_P2SEL	=	0xdff5
                           00DFF6  1359 G$X_P1INP$0$0 == 0xdff6
                           00DFF6  1360 _X_P1INP	=	0xdff6
                           00DFF7  1361 G$X_P2INP$0$0 == 0xdff7
                           00DFF7  1362 _X_P2INP	=	0xdff7
                           00DFF8  1363 G$X_U1CSR$0$0 == 0xdff8
                           00DFF8  1364 _X_U1CSR	=	0xdff8
                           00DFF9  1365 G$X_U1DBUF$0$0 == 0xdff9
                           00DFF9  1366 _X_U1DBUF	=	0xdff9
                           00DFFA  1367 G$X_U1BAUD$0$0 == 0xdffa
                           00DFFA  1368 _X_U1BAUD	=	0xdffa
                           00DFFB  1369 G$X_U1UCR$0$0 == 0xdffb
                           00DFFB  1370 _X_U1UCR	=	0xdffb
                           00DFFC  1371 G$X_U1GCR$0$0 == 0xdffc
                           00DFFC  1372 _X_U1GCR	=	0xdffc
                           00DFFD  1373 G$X_P0DIR$0$0 == 0xdffd
                           00DFFD  1374 _X_P0DIR	=	0xdffd
                           00DFFE  1375 G$X_P1DIR$0$0 == 0xdffe
                           00DFFE  1376 _X_P1DIR	=	0xdffe
                           00DFFF  1377 G$X_P2DIR$0$0 == 0xdfff
                           00DFFF  1378 _X_P2DIR	=	0xdfff
                           000000  1379 FmedtronicRF$rfMessage$0$0==.
      000000                       1380 _rfMessage:
      000000                       1381 	.ds 512
                           000200  1382 FmedtronicRF$rfLength$0$0==.
      000200                       1383 _rfLength:
      000200                       1384 	.ds 2
                           000202  1385 FmedtronicRF$lastData$0$0==.
      000202                       1386 _lastData:
      000202                       1387 	.ds 1
                                   1388 ;--------------------------------------------------------
                                   1389 ; absolute external ram data
                                   1390 ;--------------------------------------------------------
                                   1391 	.area XABS    (ABS,XDATA)
                                   1392 ;--------------------------------------------------------
                                   1393 ; external initialized ram data
                                   1394 ;--------------------------------------------------------
                                   1395 	.area XISEG   (XDATA)
                                   1396 	.area HOME    (CODE)
                                   1397 	.area GSINIT0 (CODE)
                                   1398 	.area GSINIT1 (CODE)
                                   1399 	.area GSINIT2 (CODE)
                                   1400 	.area GSINIT3 (CODE)
                                   1401 	.area GSINIT4 (CODE)
                                   1402 	.area GSINIT5 (CODE)
                                   1403 	.area GSINIT  (CODE)
                                   1404 	.area GSFINAL (CODE)
                                   1405 	.area CSEG    (CODE)
                                   1406 ;--------------------------------------------------------
                                   1407 ; global & static initialisations
                                   1408 ;--------------------------------------------------------
                                   1409 	.area HOME    (CODE)
                                   1410 	.area GSINIT  (CODE)
                                   1411 	.area GSFINAL (CODE)
                                   1412 	.area GSINIT  (CODE)
                                   1413 ;--------------------------------------------------------
                                   1414 ; Home
                                   1415 ;--------------------------------------------------------
                                   1416 	.area HOME    (CODE)
                                   1417 	.area HOME    (CODE)
                                   1418 ;--------------------------------------------------------
                                   1419 ; code
                                   1420 ;--------------------------------------------------------
                                   1421 	.area CSEG    (CODE)
                                   1422 ;------------------------------------------------------------
                                   1423 ;Allocation info for local variables in function 'sendMedtronicMessage'
                                   1424 ;------------------------------------------------------------
                                   1425 ;length                    Allocated with name '_sendMedtronicMessage_PARM_2'
                                   1426 ;times                     Allocated with name '_sendMedtronicMessage_PARM_3'
                                   1427 ;message                   Allocated to registers r5 r6 r7 
                                   1428 ;i                         Allocated to registers r2 r3 
                                   1429 ;j                         Allocated to registers r4 r5 
                                   1430 ;------------------------------------------------------------
                           000000  1431 	G$sendMedtronicMessage$0$0 ==.
                           000000  1432 	C$medtronicRF.c$24$0$0 ==.
                                   1433 ;	medtronicRF.c:24: void sendMedtronicMessage( char *message, unsigned int length, int times ) {
                                   1434 ;	-----------------------------------------
                                   1435 ;	 function sendMedtronicMessage
                                   1436 ;	-----------------------------------------
      000000                       1437 _sendMedtronicMessage:
                           000007  1438 	ar7 = 0x07
                           000006  1439 	ar6 = 0x06
                           000005  1440 	ar5 = 0x05
                           000004  1441 	ar4 = 0x04
                           000003  1442 	ar3 = 0x03
                           000002  1443 	ar2 = 0x02
                           000001  1444 	ar1 = 0x01
                           000000  1445 	ar0 = 0x00
      000000 AD 82            [24] 1446 	mov	r5,dpl
      000002 AE 83            [24] 1447 	mov	r6,dph
      000004 AF F0            [24] 1448 	mov	r7,b
                           000006  1449 	C$medtronicRF.c$28$1$27 ==.
                                   1450 ;	medtronicRF.c:28: encode4b6b( message, length, rfMessage, &rfLength );
      000006 75*00r00         [24] 1451 	mov	_encode4b6b_PARM_3,#_rfMessage
      000009 75*01s00         [24] 1452 	mov	(_encode4b6b_PARM_3 + 1),#(_rfMessage >> 8)
      00000C 75*02 00         [24] 1453 	mov	(_encode4b6b_PARM_3 + 2),#0x00
      00000F 75*00r00         [24] 1454 	mov	_encode4b6b_PARM_4,#_rfLength
      000012 75*01s02         [24] 1455 	mov	(_encode4b6b_PARM_4 + 1),#(_rfLength >> 8)
      000015 75*02 00         [24] 1456 	mov	(_encode4b6b_PARM_4 + 2),#0x00
      000018 85*00*00         [24] 1457 	mov	_encode4b6b_PARM_2,_sendMedtronicMessage_PARM_2
      00001B 85*01*01         [24] 1458 	mov	(_encode4b6b_PARM_2 + 1),(_sendMedtronicMessage_PARM_2 + 1)
      00001E 8D 82            [24] 1459 	mov	dpl,r5
      000020 8E 83            [24] 1460 	mov	dph,r6
      000022 8F F0            [24] 1461 	mov	b,r7
      000024 12r00r00         [24] 1462 	lcall	_encode4b6b
                           000027  1463 	C$medtronicRF.c$29$1$27 ==.
                                   1464 ;	medtronicRF.c:29: PKTLEN = rfLength;
      000027 90r02r00         [24] 1465 	mov	dptr,#_rfLength
      00002A E0               [24] 1466 	movx	a,@dptr
      00002B FE               [12] 1467 	mov	r6,a
      00002C A3               [24] 1468 	inc	dptr
      00002D E0               [24] 1469 	movx	a,@dptr
      00002E FF               [12] 1470 	mov	r7,a
      00002F 90 DF 02         [24] 1471 	mov	dptr,#_PKTLEN
      000032 EE               [12] 1472 	mov	a,r6
      000033 F0               [24] 1473 	movx	@dptr,a
                           000034  1474 	C$medtronicRF.c$31$1$27 ==.
                                   1475 ;	medtronicRF.c:31: RFST = RFST_SIDLE;
      000034 75 E1 04         [24] 1476 	mov	_RFST,#0x04
                           000037  1477 	C$medtronicRF.c$33$1$27 ==.
                                   1478 ;	medtronicRF.c:33: for( j = 0; j < times; j++ ) {
      000037 7C 00            [12] 1479 	mov	r4,#0x00
      000039 7D 00            [12] 1480 	mov	r5,#0x00
      00003B                       1481 00113$:
      00003B C3               [12] 1482 	clr	c
      00003C EC               [12] 1483 	mov	a,r4
      00003D 95*02            [12] 1484 	subb	a,_sendMedtronicMessage_PARM_3
      00003F ED               [12] 1485 	mov	a,r5
      000040 64 80            [12] 1486 	xrl	a,#0x80
      000042 85*03 F0         [24] 1487 	mov	b,(_sendMedtronicMessage_PARM_3 + 1)
      000045 63 F0 80         [24] 1488 	xrl	b,#0x80
      000048 95 F0            [12] 1489 	subb	a,b
      00004A 50 43            [24] 1490 	jnc	00108$
                           00004C  1491 	C$medtronicRF.c$34$2$28 ==.
                                   1492 ;	medtronicRF.c:34: RFST = RFST_STX;
      00004C 75 E1 03         [24] 1493 	mov	_RFST,#0x03
                           00004F  1494 	C$medtronicRF.c$35$1$27 ==.
                                   1495 ;	medtronicRF.c:35: for( i = 0; i < rfLength; i++ ) {
      00004F 7A 00            [12] 1496 	mov	r2,#0x00
      000051 7B 00            [12] 1497 	mov	r3,#0x00
      000053                       1498 00110$:
      000053 8A 00            [24] 1499 	mov	ar0,r2
      000055 8B 01            [24] 1500 	mov	ar1,r3
      000057 C3               [12] 1501 	clr	c
      000058 E8               [12] 1502 	mov	a,r0
      000059 9E               [12] 1503 	subb	a,r6
      00005A E9               [12] 1504 	mov	a,r1
      00005B 9F               [12] 1505 	subb	a,r7
      00005C 50 1A            [24] 1506 	jnc	00104$
                           00005E  1507 	C$medtronicRF.c$36$3$29 ==.
                                   1508 ;	medtronicRF.c:36: while( !RFTXRXIF );
      00005E                       1509 00101$:
      00005E 30 89 FD         [24] 1510 	jnb	_RFTXRXIF,00101$
                           000061  1511 	C$medtronicRF.c$37$3$29 ==.
                                   1512 ;	medtronicRF.c:37: TCON &= 0xFD;
      000061 53 88 FD         [24] 1513 	anl	_TCON,#0xFD
                           000064  1514 	C$medtronicRF.c$38$3$29 ==.
                                   1515 ;	medtronicRF.c:38: RFD = rfMessage[i];
      000064 EA               [12] 1516 	mov	a,r2
      000065 24r00            [12] 1517 	add	a,#_rfMessage
      000067 F5 82            [12] 1518 	mov	dpl,a
      000069 EB               [12] 1519 	mov	a,r3
      00006A 34s00            [12] 1520 	addc	a,#(_rfMessage >> 8)
      00006C F5 83            [12] 1521 	mov	dph,a
      00006E E0               [24] 1522 	movx	a,@dptr
      00006F F5 D9            [12] 1523 	mov	_RFD,a
                           000071  1524 	C$medtronicRF.c$35$2$28 ==.
                                   1525 ;	medtronicRF.c:35: for( i = 0; i < rfLength; i++ ) {
      000071 0A               [12] 1526 	inc	r2
      000072 BA 00 DE         [24] 1527 	cjne	r2,#0x00,00110$
      000075 0B               [12] 1528 	inc	r3
      000076 80 DB            [24] 1529 	sjmp	00110$
      000078                       1530 00104$:
                           000078  1531 	C$medtronicRF.c$43$1$27 ==.
                                   1532 ;	medtronicRF.c:43: while( --i ) Nop( );
      000078 7A 00            [12] 1533 	mov	r2,#0x00
      00007A 7B 10            [12] 1534 	mov	r3,#0x10
      00007C                       1535 00105$:
      00007C 1A               [12] 1536 	dec	r2
      00007D BA FF 01         [24] 1537 	cjne	r2,#0xFF,00145$
      000080 1B               [12] 1538 	dec	r3
      000081                       1539 00145$:
      000081 EA               [12] 1540 	mov	a,r2
      000082 4B               [12] 1541 	orl	a,r3
      000083 60 03            [24] 1542 	jz	00114$
      000085 00               [12] 1543 	nop 
      000086 80 F4            [24] 1544 	sjmp	00105$
      000088                       1545 00114$:
                           000088  1546 	C$medtronicRF.c$33$1$27 ==.
                                   1547 ;	medtronicRF.c:33: for( j = 0; j < times; j++ ) {
      000088 0C               [12] 1548 	inc	r4
      000089 BC 00 AF         [24] 1549 	cjne	r4,#0x00,00113$
      00008C 0D               [12] 1550 	inc	r5
      00008D 80 AC            [24] 1551 	sjmp	00113$
      00008F                       1552 00108$:
                           00008F  1553 	C$medtronicRF.c$46$1$27 ==.
                                   1554 ;	medtronicRF.c:46: PKTLEN = 0xFF;
      00008F 90 DF 02         [24] 1555 	mov	dptr,#_PKTLEN
      000092 74 FF            [12] 1556 	mov	a,#0xFF
      000094 F0               [24] 1557 	movx	@dptr,a
                           000095  1558 	C$medtronicRF.c$47$1$27 ==.
                                   1559 ;	medtronicRF.c:47: RFST = RFST_SIDLE;
      000095 75 E1 04         [24] 1560 	mov	_RFST,#0x04
                           000098  1561 	C$medtronicRF.c$48$1$27 ==.
                                   1562 ;	medtronicRF.c:48: RFST = RFST_SRX;
      000098 75 E1 02         [24] 1563 	mov	_RFST,#0x02
                           00009B  1564 	C$medtronicRF.c$49$1$27 ==.
                           00009B  1565 	XG$sendMedtronicMessage$0$0 ==.
      00009B 22               [24] 1566 	ret
                                   1567 ;------------------------------------------------------------
                                   1568 ;Allocation info for local variables in function 'receiveMedtronicMessage'
                                   1569 ;------------------------------------------------------------
                                   1570 ;length                    Allocated with name '_receiveMedtronicMessage_PARM_2'
                                   1571 ;message                   Allocated with name '_receiveMedtronicMessage_message_1_30'
                                   1572 ;i                         Allocated to registers r3 r4 
                                   1573 ;calcCRC                   Allocated with name '_receiveMedtronicMessage_calcCRC_1_31'
                                   1574 ;calcCRC16                 Allocated with name '_receiveMedtronicMessage_calcCRC16_1_31'
                                   1575 ;sloc0                     Allocated with name '_receiveMedtronicMessage_sloc0_1_0'
                                   1576 ;------------------------------------------------------------
                           00009C  1577 	G$receiveMedtronicMessage$0$0 ==.
                           00009C  1578 	C$medtronicRF.c$51$1$27 ==.
                                   1579 ;	medtronicRF.c:51: char receiveMedtronicMessage( char *message, unsigned int *length ) {
                                   1580 ;	-----------------------------------------
                                   1581 ;	 function receiveMedtronicMessage
                                   1582 ;	-----------------------------------------
      00009C                       1583 _receiveMedtronicMessage:
      00009C 85 82*07         [24] 1584 	mov	_receiveMedtronicMessage_message_1_30,dpl
      00009F 85 83*08         [24] 1585 	mov	(_receiveMedtronicMessage_message_1_30 + 1),dph
      0000A2 85 F0*09         [24] 1586 	mov	(_receiveMedtronicMessage_message_1_30 + 2),b
                           0000A5  1587 	C$medtronicRF.c$56$1$31 ==.
                                   1588 ;	medtronicRF.c:56: RFST = RFST_SIDLE;
      0000A5 75 E1 04         [24] 1589 	mov	_RFST,#0x04
                           0000A8  1590 	C$medtronicRF.c$57$1$31 ==.
                                   1591 ;	medtronicRF.c:57: RFST = RFST_SRX;
      0000A8 75 E1 02         [24] 1592 	mov	_RFST,#0x02
                           0000AB  1593 	C$medtronicRF.c$59$1$31 ==.
                                   1594 ;	medtronicRF.c:59: PKTLEN = 0xFF;
      0000AB 90 DF 02         [24] 1595 	mov	dptr,#_PKTLEN
      0000AE 74 FF            [12] 1596 	mov	a,#0xFF
      0000B0 F0               [24] 1597 	movx	@dptr,a
                           0000B1  1598 	C$medtronicRF.c$60$1$31 ==.
                                   1599 ;	medtronicRF.c:60: lastData = 0xFF;
      0000B1 90r02r02         [24] 1600 	mov	dptr,#_lastData
      0000B4 F0               [24] 1601 	movx	@dptr,a
                           0000B5  1602 	C$medtronicRF.c$61$2$32 ==.
                                   1603 ;	medtronicRF.c:61: for( i = 0; i < 500 && lastData != 0x00; i++ ) {
      0000B5 7B 00            [12] 1604 	mov	r3,#0x00
      0000B7 7C 00            [12] 1605 	mov	r4,#0x00
      0000B9                       1606 00117$:
      0000B9 C3               [12] 1607 	clr	c
      0000BA EB               [12] 1608 	mov	a,r3
      0000BB 94 F4            [12] 1609 	subb	a,#0xF4
      0000BD EC               [12] 1610 	mov	a,r4
      0000BE 94 01            [12] 1611 	subb	a,#0x01
      0000C0 50 41            [24] 1612 	jnc	00104$
      0000C2 90r02r02         [24] 1613 	mov	dptr,#_lastData
      0000C5 E0               [24] 1614 	movx	a,@dptr
      0000C6 FA               [12] 1615 	mov	r2,a
      0000C7 60 3A            [24] 1616 	jz	00104$
                           0000C9  1617 	C$medtronicRF.c$62$2$32 ==.
                                   1618 ;	medtronicRF.c:62: while( !RFTXRXIF ) {
      0000C9                       1619 00101$:
      0000C9 20 89 10         [24] 1620 	jb	_RFTXRXIF,00103$
                           0000CC  1621 	C$medtronicRF.c$63$3$33 ==.
                                   1622 ;	medtronicRF.c:63: usbUartProcess( );
      0000CC C0 04            [24] 1623 	push	ar4
      0000CE C0 03            [24] 1624 	push	ar3
      0000D0 12r00r00         [24] 1625 	lcall	_usbUartProcess
                           0000D3  1626 	C$medtronicRF.c$64$3$33 ==.
                                   1627 ;	medtronicRF.c:64: usbReceiveData( );
      0000D3 12r03r8A         [24] 1628 	lcall	_usbReceiveData
      0000D6 D0 03            [24] 1629 	pop	ar3
      0000D8 D0 04            [24] 1630 	pop	ar4
      0000DA 80 ED            [24] 1631 	sjmp	00101$
      0000DC                       1632 00103$:
                           0000DC  1633 	C$medtronicRF.c$66$2$32 ==.
                                   1634 ;	medtronicRF.c:66: rfMessage[i] = RFD;
      0000DC EB               [12] 1635 	mov	a,r3
      0000DD 24r00            [12] 1636 	add	a,#_rfMessage
      0000DF F9               [12] 1637 	mov	r1,a
      0000E0 EC               [12] 1638 	mov	a,r4
      0000E1 34s00            [12] 1639 	addc	a,#(_rfMessage >> 8)
      0000E3 FA               [12] 1640 	mov	r2,a
      0000E4 89 82            [24] 1641 	mov	dpl,r1
      0000E6 8A 83            [24] 1642 	mov	dph,r2
      0000E8 E5 D9            [12] 1643 	mov	a,_RFD
      0000EA F0               [24] 1644 	movx	@dptr,a
                           0000EB  1645 	C$medtronicRF.c$67$2$32 ==.
                                   1646 ;	medtronicRF.c:67: lastData = rfMessage[i];
      0000EB 89 82            [24] 1647 	mov	dpl,r1
      0000ED 8A 83            [24] 1648 	mov	dph,r2
      0000EF E0               [24] 1649 	movx	a,@dptr
      0000F0 F9               [12] 1650 	mov	r1,a
      0000F1 90r02r02         [24] 1651 	mov	dptr,#_lastData
      0000F4 F0               [24] 1652 	movx	@dptr,a
                           0000F5  1653 	C$medtronicRF.c$68$2$32 ==.
                                   1654 ;	medtronicRF.c:68: TCON &= ~0x02;
      0000F5 AA 88            [24] 1655 	mov	r2,_TCON
      0000F7 74 FD            [12] 1656 	mov	a,#0xFD
      0000F9 5A               [12] 1657 	anl	a,r2
      0000FA F5 88            [12] 1658 	mov	_TCON,a
                           0000FC  1659 	C$medtronicRF.c$61$1$31 ==.
                                   1660 ;	medtronicRF.c:61: for( i = 0; i < 500 && lastData != 0x00; i++ ) {
      0000FC 0B               [12] 1661 	inc	r3
      0000FD BB 00 B9         [24] 1662 	cjne	r3,#0x00,00117$
      000100 0C               [12] 1663 	inc	r4
      000101 80 B6            [24] 1664 	sjmp	00117$
      000103                       1665 00104$:
                           000103  1666 	C$medtronicRF.c$70$1$31 ==.
                                   1667 ;	medtronicRF.c:70: rfLength = i - 1;
      000103 1B               [12] 1668 	dec	r3
      000104 BB FF 01         [24] 1669 	cjne	r3,#0xFF,00156$
      000107 1C               [12] 1670 	dec	r4
      000108                       1671 00156$:
      000108 90r02r00         [24] 1672 	mov	dptr,#_rfLength
      00010B EB               [12] 1673 	mov	a,r3
      00010C F0               [24] 1674 	movx	@dptr,a
      00010D EC               [12] 1675 	mov	a,r4
      00010E A3               [24] 1676 	inc	dptr
      00010F F0               [24] 1677 	movx	@dptr,a
                           000110  1678 	C$medtronicRF.c$71$1$31 ==.
                                   1679 ;	medtronicRF.c:71: RFST = RFST_SIDLE;
      000110 75 E1 04         [24] 1680 	mov	_RFST,#0x04
                           000113  1681 	C$medtronicRF.c$73$1$31 ==.
                                   1682 ;	medtronicRF.c:73: decode4b6b( rfMessage, rfLength, message, length );
      000113 8B*00            [24] 1683 	mov	_decode4b6b_PARM_2,r3
      000115 8C*01            [24] 1684 	mov	(_decode4b6b_PARM_2 + 1),r4
      000117 85*07*00         [24] 1685 	mov	_decode4b6b_PARM_3,_receiveMedtronicMessage_message_1_30
      00011A 85*08*01         [24] 1686 	mov	(_decode4b6b_PARM_3 + 1),(_receiveMedtronicMessage_message_1_30 + 1)
      00011D 85*09*02         [24] 1687 	mov	(_decode4b6b_PARM_3 + 2),(_receiveMedtronicMessage_message_1_30 + 2)
      000120 85*04*00         [24] 1688 	mov	_decode4b6b_PARM_4,_receiveMedtronicMessage_PARM_2
      000123 85*05*01         [24] 1689 	mov	(_decode4b6b_PARM_4 + 1),(_receiveMedtronicMessage_PARM_2 + 1)
      000126 85*06*02         [24] 1690 	mov	(_decode4b6b_PARM_4 + 2),(_receiveMedtronicMessage_PARM_2 + 2)
      000129 90r00r00         [24] 1691 	mov	dptr,#_rfMessage
      00012C 75 F0 00         [24] 1692 	mov	b,#0x00
      00012F 12r00r00         [24] 1693 	lcall	_decode4b6b
                           000132  1694 	C$medtronicRF.c$74$1$31 ==.
                                   1695 ;	medtronicRF.c:74: calcCRC = crc8( message, (*length) - 1 );
      000132 AA*04            [24] 1696 	mov	r2,_receiveMedtronicMessage_PARM_2
      000134 AB*05            [24] 1697 	mov	r3,(_receiveMedtronicMessage_PARM_2 + 1)
      000136 AC*06            [24] 1698 	mov	r4,(_receiveMedtronicMessage_PARM_2 + 2)
      000138 8A 82            [24] 1699 	mov	dpl,r2
      00013A 8B 83            [24] 1700 	mov	dph,r3
      00013C 8C F0            [24] 1701 	mov	b,r4
      00013E 12r00r00         [24] 1702 	lcall	__gptrget
      000141 F8               [12] 1703 	mov	r0,a
      000142 A3               [24] 1704 	inc	dptr
      000143 12r00r00         [24] 1705 	lcall	__gptrget
      000146 F9               [12] 1706 	mov	r1,a
      000147 E8               [12] 1707 	mov	a,r0
      000148 24 FF            [12] 1708 	add	a,#0xFF
      00014A F5*00            [12] 1709 	mov	_crc8_PARM_2,a
      00014C E9               [12] 1710 	mov	a,r1
      00014D 34 FF            [12] 1711 	addc	a,#0xFF
      00014F F5*01            [12] 1712 	mov	(_crc8_PARM_2 + 1),a
      000151 85*07 82         [24] 1713 	mov	dpl,_receiveMedtronicMessage_message_1_30
      000154 85*08 83         [24] 1714 	mov	dph,(_receiveMedtronicMessage_message_1_30 + 1)
      000157 85*09 F0         [24] 1715 	mov	b,(_receiveMedtronicMessage_message_1_30 + 2)
      00015A C0 04            [24] 1716 	push	ar4
      00015C C0 03            [24] 1717 	push	ar3
      00015E C0 02            [24] 1718 	push	ar2
      000160 12r00r00         [24] 1719 	lcall	_crc8
      000163 85 82*0A         [24] 1720 	mov	_receiveMedtronicMessage_calcCRC_1_31,dpl
      000166 D0 02            [24] 1721 	pop	ar2
      000168 D0 03            [24] 1722 	pop	ar3
      00016A D0 04            [24] 1723 	pop	ar4
                           00016C  1724 	C$medtronicRF.c$76$1$31 ==.
                                   1725 ;	medtronicRF.c:76: if( calcCRC == message[(*length) - 1] ) {
      00016C 8A 82            [24] 1726 	mov	dpl,r2
      00016E 8B 83            [24] 1727 	mov	dph,r3
      000170 8C F0            [24] 1728 	mov	b,r4
      000172 12r00r00         [24] 1729 	lcall	__gptrget
      000175 F5*0D            [12] 1730 	mov	_receiveMedtronicMessage_sloc0_1_0,a
      000177 A3               [24] 1731 	inc	dptr
      000178 12r00r00         [24] 1732 	lcall	__gptrget
      00017B F5*0E            [12] 1733 	mov	(_receiveMedtronicMessage_sloc0_1_0 + 1),a
      00017D E5*0D            [12] 1734 	mov	a,_receiveMedtronicMessage_sloc0_1_0
      00017F 24 FF            [12] 1735 	add	a,#0xFF
      000181 F8               [12] 1736 	mov	r0,a
      000182 E5*0E            [12] 1737 	mov	a,(_receiveMedtronicMessage_sloc0_1_0 + 1)
      000184 34 FF            [12] 1738 	addc	a,#0xFF
      000186 F9               [12] 1739 	mov	r1,a
      000187 E8               [12] 1740 	mov	a,r0
      000188 25*07            [12] 1741 	add	a,_receiveMedtronicMessage_message_1_30
      00018A F8               [12] 1742 	mov	r0,a
      00018B E9               [12] 1743 	mov	a,r1
      00018C 35*08            [12] 1744 	addc	a,(_receiveMedtronicMessage_message_1_30 + 1)
      00018E F9               [12] 1745 	mov	r1,a
      00018F AF*09            [24] 1746 	mov	r7,(_receiveMedtronicMessage_message_1_30 + 2)
      000191 88 82            [24] 1747 	mov	dpl,r0
      000193 89 83            [24] 1748 	mov	dph,r1
      000195 8F F0            [24] 1749 	mov	b,r7
      000197 12r00r00         [24] 1750 	lcall	__gptrget
      00019A F8               [12] 1751 	mov	r0,a
      00019B B5*0A 06         [24] 1752 	cjne	a,_receiveMedtronicMessage_calcCRC_1_31,00106$
                           00019E  1753 	C$medtronicRF.c$77$2$34 ==.
                                   1754 ;	medtronicRF.c:77: return (0);
      00019E 75 82 00         [24] 1755 	mov	dpl,#0x00
      0001A1 02r03r89         [24] 1756 	ljmp	00119$
      0001A4                       1757 00106$:
                           0001A4  1758 	C$medtronicRF.c$80$1$31 ==.
                                   1759 ;	medtronicRF.c:80: calcCRC16 = crc16( message, (*length) - 2 );
      0001A4 E5*0D            [12] 1760 	mov	a,_receiveMedtronicMessage_sloc0_1_0
      0001A6 24 FE            [12] 1761 	add	a,#0xFE
      0001A8 F5*00            [12] 1762 	mov	_crc16_PARM_2,a
      0001AA E5*0E            [12] 1763 	mov	a,(_receiveMedtronicMessage_sloc0_1_0 + 1)
      0001AC 34 FF            [12] 1764 	addc	a,#0xFF
      0001AE F5*01            [12] 1765 	mov	(_crc16_PARM_2 + 1),a
      0001B0 85*07 82         [24] 1766 	mov	dpl,_receiveMedtronicMessage_message_1_30
      0001B3 85*08 83         [24] 1767 	mov	dph,(_receiveMedtronicMessage_message_1_30 + 1)
      0001B6 85*09 F0         [24] 1768 	mov	b,(_receiveMedtronicMessage_message_1_30 + 2)
      0001B9 C0 04            [24] 1769 	push	ar4
      0001BB C0 03            [24] 1770 	push	ar3
      0001BD C0 02            [24] 1771 	push	ar2
      0001BF 12r00r00         [24] 1772 	lcall	_crc16
      0001C2 85 82*0B         [24] 1773 	mov	_receiveMedtronicMessage_calcCRC16_1_31,dpl
      0001C5 85 83*0C         [24] 1774 	mov	(_receiveMedtronicMessage_calcCRC16_1_31 + 1),dph
      0001C8 D0 02            [24] 1775 	pop	ar2
      0001CA D0 03            [24] 1776 	pop	ar3
      0001CC D0 04            [24] 1777 	pop	ar4
                           0001CE  1778 	C$medtronicRF.c$81$1$31 ==.
                                   1779 ;	medtronicRF.c:81: if( ((char)(calcCRC16 & 0x00FF) == message[(*length) - 1]) &&
      0001CE A9*0B            [24] 1780 	mov	r1,_receiveMedtronicMessage_calcCRC16_1_31
      0001D0 8A 82            [24] 1781 	mov	dpl,r2
      0001D2 8B 83            [24] 1782 	mov	dph,r3
      0001D4 8C F0            [24] 1783 	mov	b,r4
      0001D6 12r00r00         [24] 1784 	lcall	__gptrget
      0001D9 F8               [12] 1785 	mov	r0,a
      0001DA A3               [24] 1786 	inc	dptr
      0001DB 12r00r00         [24] 1787 	lcall	__gptrget
      0001DE FD               [12] 1788 	mov	r5,a
      0001DF E8               [12] 1789 	mov	a,r0
      0001E0 24 FF            [12] 1790 	add	a,#0xFF
      0001E2 FE               [12] 1791 	mov	r6,a
      0001E3 ED               [12] 1792 	mov	a,r5
      0001E4 34 FF            [12] 1793 	addc	a,#0xFF
      0001E6 FF               [12] 1794 	mov	r7,a
      0001E7 C0 02            [24] 1795 	push	ar2
      0001E9 C0 03            [24] 1796 	push	ar3
      0001EB C0 04            [24] 1797 	push	ar4
      0001ED EE               [12] 1798 	mov	a,r6
      0001EE 25*07            [12] 1799 	add	a,_receiveMedtronicMessage_message_1_30
      0001F0 FE               [12] 1800 	mov	r6,a
      0001F1 EF               [12] 1801 	mov	a,r7
      0001F2 35*08            [12] 1802 	addc	a,(_receiveMedtronicMessage_message_1_30 + 1)
      0001F4 FC               [12] 1803 	mov	r4,a
      0001F5 AF*09            [24] 1804 	mov	r7,(_receiveMedtronicMessage_message_1_30 + 2)
      0001F7 8E 82            [24] 1805 	mov	dpl,r6
      0001F9 8C 83            [24] 1806 	mov	dph,r4
      0001FB 8F F0            [24] 1807 	mov	b,r7
      0001FD 12r00r00         [24] 1808 	lcall	__gptrget
      000200 FE               [12] 1809 	mov	r6,a
      000201 E9               [12] 1810 	mov	a,r1
      000202 B5 06 02         [24] 1811 	cjne	a,ar6,00159$
      000205 80 08            [24] 1812 	sjmp	00160$
      000207                       1813 00159$:
      000207 D0 04            [24] 1814 	pop	ar4
      000209 D0 03            [24] 1815 	pop	ar3
      00020B D0 02            [24] 1816 	pop	ar2
      00020D 80 44            [24] 1817 	sjmp	00108$
      00020F                       1818 00160$:
      00020F D0 04            [24] 1819 	pop	ar4
      000211 D0 03            [24] 1820 	pop	ar3
      000213 D0 02            [24] 1821 	pop	ar2
                           000215  1822 	C$medtronicRF.c$82$1$31 ==.
                                   1823 ;	medtronicRF.c:82: ((char)((calcCRC16 >> 8) & 0x00FF) == message[(*length) - 2]) ) {
      000215 C0 02            [24] 1824 	push	ar2
      000217 C0 03            [24] 1825 	push	ar3
      000219 C0 04            [24] 1826 	push	ar4
      00021B AF*0C            [24] 1827 	mov	r7,(_receiveMedtronicMessage_calcCRC16_1_31 + 1)
      00021D E8               [12] 1828 	mov	a,r0
      00021E 24 FE            [12] 1829 	add	a,#0xFE
      000220 F9               [12] 1830 	mov	r1,a
      000221 ED               [12] 1831 	mov	a,r5
      000222 34 FF            [12] 1832 	addc	a,#0xFF
      000224 FE               [12] 1833 	mov	r6,a
      000225 E9               [12] 1834 	mov	a,r1
      000226 25*07            [12] 1835 	add	a,_receiveMedtronicMessage_message_1_30
      000228 F9               [12] 1836 	mov	r1,a
      000229 EE               [12] 1837 	mov	a,r6
      00022A 35*08            [12] 1838 	addc	a,(_receiveMedtronicMessage_message_1_30 + 1)
      00022C FC               [12] 1839 	mov	r4,a
      00022D AE*09            [24] 1840 	mov	r6,(_receiveMedtronicMessage_message_1_30 + 2)
      00022F 89 82            [24] 1841 	mov	dpl,r1
      000231 8C 83            [24] 1842 	mov	dph,r4
      000233 8E F0            [24] 1843 	mov	b,r6
      000235 12r00r00         [24] 1844 	lcall	__gptrget
      000238 F9               [12] 1845 	mov	r1,a
      000239 EF               [12] 1846 	mov	a,r7
      00023A B5 01 02         [24] 1847 	cjne	a,ar1,00161$
      00023D 80 08            [24] 1848 	sjmp	00162$
      00023F                       1849 00161$:
      00023F D0 04            [24] 1850 	pop	ar4
      000241 D0 03            [24] 1851 	pop	ar3
      000243 D0 02            [24] 1852 	pop	ar2
      000245 80 0C            [24] 1853 	sjmp	00108$
      000247                       1854 00162$:
      000247 D0 04            [24] 1855 	pop	ar4
      000249 D0 03            [24] 1856 	pop	ar3
      00024B D0 02            [24] 1857 	pop	ar2
                           00024D  1858 	C$medtronicRF.c$83$2$35 ==.
                                   1859 ;	medtronicRF.c:83: return (0);
      00024D 75 82 00         [24] 1860 	mov	dpl,#0x00
      000250 02r03r89         [24] 1861 	ljmp	00119$
      000253                       1862 00108$:
                           000253  1863 	C$medtronicRF.c$86$1$31 ==.
                                   1864 ;	medtronicRF.c:86: calcCRC = crc8( message, (*length) - 2 );
      000253 E8               [12] 1865 	mov	a,r0
      000254 24 FE            [12] 1866 	add	a,#0xFE
      000256 F5*00            [12] 1867 	mov	_crc8_PARM_2,a
      000258 ED               [12] 1868 	mov	a,r5
      000259 34 FF            [12] 1869 	addc	a,#0xFF
      00025B F5*01            [12] 1870 	mov	(_crc8_PARM_2 + 1),a
      00025D 85*07 82         [24] 1871 	mov	dpl,_receiveMedtronicMessage_message_1_30
      000260 85*08 83         [24] 1872 	mov	dph,(_receiveMedtronicMessage_message_1_30 + 1)
      000263 85*09 F0         [24] 1873 	mov	b,(_receiveMedtronicMessage_message_1_30 + 2)
      000266 C0 04            [24] 1874 	push	ar4
      000268 C0 03            [24] 1875 	push	ar3
      00026A C0 02            [24] 1876 	push	ar2
      00026C 12r00r00         [24] 1877 	lcall	_crc8
      00026F 85 82*0A         [24] 1878 	mov	_receiveMedtronicMessage_calcCRC_1_31,dpl
      000272 D0 02            [24] 1879 	pop	ar2
      000274 D0 03            [24] 1880 	pop	ar3
      000276 D0 04            [24] 1881 	pop	ar4
                           000278  1882 	C$medtronicRF.c$88$1$31 ==.
                                   1883 ;	medtronicRF.c:88: if( calcCRC == message[(*length) - 2] ) {
      000278 8A 82            [24] 1884 	mov	dpl,r2
      00027A 8B 83            [24] 1885 	mov	dph,r3
      00027C 8C F0            [24] 1886 	mov	b,r4
      00027E 12r00r00         [24] 1887 	lcall	__gptrget
      000281 FE               [12] 1888 	mov	r6,a
      000282 A3               [24] 1889 	inc	dptr
      000283 12r00r00         [24] 1890 	lcall	__gptrget
      000286 FF               [12] 1891 	mov	r7,a
      000287 EE               [12] 1892 	mov	a,r6
      000288 24 FE            [12] 1893 	add	a,#0xFE
      00028A F9               [12] 1894 	mov	r1,a
      00028B EF               [12] 1895 	mov	a,r7
      00028C 34 FF            [12] 1896 	addc	a,#0xFF
      00028E FD               [12] 1897 	mov	r5,a
      00028F E9               [12] 1898 	mov	a,r1
      000290 25*07            [12] 1899 	add	a,_receiveMedtronicMessage_message_1_30
      000292 F9               [12] 1900 	mov	r1,a
      000293 ED               [12] 1901 	mov	a,r5
      000294 35*08            [12] 1902 	addc	a,(_receiveMedtronicMessage_message_1_30 + 1)
      000296 F8               [12] 1903 	mov	r0,a
      000297 AD*09            [24] 1904 	mov	r5,(_receiveMedtronicMessage_message_1_30 + 2)
      000299 89 82            [24] 1905 	mov	dpl,r1
      00029B 88 83            [24] 1906 	mov	dph,r0
      00029D 8D F0            [24] 1907 	mov	b,r5
      00029F 12r00r00         [24] 1908 	lcall	__gptrget
      0002A2 F9               [12] 1909 	mov	r1,a
      0002A3 B5*0A 1D         [24] 1910 	cjne	a,_receiveMedtronicMessage_calcCRC_1_31,00111$
                           0002A6  1911 	C$medtronicRF.c$89$2$36 ==.
                                   1912 ;	medtronicRF.c:89: (*length) = (*length) - 1;
      0002A6 EE               [12] 1913 	mov	a,r6
      0002A7 24 FF            [12] 1914 	add	a,#0xFF
      0002A9 F9               [12] 1915 	mov	r1,a
      0002AA EF               [12] 1916 	mov	a,r7
      0002AB 34 FF            [12] 1917 	addc	a,#0xFF
      0002AD FD               [12] 1918 	mov	r5,a
      0002AE 8A 82            [24] 1919 	mov	dpl,r2
      0002B0 8B 83            [24] 1920 	mov	dph,r3
      0002B2 8C F0            [24] 1921 	mov	b,r4
      0002B4 E9               [12] 1922 	mov	a,r1
      0002B5 12r00r00         [24] 1923 	lcall	__gptrput
      0002B8 A3               [24] 1924 	inc	dptr
      0002B9 ED               [12] 1925 	mov	a,r5
      0002BA 12r00r00         [24] 1926 	lcall	__gptrput
                           0002BD  1927 	C$medtronicRF.c$90$2$36 ==.
                                   1928 ;	medtronicRF.c:90: return (0);
      0002BD 75 82 00         [24] 1929 	mov	dpl,#0x00
      0002C0 02r03r89         [24] 1930 	ljmp	00119$
      0002C3                       1931 00111$:
                           0002C3  1932 	C$medtronicRF.c$93$1$31 ==.
                                   1933 ;	medtronicRF.c:93: calcCRC16 = crc16( message, (*length) - 3 );
      0002C3 EE               [12] 1934 	mov	a,r6
      0002C4 24 FD            [12] 1935 	add	a,#0xFD
      0002C6 F5*00            [12] 1936 	mov	_crc16_PARM_2,a
      0002C8 EF               [12] 1937 	mov	a,r7
      0002C9 34 FF            [12] 1938 	addc	a,#0xFF
      0002CB F5*01            [12] 1939 	mov	(_crc16_PARM_2 + 1),a
      0002CD 85*07 82         [24] 1940 	mov	dpl,_receiveMedtronicMessage_message_1_30
      0002D0 85*08 83         [24] 1941 	mov	dph,(_receiveMedtronicMessage_message_1_30 + 1)
      0002D3 85*09 F0         [24] 1942 	mov	b,(_receiveMedtronicMessage_message_1_30 + 2)
      0002D6 C0 04            [24] 1943 	push	ar4
      0002D8 C0 03            [24] 1944 	push	ar3
      0002DA C0 02            [24] 1945 	push	ar2
      0002DC 12r00r00         [24] 1946 	lcall	_crc16
      0002DF 85 82*0B         [24] 1947 	mov	_receiveMedtronicMessage_calcCRC16_1_31,dpl
      0002E2 85 83*0C         [24] 1948 	mov	(_receiveMedtronicMessage_calcCRC16_1_31 + 1),dph
      0002E5 D0 02            [24] 1949 	pop	ar2
      0002E7 D0 03            [24] 1950 	pop	ar3
      0002E9 D0 04            [24] 1951 	pop	ar4
                           0002EB  1952 	C$medtronicRF.c$94$1$31 ==.
                                   1953 ;	medtronicRF.c:94: if( ((char)(calcCRC16 & 0x00FF) == message[(*length) - 2]) &&
      0002EB AE*0B            [24] 1954 	mov	r6,_receiveMedtronicMessage_calcCRC16_1_31
      0002ED 8A 82            [24] 1955 	mov	dpl,r2
      0002EF 8B 83            [24] 1956 	mov	dph,r3
      0002F1 8C F0            [24] 1957 	mov	b,r4
      0002F3 12r00r00         [24] 1958 	lcall	__gptrget
      0002F6 FD               [12] 1959 	mov	r5,a
      0002F7 A3               [24] 1960 	inc	dptr
      0002F8 12r00r00         [24] 1961 	lcall	__gptrget
      0002FB FF               [12] 1962 	mov	r7,a
      0002FC ED               [12] 1963 	mov	a,r5
      0002FD 24 FE            [12] 1964 	add	a,#0xFE
      0002FF F8               [12] 1965 	mov	r0,a
      000300 EF               [12] 1966 	mov	a,r7
      000301 34 FF            [12] 1967 	addc	a,#0xFF
      000303 F9               [12] 1968 	mov	r1,a
      000304 C0 02            [24] 1969 	push	ar2
      000306 C0 03            [24] 1970 	push	ar3
      000308 C0 04            [24] 1971 	push	ar4
      00030A E8               [12] 1972 	mov	a,r0
      00030B 25*07            [12] 1973 	add	a,_receiveMedtronicMessage_message_1_30
      00030D F8               [12] 1974 	mov	r0,a
      00030E E9               [12] 1975 	mov	a,r1
      00030F 35*08            [12] 1976 	addc	a,(_receiveMedtronicMessage_message_1_30 + 1)
      000311 F9               [12] 1977 	mov	r1,a
      000312 AC*09            [24] 1978 	mov	r4,(_receiveMedtronicMessage_message_1_30 + 2)
      000314 88 82            [24] 1979 	mov	dpl,r0
      000316 89 83            [24] 1980 	mov	dph,r1
      000318 8C F0            [24] 1981 	mov	b,r4
      00031A 12r00r00         [24] 1982 	lcall	__gptrget
      00031D F8               [12] 1983 	mov	r0,a
      00031E EE               [12] 1984 	mov	a,r6
      00031F B5 00 02         [24] 1985 	cjne	a,ar0,00165$
      000322 80 08            [24] 1986 	sjmp	00166$
      000324                       1987 00165$:
      000324 D0 04            [24] 1988 	pop	ar4
      000326 D0 03            [24] 1989 	pop	ar3
      000328 D0 02            [24] 1990 	pop	ar2
      00032A 80 57            [24] 1991 	sjmp	00113$
      00032C                       1992 00166$:
      00032C D0 04            [24] 1993 	pop	ar4
      00032E D0 03            [24] 1994 	pop	ar3
      000330 D0 02            [24] 1995 	pop	ar2
                           000332  1996 	C$medtronicRF.c$95$1$31 ==.
                                   1997 ;	medtronicRF.c:95: ((char)((calcCRC16 >> 8) & 0x00FF) == message[(*length) - 3]) ) {
      000332 C0 02            [24] 1998 	push	ar2
      000334 C0 03            [24] 1999 	push	ar3
      000336 C0 04            [24] 2000 	push	ar4
      000338 AE*0C            [24] 2001 	mov	r6,(_receiveMedtronicMessage_calcCRC16_1_31 + 1)
      00033A ED               [12] 2002 	mov	a,r5
      00033B 24 FD            [12] 2003 	add	a,#0xFD
      00033D F8               [12] 2004 	mov	r0,a
      00033E EF               [12] 2005 	mov	a,r7
      00033F 34 FF            [12] 2006 	addc	a,#0xFF
      000341 F9               [12] 2007 	mov	r1,a
      000342 E8               [12] 2008 	mov	a,r0
      000343 25*07            [12] 2009 	add	a,_receiveMedtronicMessage_message_1_30
      000345 F8               [12] 2010 	mov	r0,a
      000346 E9               [12] 2011 	mov	a,r1
      000347 35*08            [12] 2012 	addc	a,(_receiveMedtronicMessage_message_1_30 + 1)
      000349 F9               [12] 2013 	mov	r1,a
      00034A AC*09            [24] 2014 	mov	r4,(_receiveMedtronicMessage_message_1_30 + 2)
      00034C 88 82            [24] 2015 	mov	dpl,r0
      00034E 89 83            [24] 2016 	mov	dph,r1
      000350 8C F0            [24] 2017 	mov	b,r4
      000352 12r00r00         [24] 2018 	lcall	__gptrget
      000355 F8               [12] 2019 	mov	r0,a
      000356 EE               [12] 2020 	mov	a,r6
      000357 B5 00 02         [24] 2021 	cjne	a,ar0,00167$
      00035A 80 08            [24] 2022 	sjmp	00168$
      00035C                       2023 00167$:
      00035C D0 04            [24] 2024 	pop	ar4
      00035E D0 03            [24] 2025 	pop	ar3
      000360 D0 02            [24] 2026 	pop	ar2
      000362 80 1F            [24] 2027 	sjmp	00113$
      000364                       2028 00168$:
      000364 D0 04            [24] 2029 	pop	ar4
      000366 D0 03            [24] 2030 	pop	ar3
      000368 D0 02            [24] 2031 	pop	ar2
                           00036A  2032 	C$medtronicRF.c$96$2$37 ==.
                                   2033 ;	medtronicRF.c:96: (*length) = (*length) - 1;
      00036A 1D               [12] 2034 	dec	r5
      00036B BD FF 01         [24] 2035 	cjne	r5,#0xFF,00169$
      00036E 1F               [12] 2036 	dec	r7
      00036F                       2037 00169$:
      00036F 8A 82            [24] 2038 	mov	dpl,r2
      000371 8B 83            [24] 2039 	mov	dph,r3
      000373 8C F0            [24] 2040 	mov	b,r4
      000375 ED               [12] 2041 	mov	a,r5
      000376 12r00r00         [24] 2042 	lcall	__gptrput
      000379 A3               [24] 2043 	inc	dptr
      00037A EF               [12] 2044 	mov	a,r7
      00037B 12r00r00         [24] 2045 	lcall	__gptrput
                           00037E  2046 	C$medtronicRF.c$97$2$37 ==.
                                   2047 ;	medtronicRF.c:97: return (0);
      00037E 75 82 00         [24] 2048 	mov	dpl,#0x00
      000381 80 06            [24] 2049 	sjmp	00119$
      000383                       2050 00113$:
                           000383  2051 	C$medtronicRF.c$100$1$31 ==.
                                   2052 ;	medtronicRF.c:100: crc16Init( );
      000383 12r00r00         [24] 2053 	lcall	_crc16Init
                           000386  2054 	C$medtronicRF.c$101$1$31 ==.
                                   2055 ;	medtronicRF.c:101: return(1);
      000386 75 82 01         [24] 2056 	mov	dpl,#0x01
      000389                       2057 00119$:
                           000389  2058 	C$medtronicRF.c$102$1$31 ==.
                           000389  2059 	XG$receiveMedtronicMessage$0$0 ==.
      000389 22               [24] 2060 	ret
                                   2061 ;------------------------------------------------------------
                                   2062 ;Allocation info for local variables in function 'usbReceiveData'
                                   2063 ;------------------------------------------------------------
                                   2064 ;tempData                  Allocated with name '_usbReceiveData_tempData_1_39'
                                   2065 ;tmpCRC16                  Allocated to registers r6 r7 
                                   2066 ;nBytes                    Allocated with name '_usbReceiveData_nBytes_1_39'
                                   2067 ;readBytes                 Allocated to registers r2 r3 
                                   2068 ;i                         Allocated with name '_usbReceiveData_i_1_39'
                                   2069 ;------------------------------------------------------------
                           00038A  2070 	G$usbReceiveData$0$0 ==.
                           00038A  2071 	C$medtronicRF.c$104$1$31 ==.
                                   2072 ;	medtronicRF.c:104: void usbReceiveData( void ) {
                                   2073 ;	-----------------------------------------
                                   2074 ;	 function usbReceiveData
                                   2075 ;	-----------------------------------------
      00038A                       2076 _usbReceiveData:
                           00038A  2077 	C$medtronicRF.c$111$1$39 ==.
                                   2078 ;	medtronicRF.c:111: nBytes = halUartGetNumRxBytes( );
      00038A 12r00r00         [24] 2079 	lcall	_halUartGetNumRxBytes
      00038D 85 82*8F         [24] 2080 	mov	_usbReceiveData_nBytes_1_39,dpl
      000390 85 83*90         [24] 2081 	mov	(_usbReceiveData_nBytes_1_39 + 1),dph
                           000393  2082 	C$medtronicRF.c$112$2$40 ==.
                                   2083 ;	medtronicRF.c:112: for( i = 0; i < nBytes; i = i + 48 ) {
      000393 E4               [12] 2084 	clr	a
      000394 F5*91            [12] 2085 	mov	_usbReceiveData_i_1_39,a
      000396 F5*92            [12] 2086 	mov	(_usbReceiveData_i_1_39 + 1),a
      000398                       2087 00143$:
      000398 C3               [12] 2088 	clr	c
      000399 E5*91            [12] 2089 	mov	a,_usbReceiveData_i_1_39
      00039B 95*8F            [12] 2090 	subb	a,_usbReceiveData_nBytes_1_39
      00039D E5*92            [12] 2091 	mov	a,(_usbReceiveData_i_1_39 + 1)
      00039F 95*90            [12] 2092 	subb	a,(_usbReceiveData_nBytes_1_39 + 1)
      0003A1 50 4A            [24] 2093 	jnc	00104$
                           0003A3  2094 	C$medtronicRF.c$113$2$40 ==.
                                   2095 ;	medtronicRF.c:113: if( nBytes - i > 48 ) readBytes = 48;
      0003A3 E5*8F            [12] 2096 	mov	a,_usbReceiveData_nBytes_1_39
      0003A5 C3               [12] 2097 	clr	c
      0003A6 95*91            [12] 2098 	subb	a,_usbReceiveData_i_1_39
      0003A8 FA               [12] 2099 	mov	r2,a
      0003A9 E5*90            [12] 2100 	mov	a,(_usbReceiveData_nBytes_1_39 + 1)
      0003AB 95*92            [12] 2101 	subb	a,(_usbReceiveData_i_1_39 + 1)
      0003AD FB               [12] 2102 	mov	r3,a
      0003AE C3               [12] 2103 	clr	c
      0003AF 74 30            [12] 2104 	mov	a,#0x30
      0003B1 9A               [12] 2105 	subb	a,r2
      0003B2 E4               [12] 2106 	clr	a
      0003B3 9B               [12] 2107 	subb	a,r3
      0003B4 50 06            [24] 2108 	jnc	00102$
      0003B6 7A 30            [12] 2109 	mov	r2,#0x30
      0003B8 7B 00            [12] 2110 	mov	r3,#0x00
      0003BA 80 0B            [24] 2111 	sjmp	00103$
      0003BC                       2112 00102$:
                           0003BC  2113 	C$medtronicRF.c$114$2$40 ==.
                                   2114 ;	medtronicRF.c:114: else readBytes = nBytes - i;
      0003BC E5*8F            [12] 2115 	mov	a,_usbReceiveData_nBytes_1_39
      0003BE C3               [12] 2116 	clr	c
      0003BF 95*91            [12] 2117 	subb	a,_usbReceiveData_i_1_39
      0003C1 FA               [12] 2118 	mov	r2,a
      0003C2 E5*90            [12] 2119 	mov	a,(_usbReceiveData_nBytes_1_39 + 1)
      0003C4 95*92            [12] 2120 	subb	a,(_usbReceiveData_i_1_39 + 1)
      0003C6 FB               [12] 2121 	mov	r3,a
      0003C7                       2122 00103$:
                           0003C7  2123 	C$medtronicRF.c$115$2$40 ==.
                                   2124 ;	medtronicRF.c:115: halUartRead( (uint8_t *)&tempData[i], readBytes );
      0003C7 E5*91            [12] 2125 	mov	a,_usbReceiveData_i_1_39
      0003C9 24r0F            [12] 2126 	add	a,#_usbReceiveData_tempData_1_39
      0003CB FD               [12] 2127 	mov	r5,a
      0003CC 7E 00            [12] 2128 	mov	r6,#0x00
      0003CE 7F 40            [12] 2129 	mov	r7,#0x40
      0003D0 8A*00            [24] 2130 	mov	_halUartRead_PARM_2,r2
      0003D2 8B*01            [24] 2131 	mov	(_halUartRead_PARM_2 + 1),r3
      0003D4 8D 82            [24] 2132 	mov	dpl,r5
      0003D6 8E 83            [24] 2133 	mov	dph,r6
      0003D8 8F F0            [24] 2134 	mov	b,r7
      0003DA 12r00r00         [24] 2135 	lcall	_halUartRead
                           0003DD  2136 	C$medtronicRF.c$116$2$40 ==.
                                   2137 ;	medtronicRF.c:116: usbUartProcess( );
      0003DD 12r00r00         [24] 2138 	lcall	_usbUartProcess
                           0003E0  2139 	C$medtronicRF.c$112$1$39 ==.
                                   2140 ;	medtronicRF.c:112: for( i = 0; i < nBytes; i = i + 48 ) {
      0003E0 74 30            [12] 2141 	mov	a,#0x30
      0003E2 25*91            [12] 2142 	add	a,_usbReceiveData_i_1_39
      0003E4 F5*91            [12] 2143 	mov	_usbReceiveData_i_1_39,a
      0003E6 E4               [12] 2144 	clr	a
      0003E7 35*92            [12] 2145 	addc	a,(_usbReceiveData_i_1_39 + 1)
      0003E9 F5*92            [12] 2146 	mov	(_usbReceiveData_i_1_39 + 1),a
      0003EB 80 AB            [24] 2147 	sjmp	00143$
      0003ED                       2148 00104$:
                           0003ED  2149 	C$medtronicRF.c$119$1$39 ==.
                                   2150 ;	medtronicRF.c:119: for( i = 0; i < nBytes; i++ ) {
      0003ED E4               [12] 2151 	clr	a
      0003EE F5*91            [12] 2152 	mov	_usbReceiveData_i_1_39,a
      0003F0 F5*92            [12] 2153 	mov	(_usbReceiveData_i_1_39 + 1),a
      0003F2                       2154 00146$:
      0003F2 C3               [12] 2155 	clr	c
      0003F3 E5*91            [12] 2156 	mov	a,_usbReceiveData_i_1_39
      0003F5 95*8F            [12] 2157 	subb	a,_usbReceiveData_nBytes_1_39
      0003F7 E5*92            [12] 2158 	mov	a,(_usbReceiveData_i_1_39 + 1)
      0003F9 95*90            [12] 2159 	subb	a,(_usbReceiveData_nBytes_1_39 + 1)
      0003FB 40 03            [24] 2160 	jc	00208$
      0003FD 02r06rAB         [24] 2161 	ljmp	00148$
      000400                       2162 00208$:
                           000400  2163 	C$medtronicRF.c$121$2$41 ==.
                                   2164 ;	medtronicRF.c:121: uartRxBuffer[uartRxIndex] = tempData[i];
      000400 90r00r00         [24] 2165 	mov	dptr,#_uartRxIndex
      000403 E0               [24] 2166 	movx	a,@dptr
      000404 FC               [12] 2167 	mov	r4,a
      000405 A3               [24] 2168 	inc	dptr
      000406 E0               [24] 2169 	movx	a,@dptr
      000407 FD               [12] 2170 	mov	r5,a
      000408 EC               [12] 2171 	mov	a,r4
      000409 24r00            [12] 2172 	add	a,#_uartRxBuffer
      00040B F5 82            [12] 2173 	mov	dpl,a
      00040D ED               [12] 2174 	mov	a,r5
      00040E 34s00            [12] 2175 	addc	a,#(_uartRxBuffer >> 8)
      000410 F5 83            [12] 2176 	mov	dph,a
      000412 E5*91            [12] 2177 	mov	a,_usbReceiveData_i_1_39
      000414 24r0F            [12] 2178 	add	a,#_usbReceiveData_tempData_1_39
      000416 F9               [12] 2179 	mov	r1,a
      000417 E7               [12] 2180 	mov	a,@r1
      000418 F0               [24] 2181 	movx	@dptr,a
                           000419  2182 	C$medtronicRF.c$123$2$41 ==.
                                   2183 ;	medtronicRF.c:123: if( uartRxIndex == 0 ) {
      000419 90r00r00         [24] 2184 	mov	dptr,#_uartRxIndex
      00041C E0               [24] 2185 	movx	a,@dptr
      00041D FC               [12] 2186 	mov	r4,a
      00041E A3               [24] 2187 	inc	dptr
      00041F E0               [24] 2188 	movx	a,@dptr
      000420 FD               [12] 2189 	mov	r5,a
      000421 4C               [12] 2190 	orl	a,r4
      000422 60 03            [24] 2191 	jz	00209$
      000424 02r04rD9         [24] 2192 	ljmp	00139$
      000427                       2193 00209$:
                           000427  2194 	C$medtronicRF.c$124$3$42 ==.
                                   2195 ;	medtronicRF.c:124: if( uartRxBuffer[0] == (char)0x01 ) {
      000427 90r00r00         [24] 2196 	mov	dptr,#_uartRxBuffer
      00042A E0               [24] 2197 	movx	a,@dptr
      00042B FB               [12] 2198 	mov	r3,a
      00042C BB 01 1E         [24] 2199 	cjne	r3,#0x01,00118$
                           00042F  2200 	C$medtronicRF.c$125$4$43 ==.
                                   2201 ;	medtronicRF.c:125: uartRxIndex++;
      00042F 90r00r00         [24] 2202 	mov	dptr,#_uartRxIndex
      000432 74 01            [12] 2203 	mov	a,#0x01
      000434 2C               [12] 2204 	add	a,r4
      000435 F0               [24] 2205 	movx	@dptr,a
      000436 E4               [12] 2206 	clr	a
      000437 3D               [12] 2207 	addc	a,r5
      000438 A3               [24] 2208 	inc	dptr
      000439 F0               [24] 2209 	movx	@dptr,a
                           00043A  2210 	C$medtronicRF.c$126$4$43 ==.
                                   2211 ;	medtronicRF.c:126: txCalcCRC = 0;
      00043A 90r00r00         [24] 2212 	mov	dptr,#_txCalcCRC
      00043D E4               [12] 2213 	clr	a
      00043E F0               [24] 2214 	movx	@dptr,a
      00043F A3               [24] 2215 	inc	dptr
      000440 F0               [24] 2216 	movx	@dptr,a
                           000441  2217 	C$medtronicRF.c$127$4$43 ==.
                                   2218 ;	medtronicRF.c:127: txCalcCRC16 = 0;
      000441 90r00r00         [24] 2219 	mov	dptr,#_txCalcCRC16
      000444 F0               [24] 2220 	movx	@dptr,a
      000445 A3               [24] 2221 	inc	dptr
      000446 F0               [24] 2222 	movx	@dptr,a
                           000447  2223 	C$medtronicRF.c$128$4$43 ==.
                                   2224 ;	medtronicRF.c:128: enableTimerInt( );
      000447 12r00r00         [24] 2225 	lcall	_enableTimerInt
      00044A 02r06rA0         [24] 2226 	ljmp	00147$
      00044D                       2227 00118$:
                           00044D  2228 	C$medtronicRF.c$129$3$42 ==.
                                   2229 ;	medtronicRF.c:129: } else if( uartRxBuffer[0] == (char)0x81 ) {
      00044D BB 81 20         [24] 2230 	cjne	r3,#0x81,00115$
                           000450  2231 	C$medtronicRF.c$130$4$44 ==.
                                   2232 ;	medtronicRF.c:130: uartRxIndex++;
      000450 90r00r00         [24] 2233 	mov	dptr,#_uartRxIndex
      000453 74 01            [12] 2234 	mov	a,#0x01
      000455 2C               [12] 2235 	add	a,r4
      000456 F0               [24] 2236 	movx	@dptr,a
      000457 E4               [12] 2237 	clr	a
      000458 3D               [12] 2238 	addc	a,r5
      000459 A3               [24] 2239 	inc	dptr
      00045A F0               [24] 2240 	movx	@dptr,a
                           00045B  2241 	C$medtronicRF.c$131$4$44 ==.
                                   2242 ;	medtronicRF.c:131: txCalcCRC = 1;
      00045B 90r00r00         [24] 2243 	mov	dptr,#_txCalcCRC
      00045E 74 01            [12] 2244 	mov	a,#0x01
      000460 F0               [24] 2245 	movx	@dptr,a
      000461 E4               [12] 2246 	clr	a
      000462 A3               [24] 2247 	inc	dptr
      000463 F0               [24] 2248 	movx	@dptr,a
                           000464  2249 	C$medtronicRF.c$132$4$44 ==.
                                   2250 ;	medtronicRF.c:132: txCalcCRC16 = 0;
      000464 90r00r00         [24] 2251 	mov	dptr,#_txCalcCRC16
      000467 F0               [24] 2252 	movx	@dptr,a
      000468 A3               [24] 2253 	inc	dptr
      000469 F0               [24] 2254 	movx	@dptr,a
                           00046A  2255 	C$medtronicRF.c$133$4$44 ==.
                                   2256 ;	medtronicRF.c:133: enableTimerInt( );
      00046A 12r00r00         [24] 2257 	lcall	_enableTimerInt
      00046D 02r06rA0         [24] 2258 	ljmp	00147$
      000470                       2259 00115$:
                           000470  2260 	C$medtronicRF.c$134$3$42 ==.
                                   2261 ;	medtronicRF.c:134: } else if( uartRxBuffer[0] == (char)0xC1 ) {
      000470 BB C1 20         [24] 2262 	cjne	r3,#0xC1,00112$
                           000473  2263 	C$medtronicRF.c$135$4$45 ==.
                                   2264 ;	medtronicRF.c:135: uartRxIndex++;
      000473 90r00r00         [24] 2265 	mov	dptr,#_uartRxIndex
      000476 74 01            [12] 2266 	mov	a,#0x01
      000478 2C               [12] 2267 	add	a,r4
      000479 F0               [24] 2268 	movx	@dptr,a
      00047A E4               [12] 2269 	clr	a
      00047B 3D               [12] 2270 	addc	a,r5
      00047C A3               [24] 2271 	inc	dptr
      00047D F0               [24] 2272 	movx	@dptr,a
                           00047E  2273 	C$medtronicRF.c$136$4$45 ==.
                                   2274 ;	medtronicRF.c:136: txCalcCRC = 0;
      00047E 90r00r00         [24] 2275 	mov	dptr,#_txCalcCRC
      000481 E4               [12] 2276 	clr	a
      000482 F0               [24] 2277 	movx	@dptr,a
      000483 A3               [24] 2278 	inc	dptr
      000484 F0               [24] 2279 	movx	@dptr,a
                           000485  2280 	C$medtronicRF.c$137$4$45 ==.
                                   2281 ;	medtronicRF.c:137: txCalcCRC16 = 1;
      000485 90r00r00         [24] 2282 	mov	dptr,#_txCalcCRC16
      000488 04               [12] 2283 	inc	a
      000489 F0               [24] 2284 	movx	@dptr,a
      00048A E4               [12] 2285 	clr	a
      00048B A3               [24] 2286 	inc	dptr
      00048C F0               [24] 2287 	movx	@dptr,a
                           00048D  2288 	C$medtronicRF.c$138$4$45 ==.
                                   2289 ;	medtronicRF.c:138: enableTimerInt( );
      00048D 12r00r00         [24] 2290 	lcall	_enableTimerInt
      000490 02r06rA0         [24] 2291 	ljmp	00147$
      000493                       2292 00112$:
                           000493  2293 	C$medtronicRF.c$139$3$42 ==.
                                   2294 ;	medtronicRF.c:139: } else if( (uartRxBuffer[0] == (char)0x03) ||
      000493 BB 03 02         [24] 2295 	cjne	r3,#0x03,00216$
      000496 80 03            [24] 2296 	sjmp	00107$
      000498                       2297 00216$:
                           000498  2298 	C$medtronicRF.c$140$3$42 ==.
                                   2299 ;	medtronicRF.c:140: (uartRxBuffer[0] == (char)0x13) ) {
      000498 BB 13 20         [24] 2300 	cjne	r3,#0x13,00108$
      00049B                       2301 00107$:
                           00049B  2302 	C$medtronicRF.c$141$4$46 ==.
                                   2303 ;	medtronicRF.c:141: txFilterEnabled = 1;
      00049B 90r00r00         [24] 2304 	mov	dptr,#_txFilterEnabled
      00049E 74 01            [12] 2305 	mov	a,#0x01
      0004A0 F0               [24] 2306 	movx	@dptr,a
                           0004A1  2307 	C$medtronicRF.c$142$4$46 ==.
                                   2308 ;	medtronicRF.c:142: P1_1 = 0;
      0004A1 C2 91            [12] 2309 	clr	_P1_1
                           0004A3  2310 	C$medtronicRF.c$143$4$46 ==.
                                   2311 ;	medtronicRF.c:143: uartRxBuffer[0] = (char)0x03;
      0004A3 90r00r00         [24] 2312 	mov	dptr,#_uartRxBuffer
      0004A6 74 03            [12] 2313 	mov	a,#0x03
      0004A8 F0               [24] 2314 	movx	@dptr,a
                           0004A9  2315 	C$medtronicRF.c$144$4$46 ==.
                                   2316 ;	medtronicRF.c:144: halUartWrite( (uint8_t const *)uartRxBuffer, 1 );
      0004A9 75*00 01         [24] 2317 	mov	_halUartWrite_PARM_2,#0x01
      0004AC 75*01 00         [24] 2318 	mov	(_halUartWrite_PARM_2 + 1),#0x00
      0004AF 90r00r00         [24] 2319 	mov	dptr,#_uartRxBuffer
      0004B2 75 F0 00         [24] 2320 	mov	b,#0x00
      0004B5 12r00r00         [24] 2321 	lcall	_halUartWrite
      0004B8 02r06rA0         [24] 2322 	ljmp	00147$
      0004BB                       2323 00108$:
                           0004BB  2324 	C$medtronicRF.c$145$3$42 ==.
                                   2325 ;	medtronicRF.c:145: } else if( uartRxBuffer[0] == (char)0x00 ) {
      0004BB EB               [12] 2326 	mov	a,r3
      0004BC 60 03            [24] 2327 	jz	00219$
      0004BE 02r06rA0         [24] 2328 	ljmp	00147$
      0004C1                       2329 00219$:
                           0004C1  2330 	C$medtronicRF.c$146$4$47 ==.
                                   2331 ;	medtronicRF.c:146: uartRxBuffer[0] = _MMCOMMANDER_VERSION_;
      0004C1 90r00r00         [24] 2332 	mov	dptr,#_uartRxBuffer
      0004C4 74 57            [12] 2333 	mov	a,#0x57
      0004C6 F0               [24] 2334 	movx	@dptr,a
                           0004C7  2335 	C$medtronicRF.c$147$4$47 ==.
                                   2336 ;	medtronicRF.c:147: halUartWrite( (uint8_t const *)uartRxBuffer, 1 );
      0004C7 75*00 01         [24] 2337 	mov	_halUartWrite_PARM_2,#0x01
      0004CA 75*01 00         [24] 2338 	mov	(_halUartWrite_PARM_2 + 1),#0x00
      0004CD 90r00r00         [24] 2339 	mov	dptr,#_uartRxBuffer
      0004D0 75 F0 00         [24] 2340 	mov	b,#0x00
      0004D3 12r00r00         [24] 2341 	lcall	_halUartWrite
      0004D6 02r06rA0         [24] 2342 	ljmp	00147$
      0004D9                       2343 00139$:
                           0004D9  2344 	C$medtronicRF.c$149$2$41 ==.
                                   2345 ;	medtronicRF.c:149: } else if( uartRxIndex == 1 ) {
      0004D9 BC 01 1C         [24] 2346 	cjne	r4,#0x01,00136$
      0004DC BD 00 19         [24] 2347 	cjne	r5,#0x00,00136$
                           0004DF  2348 	C$medtronicRF.c$150$3$48 ==.
                                   2349 ;	medtronicRF.c:150: txLength = uartRxBuffer[1];
      0004DF 90r00r01         [24] 2350 	mov	dptr,#(_uartRxBuffer + 0x0001)
      0004E2 E0               [24] 2351 	movx	a,@dptr
      0004E3 90r00r00         [24] 2352 	mov	dptr,#_txLength
      0004E6 F0               [24] 2353 	movx	@dptr,a
                           0004E7  2354 	C$medtronicRF.c$151$3$48 ==.
                                   2355 ;	medtronicRF.c:151: uartRxIndex++;
      0004E7 90r00r00         [24] 2356 	mov	dptr,#_uartRxIndex
      0004EA 74 01            [12] 2357 	mov	a,#0x01
      0004EC 2C               [12] 2358 	add	a,r4
      0004ED F0               [24] 2359 	movx	@dptr,a
      0004EE E4               [12] 2360 	clr	a
      0004EF 3D               [12] 2361 	addc	a,r5
      0004F0 A3               [24] 2362 	inc	dptr
      0004F1 F0               [24] 2363 	movx	@dptr,a
                           0004F2  2364 	C$medtronicRF.c$152$3$48 ==.
                                   2365 ;	medtronicRF.c:152: resetTimerCounter( );
      0004F2 12r00r00         [24] 2366 	lcall	_resetTimerCounter
      0004F5 02r06rA0         [24] 2367 	ljmp	00147$
      0004F8                       2368 00136$:
                           0004F8  2369 	C$medtronicRF.c$153$2$41 ==.
                                   2370 ;	medtronicRF.c:153: } else if( uartRxIndex == 2 ) {
      0004F8 BC 02 23         [24] 2371 	cjne	r4,#0x02,00133$
      0004FB BD 00 20         [24] 2372 	cjne	r5,#0x00,00133$
                           0004FE  2373 	C$medtronicRF.c$154$3$49 ==.
                                   2374 ;	medtronicRF.c:154: txTimes = uartRxBuffer[2];
      0004FE 90r00r02         [24] 2375 	mov	dptr,#(_uartRxBuffer + 0x0002)
      000501 E0               [24] 2376 	movx	a,@dptr
      000502 FB               [12] 2377 	mov	r3,a
      000503 90r00r00         [24] 2378 	mov	dptr,#_txTimes
      000506 F0               [24] 2379 	movx	@dptr,a
      000507 EB               [12] 2380 	mov	a,r3
      000508 33               [12] 2381 	rlc	a
      000509 95 E0            [12] 2382 	subb	a,acc
      00050B A3               [24] 2383 	inc	dptr
      00050C F0               [24] 2384 	movx	@dptr,a
                           00050D  2385 	C$medtronicRF.c$155$3$49 ==.
                                   2386 ;	medtronicRF.c:155: uartRxIndex++;
      00050D 90r00r00         [24] 2387 	mov	dptr,#_uartRxIndex
      000510 74 01            [12] 2388 	mov	a,#0x01
      000512 2C               [12] 2389 	add	a,r4
      000513 F0               [24] 2390 	movx	@dptr,a
      000514 E4               [12] 2391 	clr	a
      000515 3D               [12] 2392 	addc	a,r5
      000516 A3               [24] 2393 	inc	dptr
      000517 F0               [24] 2394 	movx	@dptr,a
                           000518  2395 	C$medtronicRF.c$156$3$49 ==.
                                   2396 ;	medtronicRF.c:156: resetTimerCounter( );
      000518 12r00r00         [24] 2397 	lcall	_resetTimerCounter
      00051B 02r06rA0         [24] 2398 	ljmp	00147$
      00051E                       2399 00133$:
                           00051E  2400 	C$medtronicRF.c$157$2$41 ==.
                                   2401 ;	medtronicRF.c:157: } else if( uartRxIndex > 2 ) {
      00051E C3               [12] 2402 	clr	c
      00051F 74 02            [12] 2403 	mov	a,#0x02
      000521 9C               [12] 2404 	subb	a,r4
      000522 74 80            [12] 2405 	mov	a,#(0x00 ^ 0x80)
      000524 8D F0            [24] 2406 	mov	b,r5
      000526 63 F0 80         [24] 2407 	xrl	b,#0x80
      000529 95 F0            [12] 2408 	subb	a,b
      00052B 40 03            [24] 2409 	jc	00224$
      00052D 02r06rA0         [24] 2410 	ljmp	00147$
      000530                       2411 00224$:
                           000530  2412 	C$medtronicRF.c$158$3$50 ==.
                                   2413 ;	medtronicRF.c:158: resetTimerCounter( );
      000530 12r00r00         [24] 2414 	lcall	_resetTimerCounter
                           000533  2415 	C$medtronicRF.c$159$3$50 ==.
                                   2416 ;	medtronicRF.c:159: if( uartRxIndex == (txLength + 2) ) {
      000533 90r00r00         [24] 2417 	mov	dptr,#_txLength
      000536 E0               [24] 2418 	movx	a,@dptr
      000537 FD               [12] 2419 	mov	r5,a
      000538 33               [12] 2420 	rlc	a
      000539 95 E0            [12] 2421 	subb	a,acc
      00053B FC               [12] 2422 	mov	r4,a
      00053C 74 02            [12] 2423 	mov	a,#0x02
      00053E 2D               [12] 2424 	add	a,r5
      00053F FD               [12] 2425 	mov	r5,a
      000540 E4               [12] 2426 	clr	a
      000541 3C               [12] 2427 	addc	a,r4
      000542 FC               [12] 2428 	mov	r4,a
      000543 90r00r00         [24] 2429 	mov	dptr,#_uartRxIndex
      000546 E0               [24] 2430 	movx	a,@dptr
      000547 FA               [12] 2431 	mov	r2,a
      000548 A3               [24] 2432 	inc	dptr
      000549 E0               [24] 2433 	movx	a,@dptr
      00054A FB               [12] 2434 	mov	r3,a
      00054B EA               [12] 2435 	mov	a,r2
      00054C B5 05 06         [24] 2436 	cjne	a,ar5,00225$
      00054F EB               [12] 2437 	mov	a,r3
      000550 B5 04 02         [24] 2438 	cjne	a,ar4,00225$
      000553 80 03            [24] 2439 	sjmp	00226$
      000555                       2440 00225$:
      000555 02r06r95         [24] 2441 	ljmp	00128$
      000558                       2442 00226$:
                           000558  2443 	C$medtronicRF.c$160$4$51 ==.
                                   2444 ;	medtronicRF.c:160: stopTimerInt( );
      000558 12r00r00         [24] 2445 	lcall	_stopTimerInt
                           00055B  2446 	C$medtronicRF.c$161$4$51 ==.
                                   2447 ;	medtronicRF.c:161: if( txCalcCRC == 1 ) {
      00055B 90r00r00         [24] 2448 	mov	dptr,#_txCalcCRC
      00055E E0               [24] 2449 	movx	a,@dptr
      00055F FC               [12] 2450 	mov	r4,a
      000560 A3               [24] 2451 	inc	dptr
      000561 E0               [24] 2452 	movx	a,@dptr
      000562 FD               [12] 2453 	mov	r5,a
      000563 BC 01 4B         [24] 2454 	cjne	r4,#0x01,00121$
      000566 BD 00 48         [24] 2455 	cjne	r5,#0x00,00121$
                           000569  2456 	C$medtronicRF.c$162$5$52 ==.
                                   2457 ;	medtronicRF.c:162: uartRxBuffer[++uartRxIndex] = crc8( &uartRxBuffer[3], (int)txLength );
      000569 90r00r00         [24] 2458 	mov	dptr,#_uartRxIndex
      00056C E0               [24] 2459 	movx	a,@dptr
      00056D 24 01            [12] 2460 	add	a,#0x01
      00056F F0               [24] 2461 	movx	@dptr,a
      000570 A3               [24] 2462 	inc	dptr
      000571 E0               [24] 2463 	movx	a,@dptr
      000572 34 00            [12] 2464 	addc	a,#0x00
      000574 F0               [24] 2465 	movx	@dptr,a
      000575 90r00r00         [24] 2466 	mov	dptr,#_uartRxIndex
      000578 E0               [24] 2467 	movx	a,@dptr
      000579 FC               [12] 2468 	mov	r4,a
      00057A A3               [24] 2469 	inc	dptr
      00057B E0               [24] 2470 	movx	a,@dptr
      00057C FD               [12] 2471 	mov	r5,a
      00057D EC               [12] 2472 	mov	a,r4
      00057E 24r00            [12] 2473 	add	a,#_uartRxBuffer
      000580 FC               [12] 2474 	mov	r4,a
      000581 ED               [12] 2475 	mov	a,r5
      000582 34s00            [12] 2476 	addc	a,#(_uartRxBuffer >> 8)
      000584 FD               [12] 2477 	mov	r5,a
      000585 90r00r00         [24] 2478 	mov	dptr,#_txLength
      000588 E0               [24] 2479 	movx	a,@dptr
      000589 FF               [12] 2480 	mov	r7,a
      00058A 8F*00            [24] 2481 	mov	_crc8_PARM_2,r7
      00058C 33               [12] 2482 	rlc	a
      00058D 95 E0            [12] 2483 	subb	a,acc
      00058F F5*01            [12] 2484 	mov	(_crc8_PARM_2 + 1),a
      000591 90r00r03         [24] 2485 	mov	dptr,#(_uartRxBuffer + 0x0003)
      000594 75 F0 00         [24] 2486 	mov	b,#0x00
      000597 C0 05            [24] 2487 	push	ar5
      000599 C0 04            [24] 2488 	push	ar4
      00059B 12r00r00         [24] 2489 	lcall	_crc8
      00059E AF 82            [24] 2490 	mov	r7,dpl
      0005A0 D0 04            [24] 2491 	pop	ar4
      0005A2 D0 05            [24] 2492 	pop	ar5
      0005A4 8C 82            [24] 2493 	mov	dpl,r4
      0005A6 8D 83            [24] 2494 	mov	dph,r5
      0005A8 EF               [12] 2495 	mov	a,r7
      0005A9 F0               [24] 2496 	movx	@dptr,a
                           0005AA  2497 	C$medtronicRF.c$163$5$52 ==.
                                   2498 ;	medtronicRF.c:163: txLength++;
      0005AA 90r00r00         [24] 2499 	mov	dptr,#_txLength
      0005AD E0               [24] 2500 	movx	a,@dptr
      0005AE 24 01            [12] 2501 	add	a,#0x01
      0005B0 F0               [24] 2502 	movx	@dptr,a
      0005B1                       2503 00121$:
                           0005B1  2504 	C$medtronicRF.c$165$4$51 ==.
                                   2505 ;	medtronicRF.c:165: if( txCalcCRC16 == 1 ) {
      0005B1 90r00r00         [24] 2506 	mov	dptr,#_txCalcCRC16
      0005B4 E0               [24] 2507 	movx	a,@dptr
      0005B5 FE               [12] 2508 	mov	r6,a
      0005B6 A3               [24] 2509 	inc	dptr
      0005B7 E0               [24] 2510 	movx	a,@dptr
      0005B8 FF               [12] 2511 	mov	r7,a
      0005B9 BE 01 66         [24] 2512 	cjne	r6,#0x01,00123$
      0005BC BF 00 63         [24] 2513 	cjne	r7,#0x00,00123$
                           0005BF  2514 	C$medtronicRF.c$166$5$53 ==.
                                   2515 ;	medtronicRF.c:166: tmpCRC16 = crc16( &uartRxBuffer[3], (int)txLength );
      0005BF 90r00r00         [24] 2516 	mov	dptr,#_txLength
      0005C2 E0               [24] 2517 	movx	a,@dptr
      0005C3 FF               [12] 2518 	mov	r7,a
      0005C4 8F*00            [24] 2519 	mov	_crc16_PARM_2,r7
      0005C6 33               [12] 2520 	rlc	a
      0005C7 95 E0            [12] 2521 	subb	a,acc
      0005C9 F5*01            [12] 2522 	mov	(_crc16_PARM_2 + 1),a
      0005CB 90r00r03         [24] 2523 	mov	dptr,#(_uartRxBuffer + 0x0003)
      0005CE 75 F0 00         [24] 2524 	mov	b,#0x00
      0005D1 12r00r00         [24] 2525 	lcall	_crc16
      0005D4 AE 82            [24] 2526 	mov	r6,dpl
      0005D6 AF 83            [24] 2527 	mov	r7,dph
                           0005D8  2528 	C$medtronicRF.c$167$5$53 ==.
                                   2529 ;	medtronicRF.c:167: uartRxBuffer[++uartRxIndex] = (char)((tmpCRC16 >> 8) & 0x00FF);
      0005D8 90r00r00         [24] 2530 	mov	dptr,#_uartRxIndex
      0005DB E0               [24] 2531 	movx	a,@dptr
      0005DC 24 01            [12] 2532 	add	a,#0x01
      0005DE F0               [24] 2533 	movx	@dptr,a
      0005DF A3               [24] 2534 	inc	dptr
      0005E0 E0               [24] 2535 	movx	a,@dptr
      0005E1 34 00            [12] 2536 	addc	a,#0x00
      0005E3 F0               [24] 2537 	movx	@dptr,a
      0005E4 90r00r00         [24] 2538 	mov	dptr,#_uartRxIndex
      0005E7 E0               [24] 2539 	movx	a,@dptr
      0005E8 FC               [12] 2540 	mov	r4,a
      0005E9 A3               [24] 2541 	inc	dptr
      0005EA E0               [24] 2542 	movx	a,@dptr
      0005EB FD               [12] 2543 	mov	r5,a
      0005EC EC               [12] 2544 	mov	a,r4
      0005ED 24r00            [12] 2545 	add	a,#_uartRxBuffer
      0005EF F5 82            [12] 2546 	mov	dpl,a
      0005F1 ED               [12] 2547 	mov	a,r5
      0005F2 34s00            [12] 2548 	addc	a,#(_uartRxBuffer >> 8)
      0005F4 F5 83            [12] 2549 	mov	dph,a
      0005F6 8F 05            [24] 2550 	mov	ar5,r7
      0005F8 ED               [12] 2551 	mov	a,r5
      0005F9 F0               [24] 2552 	movx	@dptr,a
                           0005FA  2553 	C$medtronicRF.c$168$5$53 ==.
                                   2554 ;	medtronicRF.c:168: uartRxBuffer[++uartRxIndex] = (char)(tmpCRC16 & 0x00FF);
      0005FA 90r00r00         [24] 2555 	mov	dptr,#_uartRxIndex
      0005FD E0               [24] 2556 	movx	a,@dptr
      0005FE 24 01            [12] 2557 	add	a,#0x01
      000600 F0               [24] 2558 	movx	@dptr,a
      000601 A3               [24] 2559 	inc	dptr
      000602 E0               [24] 2560 	movx	a,@dptr
      000603 34 00            [12] 2561 	addc	a,#0x00
      000605 F0               [24] 2562 	movx	@dptr,a
      000606 90r00r00         [24] 2563 	mov	dptr,#_uartRxIndex
      000609 E0               [24] 2564 	movx	a,@dptr
      00060A FC               [12] 2565 	mov	r4,a
      00060B A3               [24] 2566 	inc	dptr
      00060C E0               [24] 2567 	movx	a,@dptr
      00060D FD               [12] 2568 	mov	r5,a
      00060E EC               [12] 2569 	mov	a,r4
      00060F 24r00            [12] 2570 	add	a,#_uartRxBuffer
      000611 F5 82            [12] 2571 	mov	dpl,a
      000613 ED               [12] 2572 	mov	a,r5
      000614 34s00            [12] 2573 	addc	a,#(_uartRxBuffer >> 8)
      000616 F5 83            [12] 2574 	mov	dph,a
      000618 EE               [12] 2575 	mov	a,r6
      000619 F0               [24] 2576 	movx	@dptr,a
                           00061A  2577 	C$medtronicRF.c$169$5$53 ==.
                                   2578 ;	medtronicRF.c:169: txLength += 2;
      00061A 90r00r00         [24] 2579 	mov	dptr,#_txLength
      00061D E0               [24] 2580 	movx	a,@dptr
      00061E FF               [12] 2581 	mov	r7,a
      00061F 24 02            [12] 2582 	add	a,#0x02
      000621 F0               [24] 2583 	movx	@dptr,a
      000622                       2584 00123$:
                           000622  2585 	C$medtronicRF.c$172$4$51 ==.
                                   2586 ;	medtronicRF.c:172: if( txFilter( &uartRxBuffer[3], txLength ) == 0 ) {
      000622 90r00r00         [24] 2587 	mov	dptr,#_txLength
      000625 E0               [24] 2588 	movx	a,@dptr
      000626 FF               [12] 2589 	mov	r7,a
      000627 8F*00            [24] 2590 	mov	_txFilter_PARM_2,r7
      000629 33               [12] 2591 	rlc	a
      00062A 95 E0            [12] 2592 	subb	a,acc
      00062C F5*01            [12] 2593 	mov	(_txFilter_PARM_2 + 1),a
      00062E 90r00r03         [24] 2594 	mov	dptr,#(_uartRxBuffer + 0x0003)
      000631 75 F0 00         [24] 2595 	mov	b,#0x00
      000634 12r00r00         [24] 2596 	lcall	_txFilter
      000637 E5 82            [12] 2597 	mov	a,dpl
      000639 70 3A            [24] 2598 	jnz	00125$
                           00063B  2599 	C$medtronicRF.c$173$5$54 ==.
                                   2600 ;	medtronicRF.c:173: sendMedtronicMessage( &uartRxBuffer[3], txLength, txTimes );
      00063B 90r00r00         [24] 2601 	mov	dptr,#_txLength
      00063E E0               [24] 2602 	movx	a,@dptr
      00063F FF               [12] 2603 	mov	r7,a
      000640 8F*00            [24] 2604 	mov	_sendMedtronicMessage_PARM_2,r7
      000642 33               [12] 2605 	rlc	a
      000643 95 E0            [12] 2606 	subb	a,acc
      000645 F5*01            [12] 2607 	mov	(_sendMedtronicMessage_PARM_2 + 1),a
      000647 90r00r00         [24] 2608 	mov	dptr,#_txTimes
      00064A E0               [24] 2609 	movx	a,@dptr
      00064B F5*02            [12] 2610 	mov	_sendMedtronicMessage_PARM_3,a
      00064D A3               [24] 2611 	inc	dptr
      00064E E0               [24] 2612 	movx	a,@dptr
      00064F F5*03            [12] 2613 	mov	(_sendMedtronicMessage_PARM_3 + 1),a
      000651 90r00r03         [24] 2614 	mov	dptr,#(_uartRxBuffer + 0x0003)
      000654 75 F0 00         [24] 2615 	mov	b,#0x00
      000657 12r00r00         [24] 2616 	lcall	_sendMedtronicMessage
                           00065A  2617 	C$medtronicRF.c$174$5$54 ==.
                                   2618 ;	medtronicRF.c:174: crc16Init( );
      00065A 12r00r00         [24] 2619 	lcall	_crc16Init
                           00065D  2620 	C$medtronicRF.c$175$5$54 ==.
                                   2621 ;	medtronicRF.c:175: halUartWrite( (uint8_t const *)uartRxBuffer, 3 );
      00065D 75*00 03         [24] 2622 	mov	_halUartWrite_PARM_2,#0x03
      000660 75*01 00         [24] 2623 	mov	(_halUartWrite_PARM_2 + 1),#0x00
      000663 90r00r00         [24] 2624 	mov	dptr,#_uartRxBuffer
      000666 75 F0 00         [24] 2625 	mov	b,#0x00
      000669 12r00r00         [24] 2626 	lcall	_halUartWrite
                           00066C  2627 	C$medtronicRF.c$176$5$54 ==.
                                   2628 ;	medtronicRF.c:176: uartRxIndex = 0;
      00066C 90r00r00         [24] 2629 	mov	dptr,#_uartRxIndex
      00066F E4               [12] 2630 	clr	a
      000670 F0               [24] 2631 	movx	@dptr,a
      000671 A3               [24] 2632 	inc	dptr
      000672 F0               [24] 2633 	movx	@dptr,a
      000673 80 2B            [24] 2634 	sjmp	00147$
      000675                       2635 00125$:
                           000675  2636 	C$medtronicRF.c$178$5$55 ==.
                                   2637 ;	medtronicRF.c:178: uartRxBuffer[1] = 0x00;
      000675 90r00r01         [24] 2638 	mov	dptr,#(_uartRxBuffer + 0x0001)
      000678 E4               [12] 2639 	clr	a
      000679 F0               [24] 2640 	movx	@dptr,a
                           00067A  2641 	C$medtronicRF.c$179$5$55 ==.
                                   2642 ;	medtronicRF.c:179: uartRxBuffer[2] = 0x00;
      00067A 90r00r02         [24] 2643 	mov	dptr,#(_uartRxBuffer + 0x0002)
      00067D F0               [24] 2644 	movx	@dptr,a
                           00067E  2645 	C$medtronicRF.c$180$5$55 ==.
                                   2646 ;	medtronicRF.c:180: halUartWrite( (uint8_t const *)uartRxBuffer, 3 );
      00067E 75*00 03         [24] 2647 	mov	_halUartWrite_PARM_2,#0x03
                                   2648 ;	1-genFromRTrack replaced	mov	(_halUartWrite_PARM_2 + 1),#0x00
      000681 F5*01            [12] 2649 	mov	(_halUartWrite_PARM_2 + 1),a
      000683 90r00r00         [24] 2650 	mov	dptr,#_uartRxBuffer
      000686 75 F0 00         [24] 2651 	mov	b,#0x00
      000689 12r00r00         [24] 2652 	lcall	_halUartWrite
                           00068C  2653 	C$medtronicRF.c$181$5$55 ==.
                                   2654 ;	medtronicRF.c:181: uartRxIndex = 0;
      00068C 90r00r00         [24] 2655 	mov	dptr,#_uartRxIndex
      00068F E4               [12] 2656 	clr	a
      000690 F0               [24] 2657 	movx	@dptr,a
      000691 A3               [24] 2658 	inc	dptr
      000692 F0               [24] 2659 	movx	@dptr,a
      000693 80 0B            [24] 2660 	sjmp	00147$
      000695                       2661 00128$:
                           000695  2662 	C$medtronicRF.c$184$4$56 ==.
                                   2663 ;	medtronicRF.c:184: uartRxIndex++;
      000695 90r00r00         [24] 2664 	mov	dptr,#_uartRxIndex
      000698 74 01            [12] 2665 	mov	a,#0x01
      00069A 2A               [12] 2666 	add	a,r2
      00069B F0               [24] 2667 	movx	@dptr,a
      00069C E4               [12] 2668 	clr	a
      00069D 3B               [12] 2669 	addc	a,r3
      00069E A3               [24] 2670 	inc	dptr
      00069F F0               [24] 2671 	movx	@dptr,a
      0006A0                       2672 00147$:
                           0006A0  2673 	C$medtronicRF.c$119$1$39 ==.
                                   2674 ;	medtronicRF.c:119: for( i = 0; i < nBytes; i++ ) {
      0006A0 05*91            [12] 2675 	inc	_usbReceiveData_i_1_39
      0006A2 E4               [12] 2676 	clr	a
      0006A3 B5*91 02         [24] 2677 	cjne	a,_usbReceiveData_i_1_39,00232$
      0006A6 05*92            [12] 2678 	inc	(_usbReceiveData_i_1_39 + 1)
      0006A8                       2679 00232$:
      0006A8 02r03rF2         [24] 2680 	ljmp	00146$
      0006AB                       2681 00148$:
                           0006AB  2682 	C$medtronicRF.c$188$1$39 ==.
                           0006AB  2683 	XG$usbReceiveData$0$0 ==.
      0006AB 22               [24] 2684 	ret
                                   2685 	.area CSEG    (CODE)
                                   2686 	.area CONST   (CODE)
                                   2687 	.area XINIT   (CODE)
                                   2688 	.area CABS    (ABS,CODE)
