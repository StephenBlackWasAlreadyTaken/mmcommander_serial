                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                                      4 ; This file was generated Fri Apr 24 18:54:33 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module crc_4b6b
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _decode4b6bsymbol_PARM_2
                                     13 	.globl _crc16_PARM_2
                                     14 	.globl _crc8_PARM_2
                                     15 	.globl _decode4b6b_PARM_4
                                     16 	.globl _decode4b6b_PARM_3
                                     17 	.globl _decode4b6b_PARM_2
                                     18 	.globl _encode4b6b_PARM_4
                                     19 	.globl _encode4b6b_PARM_3
                                     20 	.globl _encode4b6b_PARM_2
                                     21 	.globl _crc8
                                     22 	.globl _crc16Init
                                     23 	.globl _crc16
                                     24 	.globl _get4b6bsymbol
                                     25 	.globl _decode4b6bsymbol
                                     26 	.globl _encode4b6b
                                     27 	.globl _decode4b6b
                                     28 	.globl _sleep
                                     29 ;--------------------------------------------------------
                                     30 ; special function registers
                                     31 ;--------------------------------------------------------
                                     32 	.area RSEG    (ABS,DATA)
      000000                         33 	.org 0x0000
                                     34 ;--------------------------------------------------------
                                     35 ; special function bits
                                     36 ;--------------------------------------------------------
                                     37 	.area RSEG    (ABS,DATA)
      000000                         38 	.org 0x0000
                                     39 ;--------------------------------------------------------
                                     40 ; overlayable register banks
                                     41 ;--------------------------------------------------------
                                     42 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         43 	.ds 8
                                     44 ;--------------------------------------------------------
                                     45 ; internal ram data
                                     46 ;--------------------------------------------------------
                                     47 	.area DSEG    (DATA)
                           000000    48 Lcrc_4b6b.encode4b6b$bytesIn$1$43==.
      000000                         49 _encode4b6b_PARM_2:
      000000                         50 	.ds 2
                           000002    51 Lcrc_4b6b.encode4b6b$messageOut$1$43==.
      000002                         52 _encode4b6b_PARM_3:
      000002                         53 	.ds 3
                           000005    54 Lcrc_4b6b.encode4b6b$bytesOut$1$43==.
      000005                         55 _encode4b6b_PARM_4:
      000005                         56 	.ds 3
                           000008    57 Lcrc_4b6b.encode4b6b$messageIn$1$43==.
      000008                         58 _encode4b6b_messageIn_1_43:
      000008                         59 	.ds 3
                           00000B    60 Lcrc_4b6b.encode4b6b$i$1$44==.
      00000B                         61 _encode4b6b_i_1_44:
      00000B                         62 	.ds 2
                           00000D    63 Lcrc_4b6b.encode4b6b$j$1$44==.
      00000D                         64 _encode4b6b_j_1_44:
      00000D                         65 	.ds 2
                           00000F    66 Lcrc_4b6b.encode4b6b$intBuffer$1$44==.
      00000F                         67 _encode4b6b_intBuffer_1_44:
      00000F                         68 	.ds 2
                           000011    69 Lcrc_4b6b.encode4b6b$intBitsAvailable$1$44==.
      000011                         70 _encode4b6b_intBitsAvailable_1_44:
      000011                         71 	.ds 2
                           000013    72 Lcrc_4b6b.encode4b6b$symbol$1$44==.
      000013                         73 _encode4b6b_symbol_1_44:
      000013                         74 	.ds 1
                           000014    75 Lcrc_4b6b.encode4b6b$sloc0$1$0==.
      000014                         76 _encode4b6b_sloc0_1_0:
      000014                         77 	.ds 2
                           000016    78 Lcrc_4b6b.decode4b6b$bytesIn$1$50==.
      000016                         79 _decode4b6b_PARM_2:
      000016                         80 	.ds 2
                           000018    81 Lcrc_4b6b.decode4b6b$messageOut$1$50==.
      000018                         82 _decode4b6b_PARM_3:
      000018                         83 	.ds 3
                           00001B    84 Lcrc_4b6b.decode4b6b$bytesOut$1$50==.
      00001B                         85 _decode4b6b_PARM_4:
      00001B                         86 	.ds 3
                           00001E    87 Lcrc_4b6b.decode4b6b$messageIn$1$50==.
      00001E                         88 _decode4b6b_messageIn_1_50:
      00001E                         89 	.ds 3
                           000021    90 Lcrc_4b6b.decode4b6b$i$1$51==.
      000021                         91 _decode4b6b_i_1_51:
      000021                         92 	.ds 2
                           000023    93 Lcrc_4b6b.decode4b6b$intBuffer$1$51==.
      000023                         94 _decode4b6b_intBuffer_1_51:
      000023                         95 	.ds 2
                           000025    96 Lcrc_4b6b.decode4b6b$intBitsAvailable$1$51==.
      000025                         97 _decode4b6b_intBitsAvailable_1_51:
      000025                         98 	.ds 2
                           000027    99 Lcrc_4b6b.decode4b6b$symbol$1$51==.
      000027                        100 _decode4b6b_symbol_1_51:
      000027                        101 	.ds 1
                           000028   102 Lcrc_4b6b.decode4b6b$nibbleFlag$1$51==.
      000028                        103 _decode4b6b_nibbleFlag_1_51:
      000028                        104 	.ds 1
                           000029   105 Lcrc_4b6b.decode4b6b$outBytes$1$51==.
      000029                        106 _decode4b6b_outBytes_1_51:
      000029                        107 	.ds 1
                                    108 ;--------------------------------------------------------
                                    109 ; overlayable items in internal ram 
                                    110 ;--------------------------------------------------------
                                    111 	.area	OSEG    (OVR,DATA)
                           000000   112 Lcrc_4b6b.crc8$nBytes$1$9==.
      000000                        113 _crc8_PARM_2:
      000000                        114 	.ds 2
                           000002   115 Lcrc_4b6b.crc8$message$1$9==.
      000002                        116 _crc8_message_1_9:
      000002                        117 	.ds 3
                                    118 	.area	OSEG    (OVR,DATA)
                           000000   119 Lcrc_4b6b.crc16Init$j$1$14==.
      000000                        120 _crc16Init_j_1_14:
      000000                        121 	.ds 2
                                    122 	.area	OSEG    (OVR,DATA)
                           000000   123 Lcrc_4b6b.crc16$nBytes$1$17==.
      000000                        124 _crc16_PARM_2:
      000000                        125 	.ds 2
                           000002   126 Lcrc_4b6b.crc16$message$1$17==.
      000002                        127 _crc16_message_1_17:
      000002                        128 	.ds 3
                                    129 	.area	OSEG    (OVR,DATA)
                                    130 	.area	OSEG    (OVR,DATA)
                           000000   131 Lcrc_4b6b.decode4b6bsymbol$outSymbol$1$23==.
      000000                        132 _decode4b6bsymbol_PARM_2:
      000000                        133 	.ds 3
                                    134 	.area	OSEG    (OVR,DATA)
                                    135 ;--------------------------------------------------------
                                    136 ; indirectly addressable internal ram data
                                    137 ;--------------------------------------------------------
                                    138 	.area ISEG    (DATA)
                                    139 ;--------------------------------------------------------
                                    140 ; absolute internal ram data
                                    141 ;--------------------------------------------------------
                                    142 	.area IABS    (ABS,DATA)
                                    143 	.area IABS    (ABS,DATA)
                                    144 ;--------------------------------------------------------
                                    145 ; bit data
                                    146 ;--------------------------------------------------------
                                    147 	.area BSEG    (BIT)
                                    148 ;--------------------------------------------------------
                                    149 ; paged external ram data
                                    150 ;--------------------------------------------------------
                                    151 	.area PSEG    (PAG,XDATA)
                                    152 ;--------------------------------------------------------
                                    153 ; external ram data
                                    154 ;--------------------------------------------------------
                                    155 	.area XSEG    (XDATA)
                           000000   156 Fcrc_4b6b$crc16Tab$0$0==.
      000000                        157 _crc16Tab:
      000000                        158 	.ds 512
                                    159 ;--------------------------------------------------------
                                    160 ; absolute external ram data
                                    161 ;--------------------------------------------------------
                                    162 	.area XABS    (ABS,XDATA)
                                    163 ;--------------------------------------------------------
                                    164 ; external initialized ram data
                                    165 ;--------------------------------------------------------
                                    166 	.area XISEG   (XDATA)
                                    167 	.area HOME    (CODE)
                                    168 	.area GSINIT0 (CODE)
                                    169 	.area GSINIT1 (CODE)
                                    170 	.area GSINIT2 (CODE)
                                    171 	.area GSINIT3 (CODE)
                                    172 	.area GSINIT4 (CODE)
                                    173 	.area GSINIT5 (CODE)
                                    174 	.area GSINIT  (CODE)
                                    175 	.area GSFINAL (CODE)
                                    176 	.area CSEG    (CODE)
                                    177 ;--------------------------------------------------------
                                    178 ; global & static initialisations
                                    179 ;--------------------------------------------------------
                                    180 	.area HOME    (CODE)
                                    181 	.area GSINIT  (CODE)
                                    182 	.area GSFINAL (CODE)
                                    183 	.area GSINIT  (CODE)
                                    184 ;--------------------------------------------------------
                                    185 ; Home
                                    186 ;--------------------------------------------------------
                                    187 	.area HOME    (CODE)
                                    188 	.area HOME    (CODE)
                                    189 ;--------------------------------------------------------
                                    190 ; code
                                    191 ;--------------------------------------------------------
                                    192 	.area CSEG    (CODE)
                                    193 ;------------------------------------------------------------
                                    194 ;Allocation info for local variables in function 'crc8'
                                    195 ;------------------------------------------------------------
                                    196 ;nBytes                    Allocated with name '_crc8_PARM_2'
                                    197 ;message                   Allocated with name '_crc8_message_1_9'
                                    198 ;remainder                 Allocated to registers r4 
                                    199 ;byte                      Allocated to registers r2 r3 
                                    200 ;bit                       Allocated to registers r7 
                                    201 ;------------------------------------------------------------
                           000000   202 	G$crc8$0$0 ==.
                           000000   203 	C$crc_4b6b.c$6$0$0 ==.
                                    204 ;	crc_4b6b.c:6: char crc8( char *message, unsigned int nBytes ) {
                                    205 ;	-----------------------------------------
                                    206 ;	 function crc8
                                    207 ;	-----------------------------------------
      000000                        208 _crc8:
                           000007   209 	ar7 = 0x07
                           000006   210 	ar6 = 0x06
                           000005   211 	ar5 = 0x05
                           000004   212 	ar4 = 0x04
                           000003   213 	ar3 = 0x03
                           000002   214 	ar2 = 0x02
                           000001   215 	ar1 = 0x01
                           000000   216 	ar0 = 0x00
      000000 85 82*02         [24]  217 	mov	_crc8_message_1_9,dpl
      000003 85 83*03         [24]  218 	mov	(_crc8_message_1_9 + 1),dph
      000006 85 F0*04         [24]  219 	mov	(_crc8_message_1_9 + 2),b
                           000009   220 	C$crc_4b6b.c$7$1$0 ==.
                                    221 ;	crc_4b6b.c:7: char remainder = 0;
      000009 7C 00            [12]  222 	mov	r4,#0x00
                           00000B   223 	C$crc_4b6b.c$11$1$10 ==.
                                    224 ;	crc_4b6b.c:11: for( byte = 0; byte < nBytes; ++byte ) {
      00000B 7A 00            [12]  225 	mov	r2,#0x00
      00000D 7B 00            [12]  226 	mov	r3,#0x00
      00000F                        227 00109$:
      00000F C3               [12]  228 	clr	c
      000010 EA               [12]  229 	mov	a,r2
      000011 95*00            [12]  230 	subb	a,_crc8_PARM_2
      000013 EB               [12]  231 	mov	a,r3
      000014 95*01            [12]  232 	subb	a,(_crc8_PARM_2 + 1)
      000016 50 3C            [24]  233 	jnc	00105$
                           000018   234 	C$crc_4b6b.c$12$2$11 ==.
                                    235 ;	crc_4b6b.c:12: remainder ^= message[byte];
      000018 EA               [12]  236 	mov	a,r2
      000019 25*02            [12]  237 	add	a,_crc8_message_1_9
      00001B F8               [12]  238 	mov	r0,a
      00001C EB               [12]  239 	mov	a,r3
      00001D 35*03            [12]  240 	addc	a,(_crc8_message_1_9 + 1)
      00001F F9               [12]  241 	mov	r1,a
      000020 AF*04            [24]  242 	mov	r7,(_crc8_message_1_9 + 2)
      000022 88 82            [24]  243 	mov	dpl,r0
      000024 89 83            [24]  244 	mov	dph,r1
      000026 8F F0            [24]  245 	mov	b,r7
      000028 12r00r00         [24]  246 	lcall	__gptrget
      00002B F8               [12]  247 	mov	r0,a
      00002C 62 04            [12]  248 	xrl	ar4,a
                           00002E   249 	C$crc_4b6b.c$13$1$10 ==.
                                    250 ;	crc_4b6b.c:13: for( bit = 8; bit > 0; --bit ) {
      00002E 7F 08            [12]  251 	mov	r7,#0x08
      000030                        252 00106$:
                           000030   253 	C$crc_4b6b.c$14$3$12 ==.
                                    254 ;	crc_4b6b.c:14: if( remainder & 0x80 )
      000030 EC               [12]  255 	mov	a,r4
      000031 30 E7 09         [24]  256 	jnb	acc.7,00102$
                           000034   257 	C$crc_4b6b.c$15$3$12 ==.
                                    258 ;	crc_4b6b.c:15: remainder = (remainder << 1) ^ 0x9B;
      000034 EC               [12]  259 	mov	a,r4
      000035 2C               [12]  260 	add	a,r4
      000036 FE               [12]  261 	mov	r6,a
      000037 74 9B            [12]  262 	mov	a,#0x9B
      000039 6E               [12]  263 	xrl	a,r6
      00003A FC               [12]  264 	mov	r4,a
      00003B 80 03            [24]  265 	sjmp	00107$
      00003D                        266 00102$:
                           00003D   267 	C$crc_4b6b.c$17$3$12 ==.
                                    268 ;	crc_4b6b.c:17: remainder = (remainder << 1);
      00003D EC               [12]  269 	mov	a,r4
      00003E 2C               [12]  270 	add	a,r4
      00003F FC               [12]  271 	mov	r4,a
      000040                        272 00107$:
                           000040   273 	C$crc_4b6b.c$13$2$11 ==.
                                    274 ;	crc_4b6b.c:13: for( bit = 8; bit > 0; --bit ) {
      000040 1F               [12]  275 	dec	r7
      000041 C3               [12]  276 	clr	c
      000042 74 80            [12]  277 	mov	a,#(0x00 ^ 0x80)
      000044 8F F0            [24]  278 	mov	b,r7
      000046 63 F0 80         [24]  279 	xrl	b,#0x80
      000049 95 F0            [12]  280 	subb	a,b
      00004B 40 E3            [24]  281 	jc	00106$
                           00004D   282 	C$crc_4b6b.c$11$1$10 ==.
                                    283 ;	crc_4b6b.c:11: for( byte = 0; byte < nBytes; ++byte ) {
      00004D 0A               [12]  284 	inc	r2
      00004E BA 00 BE         [24]  285 	cjne	r2,#0x00,00109$
      000051 0B               [12]  286 	inc	r3
      000052 80 BB            [24]  287 	sjmp	00109$
      000054                        288 00105$:
                           000054   289 	C$crc_4b6b.c$21$1$10 ==.
                                    290 ;	crc_4b6b.c:21: return(remainder);
      000054 8C 82            [24]  291 	mov	dpl,r4
                           000056   292 	C$crc_4b6b.c$22$1$10 ==.
                           000056   293 	XG$crc8$0$0 ==.
      000056 22               [24]  294 	ret
                                    295 ;------------------------------------------------------------
                                    296 ;Allocation info for local variables in function 'crc16Init'
                                    297 ;------------------------------------------------------------
                                    298 ;i                         Allocated to registers r6 r7 
                                    299 ;j                         Allocated with name '_crc16Init_j_1_14'
                                    300 ;crc                       Allocated to registers r4 r5 
                                    301 ;c                         Allocated to registers r2 r3 
                                    302 ;------------------------------------------------------------
                           000057   303 	G$crc16Init$0$0 ==.
                           000057   304 	C$crc_4b6b.c$24$1$10 ==.
                                    305 ;	crc_4b6b.c:24: void crc16Init( void ) {
                                    306 ;	-----------------------------------------
                                    307 ;	 function crc16Init
                                    308 ;	-----------------------------------------
      000057                        309 _crc16Init:
                           000057   310 	C$crc_4b6b.c$30$2$15 ==.
                                    311 ;	crc_4b6b.c:30: for( i = 0; i < 256; i++ ) {
      000057 7E 00            [12]  312 	mov	r6,#0x00
      000059 7F 00            [12]  313 	mov	r7,#0x00
      00005B                        314 00108$:
                           00005B   315 	C$crc_4b6b.c$31$2$15 ==.
                                    316 ;	crc_4b6b.c:31: crc = 0;
      00005B 7C 00            [12]  317 	mov	r4,#0x00
      00005D 7D 00            [12]  318 	mov	r5,#0x00
                           00005F   319 	C$crc_4b6b.c$32$2$15 ==.
                                    320 ;	crc_4b6b.c:32: c = ((unsigned short)i) << 8;
      00005F 8E 03            [24]  321 	mov	ar3,r6
                           000061   322 	C$crc_4b6b.c$33$1$14 ==.
                                    323 ;	crc_4b6b.c:33: for( j = 0; j < 8; j++ ) {
      000061 E4               [12]  324 	clr	a
      000062 FA               [12]  325 	mov	r2,a
      000063 F5*00            [12]  326 	mov	_crc16Init_j_1_14,a
      000065 F5*01            [12]  327 	mov	(_crc16Init_j_1_14 + 1),a
      000067                        328 00106$:
                           000067   329 	C$crc_4b6b.c$34$3$16 ==.
                                    330 ;	crc_4b6b.c:34: if( (crc^c) & 0x8000 ) crc = (crc << 1) ^ 0x1021;
      000067 EA               [12]  331 	mov	a,r2
      000068 6C               [12]  332 	xrl	a,r4
      000069 F8               [12]  333 	mov	r0,a
      00006A EB               [12]  334 	mov	a,r3
      00006B 6D               [12]  335 	xrl	a,r5
      00006C F9               [12]  336 	mov	r1,a
      00006D 30 E7 13         [24]  337 	jnb	acc.7,00102$
      000070 8C 00            [24]  338 	mov	ar0,r4
      000072 ED               [12]  339 	mov	a,r5
      000073 C8               [12]  340 	xch	a,r0
      000074 25 E0            [12]  341 	add	a,acc
      000076 C8               [12]  342 	xch	a,r0
      000077 33               [12]  343 	rlc	a
      000078 F9               [12]  344 	mov	r1,a
      000079 74 21            [12]  345 	mov	a,#0x21
      00007B 68               [12]  346 	xrl	a,r0
      00007C FC               [12]  347 	mov	r4,a
      00007D 74 10            [12]  348 	mov	a,#0x10
      00007F 69               [12]  349 	xrl	a,r1
      000080 FD               [12]  350 	mov	r5,a
      000081 80 07            [24]  351 	sjmp	00103$
      000083                        352 00102$:
                           000083   353 	C$crc_4b6b.c$35$3$16 ==.
                                    354 ;	crc_4b6b.c:35: else                    crc = crc << 1;
      000083 ED               [12]  355 	mov	a,r5
      000084 CC               [12]  356 	xch	a,r4
      000085 25 E0            [12]  357 	add	a,acc
      000087 CC               [12]  358 	xch	a,r4
      000088 33               [12]  359 	rlc	a
      000089 FD               [12]  360 	mov	r5,a
      00008A                        361 00103$:
                           00008A   362 	C$crc_4b6b.c$36$3$16 ==.
                                    363 ;	crc_4b6b.c:36: c = c << 1;
      00008A EB               [12]  364 	mov	a,r3
      00008B CA               [12]  365 	xch	a,r2
      00008C 25 E0            [12]  366 	add	a,acc
      00008E CA               [12]  367 	xch	a,r2
      00008F 33               [12]  368 	rlc	a
      000090 FB               [12]  369 	mov	r3,a
                           000091   370 	C$crc_4b6b.c$33$2$15 ==.
                                    371 ;	crc_4b6b.c:33: for( j = 0; j < 8; j++ ) {
      000091 05*00            [12]  372 	inc	_crc16Init_j_1_14
      000093 E4               [12]  373 	clr	a
      000094 B5*00 02         [24]  374 	cjne	a,_crc16Init_j_1_14,00127$
      000097 05*01            [12]  375 	inc	(_crc16Init_j_1_14 + 1)
      000099                        376 00127$:
      000099 C3               [12]  377 	clr	c
      00009A E5*00            [12]  378 	mov	a,_crc16Init_j_1_14
      00009C 94 08            [12]  379 	subb	a,#0x08
      00009E E5*01            [12]  380 	mov	a,(_crc16Init_j_1_14 + 1)
      0000A0 94 00            [12]  381 	subb	a,#0x00
      0000A2 40 C3            [24]  382 	jc	00106$
                           0000A4   383 	C$crc_4b6b.c$38$2$15 ==.
                                    384 ;	crc_4b6b.c:38: crc16Tab[i] = crc;
      0000A4 8E 02            [24]  385 	mov	ar2,r6
      0000A6 EF               [12]  386 	mov	a,r7
      0000A7 CA               [12]  387 	xch	a,r2
      0000A8 25 E0            [12]  388 	add	a,acc
      0000AA CA               [12]  389 	xch	a,r2
      0000AB 33               [12]  390 	rlc	a
      0000AC FB               [12]  391 	mov	r3,a
      0000AD EA               [12]  392 	mov	a,r2
      0000AE 24r00            [12]  393 	add	a,#_crc16Tab
      0000B0 F5 82            [12]  394 	mov	dpl,a
      0000B2 EB               [12]  395 	mov	a,r3
      0000B3 34s00            [12]  396 	addc	a,#(_crc16Tab >> 8)
      0000B5 F5 83            [12]  397 	mov	dph,a
      0000B7 EC               [12]  398 	mov	a,r4
      0000B8 F0               [24]  399 	movx	@dptr,a
      0000B9 ED               [12]  400 	mov	a,r5
      0000BA A3               [24]  401 	inc	dptr
      0000BB F0               [24]  402 	movx	@dptr,a
                           0000BC   403 	C$crc_4b6b.c$30$1$14 ==.
                                    404 ;	crc_4b6b.c:30: for( i = 0; i < 256; i++ ) {
      0000BC 0E               [12]  405 	inc	r6
      0000BD BE 00 01         [24]  406 	cjne	r6,#0x00,00129$
      0000C0 0F               [12]  407 	inc	r7
      0000C1                        408 00129$:
      0000C1 74 FF            [12]  409 	mov	a,#0x100 - 0x01
      0000C3 2F               [12]  410 	add	a,r7
      0000C4 50 95            [24]  411 	jnc	00108$
                           0000C6   412 	C$crc_4b6b.c$40$1$14 ==.
                           0000C6   413 	XG$crc16Init$0$0 ==.
      0000C6 22               [24]  414 	ret
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'crc16'
                                    417 ;------------------------------------------------------------
                                    418 ;nBytes                    Allocated with name '_crc16_PARM_2'
                                    419 ;message                   Allocated with name '_crc16_message_1_17'
                                    420 ;i                         Allocated to registers r1 r2 
                                    421 ;crc                       Allocated to registers r3 r4 
                                    422 ;short_c                   Allocated to registers r0 r7 
                                    423 ;tmp                       Allocated to registers r0 r7 
                                    424 ;------------------------------------------------------------
                           0000C7   425 	G$crc16$0$0 ==.
                           0000C7   426 	C$crc_4b6b.c$42$1$14 ==.
                                    427 ;	crc_4b6b.c:42: short crc16( char *message, unsigned int nBytes ) {
                                    428 ;	-----------------------------------------
                                    429 ;	 function crc16
                                    430 ;	-----------------------------------------
      0000C7                        431 _crc16:
      0000C7 85 82*02         [24]  432 	mov	_crc16_message_1_17,dpl
      0000CA 85 83*03         [24]  433 	mov	(_crc16_message_1_17 + 1),dph
      0000CD 85 F0*04         [24]  434 	mov	(_crc16_message_1_17 + 2),b
                           0000D0   435 	C$crc_4b6b.c$48$1$18 ==.
                                    436 ;	crc_4b6b.c:48: crc = 0xffff;
      0000D0 7B FF            [12]  437 	mov	r3,#0xFF
      0000D2 7C FF            [12]  438 	mov	r4,#0xFF
                           0000D4   439 	C$crc_4b6b.c$49$2$19 ==.
                                    440 ;	crc_4b6b.c:49: for( i = 0; i < nBytes; i++ ) {
      0000D4 79 00            [12]  441 	mov	r1,#0x00
      0000D6 7A 00            [12]  442 	mov	r2,#0x00
      0000D8                        443 00103$:
      0000D8 C3               [12]  444 	clr	c
      0000D9 E9               [12]  445 	mov	a,r1
      0000DA 95*00            [12]  446 	subb	a,_crc16_PARM_2
      0000DC EA               [12]  447 	mov	a,r2
      0000DD 95*01            [12]  448 	subb	a,(_crc16_PARM_2 + 1)
      0000DF 50 4A            [24]  449 	jnc	00101$
                           0000E1   450 	C$crc_4b6b.c$50$2$19 ==.
                                    451 ;	crc_4b6b.c:50: short_c = 0x00ff & (unsigned short)message[i];
      0000E1 E9               [12]  452 	mov	a,r1
      0000E2 25*02            [12]  453 	add	a,_crc16_message_1_17
      0000E4 F8               [12]  454 	mov	r0,a
      0000E5 EA               [12]  455 	mov	a,r2
      0000E6 35*03            [12]  456 	addc	a,(_crc16_message_1_17 + 1)
      0000E8 FE               [12]  457 	mov	r6,a
      0000E9 AF*04            [24]  458 	mov	r7,(_crc16_message_1_17 + 2)
      0000EB 88 82            [24]  459 	mov	dpl,r0
      0000ED 8E 83            [24]  460 	mov	dph,r6
      0000EF 8F F0            [24]  461 	mov	b,r7
      0000F1 12r00r00         [24]  462 	lcall	__gptrget
      0000F4 F8               [12]  463 	mov	r0,a
      0000F5 33               [12]  464 	rlc	a
      0000F6 95 E0            [12]  465 	subb	a,acc
      0000F8 7F 00            [12]  466 	mov	r7,#0x00
                           0000FA   467 	C$crc_4b6b.c$51$2$19 ==.
                                    468 ;	crc_4b6b.c:51: tmp = (crc >> 8) ^ short_c;
      0000FA 8C 05            [24]  469 	mov	ar5,r4
      0000FC 7E 00            [12]  470 	mov	r6,#0x00
      0000FE ED               [12]  471 	mov	a,r5
      0000FF 62 00            [12]  472 	xrl	ar0,a
      000101 EE               [12]  473 	mov	a,r6
      000102 62 07            [12]  474 	xrl	ar7,a
                           000104   475 	C$crc_4b6b.c$52$2$19 ==.
                                    476 ;	crc_4b6b.c:52: crc = (crc << 8) ^ crc16Tab[tmp];
      000104 8B 06            [24]  477 	mov	ar6,r3
      000106 7D 00            [12]  478 	mov	r5,#0x00
      000108 EF               [12]  479 	mov	a,r7
      000109 C8               [12]  480 	xch	a,r0
      00010A 25 E0            [12]  481 	add	a,acc
      00010C C8               [12]  482 	xch	a,r0
      00010D 33               [12]  483 	rlc	a
      00010E FF               [12]  484 	mov	r7,a
      00010F E8               [12]  485 	mov	a,r0
      000110 24r00            [12]  486 	add	a,#_crc16Tab
      000112 F5 82            [12]  487 	mov	dpl,a
      000114 EF               [12]  488 	mov	a,r7
      000115 34s00            [12]  489 	addc	a,#(_crc16Tab >> 8)
      000117 F5 83            [12]  490 	mov	dph,a
      000119 E0               [24]  491 	movx	a,@dptr
      00011A F8               [12]  492 	mov	r0,a
      00011B A3               [24]  493 	inc	dptr
      00011C E0               [24]  494 	movx	a,@dptr
      00011D FF               [12]  495 	mov	r7,a
      00011E E8               [12]  496 	mov	a,r0
      00011F 6D               [12]  497 	xrl	a,r5
      000120 FB               [12]  498 	mov	r3,a
      000121 EF               [12]  499 	mov	a,r7
      000122 6E               [12]  500 	xrl	a,r6
      000123 FC               [12]  501 	mov	r4,a
                           000124   502 	C$crc_4b6b.c$49$1$18 ==.
                                    503 ;	crc_4b6b.c:49: for( i = 0; i < nBytes; i++ ) {
      000124 09               [12]  504 	inc	r1
      000125 B9 00 B0         [24]  505 	cjne	r1,#0x00,00103$
      000128 0A               [12]  506 	inc	r2
      000129 80 AD            [24]  507 	sjmp	00103$
      00012B                        508 00101$:
                           00012B   509 	C$crc_4b6b.c$55$1$18 ==.
                                    510 ;	crc_4b6b.c:55: return(crc);
      00012B 8B 82            [24]  511 	mov	dpl,r3
      00012D 8C 83            [24]  512 	mov	dph,r4
                           00012F   513 	C$crc_4b6b.c$56$1$18 ==.
                           00012F   514 	XG$crc16$0$0 ==.
      00012F 22               [24]  515 	ret
                                    516 ;------------------------------------------------------------
                                    517 ;Allocation info for local variables in function 'get4b6bsymbol'
                                    518 ;------------------------------------------------------------
                                    519 ;inSymbol                  Allocated to registers r7 
                                    520 ;------------------------------------------------------------
                           000130   521 	G$get4b6bsymbol$0$0 ==.
                           000130   522 	C$crc_4b6b.c$58$1$18 ==.
                                    523 ;	crc_4b6b.c:58: char get4b6bsymbol( char inSymbol ) {
                                    524 ;	-----------------------------------------
                                    525 ;	 function get4b6bsymbol
                                    526 ;	-----------------------------------------
      000130                        527 _get4b6bsymbol:
                           000130   528 	C$crc_4b6b.c$59$1$21 ==.
                                    529 ;	crc_4b6b.c:59: switch( inSymbol ) {
      000130 E5 82            [12]  530 	mov	a,dpl
      000132 FF               [12]  531 	mov	r7,a
      000133 30 E7 03         [24]  532 	jnb	acc.7,00127$
      000136 02r01rC6         [24]  533 	ljmp	00117$
      000139                        534 00127$:
      000139 C3               [12]  535 	clr	c
      00013A 74 8F            [12]  536 	mov	a,#(0x0F ^ 0x80)
      00013C 8F F0            [24]  537 	mov	b,r7
      00013E 63 F0 80         [24]  538 	xrl	b,#0x80
      000141 95 F0            [12]  539 	subb	a,b
      000143 50 03            [24]  540 	jnc	00128$
      000145 02r01rC6         [24]  541 	ljmp	00117$
      000148                        542 00128$:
      000148 EF               [12]  543 	mov	a,r7
      000149 24 0A            [12]  544 	add	a,#(00129$-3-.)
      00014B 83               [24]  545 	movc	a,@a+pc
      00014C F5 82            [12]  546 	mov	dpl,a
      00014E EF               [12]  547 	mov	a,r7
      00014F 24 14            [12]  548 	add	a,#(00130$-3-.)
      000151 83               [24]  549 	movc	a,@a+pc
      000152 F5 83            [12]  550 	mov	dph,a
      000154 E4               [12]  551 	clr	a
      000155 73               [24]  552 	jmp	@a+dptr
      000156                        553 00129$:
      000156r76                     554 	.db	00101$
      000157r7B                     555 	.db	00102$
      000158r80                     556 	.db	00103$
      000159r85                     557 	.db	00104$
      00015Ar8A                     558 	.db	00105$
      00015Br8F                     559 	.db	00106$
      00015Cr94                     560 	.db	00107$
      00015Dr99                     561 	.db	00108$
      00015Er9E                     562 	.db	00109$
      00015FrA3                     563 	.db	00110$
      000160rA8                     564 	.db	00111$
      000161rAD                     565 	.db	00112$
      000162rB2                     566 	.db	00113$
      000163rB7                     567 	.db	00114$
      000164rBC                     568 	.db	00115$
      000165rC1                     569 	.db	00116$
      000166                        570 00130$:
      000166s01                     571 	.db	00101$>>8
      000167s01                     572 	.db	00102$>>8
      000168s01                     573 	.db	00103$>>8
      000169s01                     574 	.db	00104$>>8
      00016As01                     575 	.db	00105$>>8
      00016Bs01                     576 	.db	00106$>>8
      00016Cs01                     577 	.db	00107$>>8
      00016Ds01                     578 	.db	00108$>>8
      00016Es01                     579 	.db	00109$>>8
      00016Fs01                     580 	.db	00110$>>8
      000170s01                     581 	.db	00111$>>8
      000171s01                     582 	.db	00112$>>8
      000172s01                     583 	.db	00113$>>8
      000173s01                     584 	.db	00114$>>8
      000174s01                     585 	.db	00115$>>8
      000175s01                     586 	.db	00116$>>8
                           000176   587 	C$crc_4b6b.c$60$2$22 ==.
                                    588 ;	crc_4b6b.c:60: case 0x00: return 0x15;
      000176                        589 00101$:
      000176 75 82 15         [24]  590 	mov	dpl,#0x15
                           000179   591 	C$crc_4b6b.c$61$2$22 ==.
                                    592 ;	crc_4b6b.c:61: case 0x01: return 0x31;
      000179 80 4E            [24]  593 	sjmp	00119$
      00017B                        594 00102$:
      00017B 75 82 31         [24]  595 	mov	dpl,#0x31
                           00017E   596 	C$crc_4b6b.c$62$2$22 ==.
                                    597 ;	crc_4b6b.c:62: case 0x02: return 0x32;
      00017E 80 49            [24]  598 	sjmp	00119$
      000180                        599 00103$:
      000180 75 82 32         [24]  600 	mov	dpl,#0x32
                           000183   601 	C$crc_4b6b.c$63$2$22 ==.
                                    602 ;	crc_4b6b.c:63: case 0x03: return 0x23;
      000183 80 44            [24]  603 	sjmp	00119$
      000185                        604 00104$:
      000185 75 82 23         [24]  605 	mov	dpl,#0x23
                           000188   606 	C$crc_4b6b.c$64$2$22 ==.
                                    607 ;	crc_4b6b.c:64: case 0x04: return 0x34;
      000188 80 3F            [24]  608 	sjmp	00119$
      00018A                        609 00105$:
      00018A 75 82 34         [24]  610 	mov	dpl,#0x34
                           00018D   611 	C$crc_4b6b.c$65$2$22 ==.
                                    612 ;	crc_4b6b.c:65: case 0x05: return 0x25;
      00018D 80 3A            [24]  613 	sjmp	00119$
      00018F                        614 00106$:
      00018F 75 82 25         [24]  615 	mov	dpl,#0x25
                           000192   616 	C$crc_4b6b.c$66$2$22 ==.
                                    617 ;	crc_4b6b.c:66: case 0x06: return 0x26;
      000192 80 35            [24]  618 	sjmp	00119$
      000194                        619 00107$:
      000194 75 82 26         [24]  620 	mov	dpl,#0x26
                           000197   621 	C$crc_4b6b.c$67$2$22 ==.
                                    622 ;	crc_4b6b.c:67: case 0x07: return 0x16;
      000197 80 30            [24]  623 	sjmp	00119$
      000199                        624 00108$:
      000199 75 82 16         [24]  625 	mov	dpl,#0x16
                           00019C   626 	C$crc_4b6b.c$68$2$22 ==.
                                    627 ;	crc_4b6b.c:68: case 0x08: return 0x1A;
      00019C 80 2B            [24]  628 	sjmp	00119$
      00019E                        629 00109$:
      00019E 75 82 1A         [24]  630 	mov	dpl,#0x1A
                           0001A1   631 	C$crc_4b6b.c$69$2$22 ==.
                                    632 ;	crc_4b6b.c:69: case 0x09: return 0x19;
      0001A1 80 26            [24]  633 	sjmp	00119$
      0001A3                        634 00110$:
      0001A3 75 82 19         [24]  635 	mov	dpl,#0x19
                           0001A6   636 	C$crc_4b6b.c$70$2$22 ==.
                                    637 ;	crc_4b6b.c:70: case 0x0A: return 0x2A;
      0001A6 80 21            [24]  638 	sjmp	00119$
      0001A8                        639 00111$:
      0001A8 75 82 2A         [24]  640 	mov	dpl,#0x2A
                           0001AB   641 	C$crc_4b6b.c$71$2$22 ==.
                                    642 ;	crc_4b6b.c:71: case 0x0B: return 0x0B;
      0001AB 80 1C            [24]  643 	sjmp	00119$
      0001AD                        644 00112$:
      0001AD 75 82 0B         [24]  645 	mov	dpl,#0x0B
                           0001B0   646 	C$crc_4b6b.c$72$2$22 ==.
                                    647 ;	crc_4b6b.c:72: case 0x0C: return 0x2C;
      0001B0 80 17            [24]  648 	sjmp	00119$
      0001B2                        649 00113$:
      0001B2 75 82 2C         [24]  650 	mov	dpl,#0x2C
                           0001B5   651 	C$crc_4b6b.c$73$2$22 ==.
                                    652 ;	crc_4b6b.c:73: case 0x0D: return 0x0D;
      0001B5 80 12            [24]  653 	sjmp	00119$
      0001B7                        654 00114$:
      0001B7 75 82 0D         [24]  655 	mov	dpl,#0x0D
                           0001BA   656 	C$crc_4b6b.c$74$2$22 ==.
                                    657 ;	crc_4b6b.c:74: case 0x0E: return 0x0E;
      0001BA 80 0D            [24]  658 	sjmp	00119$
      0001BC                        659 00115$:
      0001BC 75 82 0E         [24]  660 	mov	dpl,#0x0E
                           0001BF   661 	C$crc_4b6b.c$75$2$22 ==.
                                    662 ;	crc_4b6b.c:75: case 0x0F: return 0x1C;
      0001BF 80 08            [24]  663 	sjmp	00119$
      0001C1                        664 00116$:
      0001C1 75 82 1C         [24]  665 	mov	dpl,#0x1C
                           0001C4   666 	C$crc_4b6b.c$76$2$22 ==.
                                    667 ;	crc_4b6b.c:76: default:   return 0x00;
      0001C4 80 03            [24]  668 	sjmp	00119$
      0001C6                        669 00117$:
      0001C6 75 82 00         [24]  670 	mov	dpl,#0x00
                           0001C9   671 	C$crc_4b6b.c$77$1$21 ==.
                                    672 ;	crc_4b6b.c:77: }
      0001C9                        673 00119$:
                           0001C9   674 	C$crc_4b6b.c$78$1$21 ==.
                           0001C9   675 	XG$get4b6bsymbol$0$0 ==.
      0001C9 22               [24]  676 	ret
                                    677 ;------------------------------------------------------------
                                    678 ;Allocation info for local variables in function 'decode4b6bsymbol'
                                    679 ;------------------------------------------------------------
                                    680 ;outSymbol                 Allocated with name '_decode4b6bsymbol_PARM_2'
                                    681 ;inSymbol                  Allocated to registers r7 
                                    682 ;------------------------------------------------------------
                           0001CA   683 	G$decode4b6bsymbol$0$0 ==.
                           0001CA   684 	C$crc_4b6b.c$80$1$21 ==.
                                    685 ;	crc_4b6b.c:80: char decode4b6bsymbol( char inSymbol, char *outSymbol ) {
                                    686 ;	-----------------------------------------
                                    687 ;	 function decode4b6bsymbol
                                    688 ;	-----------------------------------------
      0001CA                        689 _decode4b6bsymbol:
      0001CA AF 82            [24]  690 	mov	r7,dpl
                           0001CC   691 	C$crc_4b6b.c$81$1$24 ==.
                                    692 ;	crc_4b6b.c:81: switch( inSymbol ) {
      0001CC BF 0B 03         [24]  693 	cjne	r7,#0x0B,00169$
      0001CF 02r03r26         [24]  694 	ljmp	00112$
      0001D2                        695 00169$:
      0001D2 BF 0D 03         [24]  696 	cjne	r7,#0x0D,00170$
      0001D5 02r03r52         [24]  697 	ljmp	00114$
      0001D8                        698 00170$:
      0001D8 BF 0E 03         [24]  699 	cjne	r7,#0x0E,00171$
      0001DB 02r03r68         [24]  700 	ljmp	00115$
      0001DE                        701 00171$:
      0001DE BF 15 02         [24]  702 	cjne	r7,#0x15,00172$
      0001E1 80 47            [24]  703 	sjmp	00101$
      0001E3                        704 00172$:
      0001E3 BF 16 03         [24]  705 	cjne	r7,#0x16,00173$
      0001E6 02r02rCA         [24]  706 	ljmp	00108$
      0001E9                        707 00173$:
      0001E9 BF 19 03         [24]  708 	cjne	r7,#0x19,00174$
      0001EC 02r02rF8         [24]  709 	ljmp	00110$
      0001EF                        710 00174$:
      0001EF BF 1A 03         [24]  711 	cjne	r7,#0x1A,00175$
      0001F2 02r02rE1         [24]  712 	ljmp	00109$
      0001F5                        713 00175$:
      0001F5 BF 1C 03         [24]  714 	cjne	r7,#0x1C,00176$
      0001F8 02r03r7E         [24]  715 	ljmp	00116$
      0001FB                        716 00176$:
      0001FB BF 23 02         [24]  717 	cjne	r7,#0x23,00177$
      0001FE 80 6E            [24]  718 	sjmp	00104$
      000200                        719 00177$:
      000200 BF 25 03         [24]  720 	cjne	r7,#0x25,00178$
      000203 02r02r9C         [24]  721 	ljmp	00106$
      000206                        722 00178$:
      000206 BF 26 03         [24]  723 	cjne	r7,#0x26,00179$
      000209 02r02rB3         [24]  724 	ljmp	00107$
      00020C                        725 00179$:
      00020C BF 2A 03         [24]  726 	cjne	r7,#0x2A,00180$
      00020F 02r03r0F         [24]  727 	ljmp	00111$
      000212                        728 00180$:
      000212 BF 2C 03         [24]  729 	cjne	r7,#0x2C,00181$
      000215 02r03r3C         [24]  730 	ljmp	00113$
      000218                        731 00181$:
      000218 BF 31 02         [24]  732 	cjne	r7,#0x31,00182$
      00021B 80 23            [24]  733 	sjmp	00102$
      00021D                        734 00182$:
      00021D BF 32 02         [24]  735 	cjne	r7,#0x32,00183$
      000220 80 35            [24]  736 	sjmp	00103$
      000222                        737 00183$:
      000222 BF 34 02         [24]  738 	cjne	r7,#0x34,00184$
      000225 80 5E            [24]  739 	sjmp	00105$
      000227                        740 00184$:
      000227 02r03r94         [24]  741 	ljmp	00117$
                           00022A   742 	C$crc_4b6b.c$82$2$25 ==.
                                    743 ;	crc_4b6b.c:82: case 0x15: {*outSymbol = 0x00; return(0); }
      00022A                        744 00101$:
      00022A AD*00            [24]  745 	mov	r5,_decode4b6bsymbol_PARM_2
      00022C AE*01            [24]  746 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      00022E AF*02            [24]  747 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      000230 8D 82            [24]  748 	mov	dpl,r5
      000232 8E 83            [24]  749 	mov	dph,r6
      000234 8F F0            [24]  750 	mov	b,r7
      000236 E4               [12]  751 	clr	a
      000237 12r00r00         [24]  752 	lcall	__gptrput
      00023A 75 82 00         [24]  753 	mov	dpl,#0x00
      00023D 02r03rA7         [24]  754 	ljmp	00119$
                           000240   755 	C$crc_4b6b.c$83$2$25 ==.
                                    756 ;	crc_4b6b.c:83: case 0x31: {*outSymbol = 0x01; return(0); }
      000240                        757 00102$:
      000240 AD*00            [24]  758 	mov	r5,_decode4b6bsymbol_PARM_2
      000242 AE*01            [24]  759 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      000244 AF*02            [24]  760 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      000246 8D 82            [24]  761 	mov	dpl,r5
      000248 8E 83            [24]  762 	mov	dph,r6
      00024A 8F F0            [24]  763 	mov	b,r7
      00024C 74 01            [12]  764 	mov	a,#0x01
      00024E 12r00r00         [24]  765 	lcall	__gptrput
      000251 75 82 00         [24]  766 	mov	dpl,#0x00
      000254 02r03rA7         [24]  767 	ljmp	00119$
                           000257   768 	C$crc_4b6b.c$84$2$25 ==.
                                    769 ;	crc_4b6b.c:84: case 0x32: {*outSymbol = 0x02; return(0); }
      000257                        770 00103$:
      000257 AD*00            [24]  771 	mov	r5,_decode4b6bsymbol_PARM_2
      000259 AE*01            [24]  772 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      00025B AF*02            [24]  773 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      00025D 8D 82            [24]  774 	mov	dpl,r5
      00025F 8E 83            [24]  775 	mov	dph,r6
      000261 8F F0            [24]  776 	mov	b,r7
      000263 74 02            [12]  777 	mov	a,#0x02
      000265 12r00r00         [24]  778 	lcall	__gptrput
      000268 75 82 00         [24]  779 	mov	dpl,#0x00
      00026B 02r03rA7         [24]  780 	ljmp	00119$
                           00026E   781 	C$crc_4b6b.c$85$2$25 ==.
                                    782 ;	crc_4b6b.c:85: case 0x23: {*outSymbol = 0x03; return(0); }
      00026E                        783 00104$:
      00026E AD*00            [24]  784 	mov	r5,_decode4b6bsymbol_PARM_2
      000270 AE*01            [24]  785 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      000272 AF*02            [24]  786 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      000274 8D 82            [24]  787 	mov	dpl,r5
      000276 8E 83            [24]  788 	mov	dph,r6
      000278 8F F0            [24]  789 	mov	b,r7
      00027A 74 03            [12]  790 	mov	a,#0x03
      00027C 12r00r00         [24]  791 	lcall	__gptrput
      00027F 75 82 00         [24]  792 	mov	dpl,#0x00
      000282 02r03rA7         [24]  793 	ljmp	00119$
                           000285   794 	C$crc_4b6b.c$86$2$25 ==.
                                    795 ;	crc_4b6b.c:86: case 0x34: {*outSymbol = 0x04; return(0); }
      000285                        796 00105$:
      000285 AD*00            [24]  797 	mov	r5,_decode4b6bsymbol_PARM_2
      000287 AE*01            [24]  798 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      000289 AF*02            [24]  799 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      00028B 8D 82            [24]  800 	mov	dpl,r5
      00028D 8E 83            [24]  801 	mov	dph,r6
      00028F 8F F0            [24]  802 	mov	b,r7
      000291 74 04            [12]  803 	mov	a,#0x04
      000293 12r00r00         [24]  804 	lcall	__gptrput
      000296 75 82 00         [24]  805 	mov	dpl,#0x00
      000299 02r03rA7         [24]  806 	ljmp	00119$
                           00029C   807 	C$crc_4b6b.c$87$2$25 ==.
                                    808 ;	crc_4b6b.c:87: case 0x25: {*outSymbol = 0x05; return(0); }
      00029C                        809 00106$:
      00029C AD*00            [24]  810 	mov	r5,_decode4b6bsymbol_PARM_2
      00029E AE*01            [24]  811 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      0002A0 AF*02            [24]  812 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      0002A2 8D 82            [24]  813 	mov	dpl,r5
      0002A4 8E 83            [24]  814 	mov	dph,r6
      0002A6 8F F0            [24]  815 	mov	b,r7
      0002A8 74 05            [12]  816 	mov	a,#0x05
      0002AA 12r00r00         [24]  817 	lcall	__gptrput
      0002AD 75 82 00         [24]  818 	mov	dpl,#0x00
      0002B0 02r03rA7         [24]  819 	ljmp	00119$
                           0002B3   820 	C$crc_4b6b.c$88$2$25 ==.
                                    821 ;	crc_4b6b.c:88: case 0x26: {*outSymbol = 0x06; return(0); }
      0002B3                        822 00107$:
      0002B3 AD*00            [24]  823 	mov	r5,_decode4b6bsymbol_PARM_2
      0002B5 AE*01            [24]  824 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      0002B7 AF*02            [24]  825 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      0002B9 8D 82            [24]  826 	mov	dpl,r5
      0002BB 8E 83            [24]  827 	mov	dph,r6
      0002BD 8F F0            [24]  828 	mov	b,r7
      0002BF 74 06            [12]  829 	mov	a,#0x06
      0002C1 12r00r00         [24]  830 	lcall	__gptrput
      0002C4 75 82 00         [24]  831 	mov	dpl,#0x00
      0002C7 02r03rA7         [24]  832 	ljmp	00119$
                           0002CA   833 	C$crc_4b6b.c$89$2$25 ==.
                                    834 ;	crc_4b6b.c:89: case 0x16: {*outSymbol = 0x07; return(0); }
      0002CA                        835 00108$:
      0002CA AD*00            [24]  836 	mov	r5,_decode4b6bsymbol_PARM_2
      0002CC AE*01            [24]  837 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      0002CE AF*02            [24]  838 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      0002D0 8D 82            [24]  839 	mov	dpl,r5
      0002D2 8E 83            [24]  840 	mov	dph,r6
      0002D4 8F F0            [24]  841 	mov	b,r7
      0002D6 74 07            [12]  842 	mov	a,#0x07
      0002D8 12r00r00         [24]  843 	lcall	__gptrput
      0002DB 75 82 00         [24]  844 	mov	dpl,#0x00
      0002DE 02r03rA7         [24]  845 	ljmp	00119$
                           0002E1   846 	C$crc_4b6b.c$90$2$25 ==.
                                    847 ;	crc_4b6b.c:90: case 0x1A: {*outSymbol = 0x08; return(0); }
      0002E1                        848 00109$:
      0002E1 AD*00            [24]  849 	mov	r5,_decode4b6bsymbol_PARM_2
      0002E3 AE*01            [24]  850 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      0002E5 AF*02            [24]  851 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      0002E7 8D 82            [24]  852 	mov	dpl,r5
      0002E9 8E 83            [24]  853 	mov	dph,r6
      0002EB 8F F0            [24]  854 	mov	b,r7
      0002ED 74 08            [12]  855 	mov	a,#0x08
      0002EF 12r00r00         [24]  856 	lcall	__gptrput
      0002F2 75 82 00         [24]  857 	mov	dpl,#0x00
      0002F5 02r03rA7         [24]  858 	ljmp	00119$
                           0002F8   859 	C$crc_4b6b.c$91$2$25 ==.
                                    860 ;	crc_4b6b.c:91: case 0x19: {*outSymbol = 0x09; return(0); }
      0002F8                        861 00110$:
      0002F8 AD*00            [24]  862 	mov	r5,_decode4b6bsymbol_PARM_2
      0002FA AE*01            [24]  863 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      0002FC AF*02            [24]  864 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      0002FE 8D 82            [24]  865 	mov	dpl,r5
      000300 8E 83            [24]  866 	mov	dph,r6
      000302 8F F0            [24]  867 	mov	b,r7
      000304 74 09            [12]  868 	mov	a,#0x09
      000306 12r00r00         [24]  869 	lcall	__gptrput
      000309 75 82 00         [24]  870 	mov	dpl,#0x00
      00030C 02r03rA7         [24]  871 	ljmp	00119$
                           00030F   872 	C$crc_4b6b.c$92$2$25 ==.
                                    873 ;	crc_4b6b.c:92: case 0x2A: {*outSymbol = 0x0A; return(0); }
      00030F                        874 00111$:
      00030F AD*00            [24]  875 	mov	r5,_decode4b6bsymbol_PARM_2
      000311 AE*01            [24]  876 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      000313 AF*02            [24]  877 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      000315 8D 82            [24]  878 	mov	dpl,r5
      000317 8E 83            [24]  879 	mov	dph,r6
      000319 8F F0            [24]  880 	mov	b,r7
      00031B 74 0A            [12]  881 	mov	a,#0x0A
      00031D 12r00r00         [24]  882 	lcall	__gptrput
      000320 75 82 00         [24]  883 	mov	dpl,#0x00
      000323 02r03rA7         [24]  884 	ljmp	00119$
                           000326   885 	C$crc_4b6b.c$93$2$25 ==.
                                    886 ;	crc_4b6b.c:93: case 0x0B: {*outSymbol = 0x0B; return(0); }
      000326                        887 00112$:
      000326 AD*00            [24]  888 	mov	r5,_decode4b6bsymbol_PARM_2
      000328 AE*01            [24]  889 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      00032A AF*02            [24]  890 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      00032C 8D 82            [24]  891 	mov	dpl,r5
      00032E 8E 83            [24]  892 	mov	dph,r6
      000330 8F F0            [24]  893 	mov	b,r7
      000332 74 0B            [12]  894 	mov	a,#0x0B
      000334 12r00r00         [24]  895 	lcall	__gptrput
      000337 75 82 00         [24]  896 	mov	dpl,#0x00
                           00033A   897 	C$crc_4b6b.c$94$2$25 ==.
                                    898 ;	crc_4b6b.c:94: case 0x2C: {*outSymbol = 0x0C; return(0); }
      00033A 80 6B            [24]  899 	sjmp	00119$
      00033C                        900 00113$:
      00033C AD*00            [24]  901 	mov	r5,_decode4b6bsymbol_PARM_2
      00033E AE*01            [24]  902 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      000340 AF*02            [24]  903 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      000342 8D 82            [24]  904 	mov	dpl,r5
      000344 8E 83            [24]  905 	mov	dph,r6
      000346 8F F0            [24]  906 	mov	b,r7
      000348 74 0C            [12]  907 	mov	a,#0x0C
      00034A 12r00r00         [24]  908 	lcall	__gptrput
      00034D 75 82 00         [24]  909 	mov	dpl,#0x00
                           000350   910 	C$crc_4b6b.c$95$2$25 ==.
                                    911 ;	crc_4b6b.c:95: case 0x0D: {*outSymbol = 0x0D; return(0); }
      000350 80 55            [24]  912 	sjmp	00119$
      000352                        913 00114$:
      000352 AD*00            [24]  914 	mov	r5,_decode4b6bsymbol_PARM_2
      000354 AE*01            [24]  915 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      000356 AF*02            [24]  916 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      000358 8D 82            [24]  917 	mov	dpl,r5
      00035A 8E 83            [24]  918 	mov	dph,r6
      00035C 8F F0            [24]  919 	mov	b,r7
      00035E 74 0D            [12]  920 	mov	a,#0x0D
      000360 12r00r00         [24]  921 	lcall	__gptrput
      000363 75 82 00         [24]  922 	mov	dpl,#0x00
                           000366   923 	C$crc_4b6b.c$96$2$25 ==.
                                    924 ;	crc_4b6b.c:96: case 0x0E: {*outSymbol = 0x0E; return(0); }
      000366 80 3F            [24]  925 	sjmp	00119$
      000368                        926 00115$:
      000368 AD*00            [24]  927 	mov	r5,_decode4b6bsymbol_PARM_2
      00036A AE*01            [24]  928 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      00036C AF*02            [24]  929 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      00036E 8D 82            [24]  930 	mov	dpl,r5
      000370 8E 83            [24]  931 	mov	dph,r6
      000372 8F F0            [24]  932 	mov	b,r7
      000374 74 0E            [12]  933 	mov	a,#0x0E
      000376 12r00r00         [24]  934 	lcall	__gptrput
      000379 75 82 00         [24]  935 	mov	dpl,#0x00
                           00037C   936 	C$crc_4b6b.c$97$2$25 ==.
                                    937 ;	crc_4b6b.c:97: case 0x1C: {*outSymbol = 0x0F; return(0); }
      00037C 80 29            [24]  938 	sjmp	00119$
      00037E                        939 00116$:
      00037E AD*00            [24]  940 	mov	r5,_decode4b6bsymbol_PARM_2
      000380 AE*01            [24]  941 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      000382 AF*02            [24]  942 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      000384 8D 82            [24]  943 	mov	dpl,r5
      000386 8E 83            [24]  944 	mov	dph,r6
      000388 8F F0            [24]  945 	mov	b,r7
      00038A 74 0F            [12]  946 	mov	a,#0x0F
      00038C 12r00r00         [24]  947 	lcall	__gptrput
      00038F 75 82 00         [24]  948 	mov	dpl,#0x00
                           000392   949 	C$crc_4b6b.c$98$2$25 ==.
                                    950 ;	crc_4b6b.c:98: default:   {*outSymbol = 0x00; return(1); }
      000392 80 13            [24]  951 	sjmp	00119$
      000394                        952 00117$:
      000394 AD*00            [24]  953 	mov	r5,_decode4b6bsymbol_PARM_2
      000396 AE*01            [24]  954 	mov	r6,(_decode4b6bsymbol_PARM_2 + 1)
      000398 AF*02            [24]  955 	mov	r7,(_decode4b6bsymbol_PARM_2 + 2)
      00039A 8D 82            [24]  956 	mov	dpl,r5
      00039C 8E 83            [24]  957 	mov	dph,r6
      00039E 8F F0            [24]  958 	mov	b,r7
      0003A0 E4               [12]  959 	clr	a
      0003A1 12r00r00         [24]  960 	lcall	__gptrput
      0003A4 75 82 01         [24]  961 	mov	dpl,#0x01
                           0003A7   962 	C$crc_4b6b.c$99$1$24 ==.
                                    963 ;	crc_4b6b.c:99: }
      0003A7                        964 00119$:
                           0003A7   965 	C$crc_4b6b.c$100$1$24 ==.
                           0003A7   966 	XG$decode4b6bsymbol$0$0 ==.
      0003A7 22               [24]  967 	ret
                                    968 ;------------------------------------------------------------
                                    969 ;Allocation info for local variables in function 'encode4b6b'
                                    970 ;------------------------------------------------------------
                                    971 ;bytesIn                   Allocated with name '_encode4b6b_PARM_2'
                                    972 ;messageOut                Allocated with name '_encode4b6b_PARM_3'
                                    973 ;bytesOut                  Allocated with name '_encode4b6b_PARM_4'
                                    974 ;messageIn                 Allocated with name '_encode4b6b_messageIn_1_43'
                                    975 ;i                         Allocated with name '_encode4b6b_i_1_44'
                                    976 ;j                         Allocated with name '_encode4b6b_j_1_44'
                                    977 ;intBuffer                 Allocated with name '_encode4b6b_intBuffer_1_44'
                                    978 ;mask                      Allocated to registers r6 r7 
                                    979 ;intBitsAvailable          Allocated with name '_encode4b6b_intBitsAvailable_1_44'
                                    980 ;symbol                    Allocated with name '_encode4b6b_symbol_1_44'
                                    981 ;sloc0                     Allocated with name '_encode4b6b_sloc0_1_0'
                                    982 ;------------------------------------------------------------
                           0003A8   983 	G$encode4b6b$0$0 ==.
                           0003A8   984 	C$crc_4b6b.c$102$1$24 ==.
                                    985 ;	crc_4b6b.c:102: void encode4b6b( char *messageIn, unsigned int bytesIn, char *messageOut, unsigned int *bytesOut ) {
                                    986 ;	-----------------------------------------
                                    987 ;	 function encode4b6b
                                    988 ;	-----------------------------------------
      0003A8                        989 _encode4b6b:
      0003A8 85 82*08         [24]  990 	mov	_encode4b6b_messageIn_1_43,dpl
      0003AB 85 83*09         [24]  991 	mov	(_encode4b6b_messageIn_1_43 + 1),dph
      0003AE 85 F0*0A         [24]  992 	mov	(_encode4b6b_messageIn_1_43 + 2),b
                           0003B1   993 	C$crc_4b6b.c$110$1$44 ==.
                                    994 ;	crc_4b6b.c:110: *bytesOut = 0;
      0003B1 AA*05            [24]  995 	mov	r2,_encode4b6b_PARM_4
      0003B3 AB*06            [24]  996 	mov	r3,(_encode4b6b_PARM_4 + 1)
      0003B5 AC*07            [24]  997 	mov	r4,(_encode4b6b_PARM_4 + 2)
      0003B7 8A 82            [24]  998 	mov	dpl,r2
      0003B9 8B 83            [24]  999 	mov	dph,r3
      0003BB 8C F0            [24] 1000 	mov	b,r4
      0003BD E4               [12] 1001 	clr	a
      0003BE 12r00r00         [24] 1002 	lcall	__gptrput
      0003C1 A3               [24] 1003 	inc	dptr
      0003C2 12r00r00         [24] 1004 	lcall	__gptrput
                           0003C5  1005 	C$crc_4b6b.c$111$1$44 ==.
                                   1006 ;	crc_4b6b.c:111: intBitsAvailable = 0;
      0003C5 F5*11            [12] 1007 	mov	_encode4b6b_intBitsAvailable_1_44,a
      0003C7 F5*12            [12] 1008 	mov	(_encode4b6b_intBitsAvailable_1_44 + 1),a
                           0003C9  1009 	C$crc_4b6b.c$112$1$44 ==.
                                   1010 ;	crc_4b6b.c:112: intBuffer = 0;
      0003C9 F5*0F            [12] 1011 	mov	_encode4b6b_intBuffer_1_44,a
      0003CB F5*10            [12] 1012 	mov	(_encode4b6b_intBuffer_1_44 + 1),a
                           0003CD  1013 	C$crc_4b6b.c$114$1$44 ==.
                                   1014 ;	crc_4b6b.c:114: for( i = 0; i < bytesIn * 2; i++ ) {
      0003CD 85*00*14         [24] 1015 	mov	_encode4b6b_sloc0_1_0,_encode4b6b_PARM_2
      0003D0 E5*01            [12] 1016 	mov	a,(_encode4b6b_PARM_2 + 1)
      0003D2 C5*14            [12] 1017 	xch	a,_encode4b6b_sloc0_1_0
      0003D4 25 E0            [12] 1018 	add	a,acc
      0003D6 C5*14            [12] 1019 	xch	a,_encode4b6b_sloc0_1_0
      0003D8 33               [12] 1020 	rlc	a
      0003D9 F5*15            [12] 1021 	mov	(_encode4b6b_sloc0_1_0 + 1),a
      0003DB E4               [12] 1022 	clr	a
      0003DC F5*0B            [12] 1023 	mov	_encode4b6b_i_1_44,a
      0003DE F5*0C            [12] 1024 	mov	(_encode4b6b_i_1_44 + 1),a
      0003E0                       1025 00110$:
      0003E0 C3               [12] 1026 	clr	c
      0003E1 E5*0B            [12] 1027 	mov	a,_encode4b6b_i_1_44
      0003E3 95*14            [12] 1028 	subb	a,_encode4b6b_sloc0_1_0
      0003E5 E5*0C            [12] 1029 	mov	a,(_encode4b6b_i_1_44 + 1)
      0003E7 95*15            [12] 1030 	subb	a,(_encode4b6b_sloc0_1_0 + 1)
      0003E9 40 03            [24] 1031 	jc	00130$
      0003EB 02r05r3F         [24] 1032 	ljmp	00106$
      0003EE                       1033 00130$:
                           0003EE  1034 	C$crc_4b6b.c$115$2$45 ==.
                                   1035 ;	crc_4b6b.c:115: j = i >> 1;
      0003EE 85*0B*0D         [24] 1036 	mov	_encode4b6b_j_1_44,_encode4b6b_i_1_44
      0003F1 E5*0C            [12] 1037 	mov	a,(_encode4b6b_i_1_44 + 1)
      0003F3 C3               [12] 1038 	clr	c
      0003F4 13               [12] 1039 	rrc	a
      0003F5 C5*0D            [12] 1040 	xch	a,_encode4b6b_j_1_44
      0003F7 13               [12] 1041 	rrc	a
      0003F8 C5*0D            [12] 1042 	xch	a,_encode4b6b_j_1_44
                           0003FA  1043 	C$crc_4b6b.c$116$2$45 ==.
                                   1044 ;	crc_4b6b.c:116: if( j * 2 == i ) {
      0003FA F5*0E            [12] 1045 	mov	(_encode4b6b_j_1_44 + 1),a
      0003FC A9*0D            [24] 1046 	mov	r1,_encode4b6b_j_1_44
      0003FE C9               [12] 1047 	xch	a,r1
      0003FF 25 E0            [12] 1048 	add	a,acc
      000401 C9               [12] 1049 	xch	a,r1
      000402 33               [12] 1050 	rlc	a
      000403 FD               [12] 1051 	mov	r5,a
      000404 E9               [12] 1052 	mov	a,r1
      000405 B5*0B 2A         [24] 1053 	cjne	a,_encode4b6b_i_1_44,00102$
      000408 ED               [12] 1054 	mov	a,r5
      000409 B5*0C 26         [24] 1055 	cjne	a,(_encode4b6b_i_1_44 + 1),00102$
                           00040C  1056 	C$crc_4b6b.c$117$3$46 ==.
                                   1057 ;	crc_4b6b.c:117: symbol = (messageIn[j] >> 4) & 0x0F;
      00040C E5*0D            [12] 1058 	mov	a,_encode4b6b_j_1_44
      00040E 25*08            [12] 1059 	add	a,_encode4b6b_messageIn_1_43
      000410 F8               [12] 1060 	mov	r0,a
      000411 E5*0E            [12] 1061 	mov	a,(_encode4b6b_j_1_44 + 1)
      000413 35*09            [12] 1062 	addc	a,(_encode4b6b_messageIn_1_43 + 1)
      000415 F9               [12] 1063 	mov	r1,a
      000416 AD*0A            [24] 1064 	mov	r5,(_encode4b6b_messageIn_1_43 + 2)
      000418 88 82            [24] 1065 	mov	dpl,r0
      00041A 89 83            [24] 1066 	mov	dph,r1
      00041C 8D F0            [24] 1067 	mov	b,r5
      00041E 12r00r00         [24] 1068 	lcall	__gptrget
      000421 F8               [12] 1069 	mov	r0,a
      000422 C4               [12] 1070 	swap	a
      000423 54 0F            [12] 1071 	anl	a,#0x0F
      000425 30 E3 02         [24] 1072 	jnb	acc.3,00133$
      000428 44 F0            [12] 1073 	orl	a,#0xF0
      00042A                       1074 00133$:
      00042A F8               [12] 1075 	mov	r0,a
      00042B 74 0F            [12] 1076 	mov	a,#0x0F
      00042D 58               [12] 1077 	anl	a,r0
      00042E F5*13            [12] 1078 	mov	_encode4b6b_symbol_1_44,a
      000430 80 1B            [24] 1079 	sjmp	00103$
      000432                       1080 00102$:
                           000432  1081 	C$crc_4b6b.c$119$3$47 ==.
                                   1082 ;	crc_4b6b.c:119: symbol = messageIn[j] & 0x0F;
      000432 E5*0D            [12] 1083 	mov	a,_encode4b6b_j_1_44
      000434 25*08            [12] 1084 	add	a,_encode4b6b_messageIn_1_43
      000436 F8               [12] 1085 	mov	r0,a
      000437 E5*0E            [12] 1086 	mov	a,(_encode4b6b_j_1_44 + 1)
      000439 35*09            [12] 1087 	addc	a,(_encode4b6b_messageIn_1_43 + 1)
      00043B F9               [12] 1088 	mov	r1,a
      00043C AF*0A            [24] 1089 	mov	r7,(_encode4b6b_messageIn_1_43 + 2)
      00043E 88 82            [24] 1090 	mov	dpl,r0
      000440 89 83            [24] 1091 	mov	dph,r1
      000442 8F F0            [24] 1092 	mov	b,r7
      000444 12r00r00         [24] 1093 	lcall	__gptrget
      000447 F8               [12] 1094 	mov	r0,a
      000448 74 0F            [12] 1095 	mov	a,#0x0F
      00044A 58               [12] 1096 	anl	a,r0
      00044B F5*13            [12] 1097 	mov	_encode4b6b_symbol_1_44,a
      00044D                       1098 00103$:
                           00044D  1099 	C$crc_4b6b.c$121$2$45 ==.
                                   1100 ;	crc_4b6b.c:121: symbol = get4b6bsymbol( symbol );
      00044D 85*13 82         [24] 1101 	mov	dpl,_encode4b6b_symbol_1_44
      000450 C0 04            [24] 1102 	push	ar4
      000452 C0 03            [24] 1103 	push	ar3
      000454 C0 02            [24] 1104 	push	ar2
      000456 12r01r30         [24] 1105 	lcall	_get4b6bsymbol
      000459 85 82*13         [24] 1106 	mov	_encode4b6b_symbol_1_44,dpl
      00045C D0 02            [24] 1107 	pop	ar2
      00045E D0 03            [24] 1108 	pop	ar3
      000460 D0 04            [24] 1109 	pop	ar4
                           000462  1110 	C$crc_4b6b.c$122$2$45 ==.
                                   1111 ;	crc_4b6b.c:122: intBuffer = (intBuffer << 6) & 0xFFC0;
      000462 AE*0F            [24] 1112 	mov	r6,_encode4b6b_intBuffer_1_44
      000464 E5*10            [12] 1113 	mov	a,(_encode4b6b_intBuffer_1_44 + 1)
      000466 54 03            [12] 1114 	anl	a,#0x03
      000468 A2 E0            [12] 1115 	mov	c,acc.0
      00046A CE               [12] 1116 	xch	a,r6
      00046B 13               [12] 1117 	rrc	a
      00046C CE               [12] 1118 	xch	a,r6
      00046D 13               [12] 1119 	rrc	a
      00046E A2 E0            [12] 1120 	mov	c,acc.0
      000470 CE               [12] 1121 	xch	a,r6
      000471 13               [12] 1122 	rrc	a
      000472 CE               [12] 1123 	xch	a,r6
      000473 13               [12] 1124 	rrc	a
      000474 CE               [12] 1125 	xch	a,r6
      000475 FF               [12] 1126 	mov	r7,a
      000476 74 C0            [12] 1127 	mov	a,#0xC0
      000478 5E               [12] 1128 	anl	a,r6
      000479 F5*0F            [12] 1129 	mov	_encode4b6b_intBuffer_1_44,a
      00047B 8F*10            [24] 1130 	mov	(_encode4b6b_intBuffer_1_44 + 1),r7
                           00047D  1131 	C$crc_4b6b.c$123$2$45 ==.
                                   1132 ;	crc_4b6b.c:123: intBuffer = intBuffer | symbol;
      00047D E5*13            [12] 1133 	mov	a,_encode4b6b_symbol_1_44
      00047F FE               [12] 1134 	mov	r6,a
      000480 33               [12] 1135 	rlc	a
      000481 95 E0            [12] 1136 	subb	a,acc
      000483 FF               [12] 1137 	mov	r7,a
      000484 EE               [12] 1138 	mov	a,r6
      000485 42*0F            [12] 1139 	orl	_encode4b6b_intBuffer_1_44,a
      000487 EF               [12] 1140 	mov	a,r7
      000488 42*10            [12] 1141 	orl	(_encode4b6b_intBuffer_1_44 + 1),a
                           00048A  1142 	C$crc_4b6b.c$124$2$45 ==.
                                   1143 ;	crc_4b6b.c:124: intBitsAvailable += 6;
      00048A 74 06            [12] 1144 	mov	a,#0x06
      00048C 25*11            [12] 1145 	add	a,_encode4b6b_intBitsAvailable_1_44
      00048E F5*11            [12] 1146 	mov	_encode4b6b_intBitsAvailable_1_44,a
      000490 E4               [12] 1147 	clr	a
      000491 35*12            [12] 1148 	addc	a,(_encode4b6b_intBitsAvailable_1_44 + 1)
      000493 F5*12            [12] 1149 	mov	(_encode4b6b_intBitsAvailable_1_44 + 1),a
                           000495  1150 	C$crc_4b6b.c$125$2$45 ==.
                                   1151 ;	crc_4b6b.c:125: if( intBitsAvailable >= 8 ) {
      000495 C3               [12] 1152 	clr	c
      000496 E5*11            [12] 1153 	mov	a,_encode4b6b_intBitsAvailable_1_44
      000498 94 08            [12] 1154 	subb	a,#0x08
      00049A E5*12            [12] 1155 	mov	a,(_encode4b6b_intBitsAvailable_1_44 + 1)
      00049C 64 80            [12] 1156 	xrl	a,#0x80
      00049E 94 80            [12] 1157 	subb	a,#0x80
      0004A0 50 03            [24] 1158 	jnc	00134$
      0004A2 02r05r34         [24] 1159 	ljmp	00111$
      0004A5                       1160 00134$:
                           0004A5  1161 	C$crc_4b6b.c$126$3$48 ==.
                                   1162 ;	crc_4b6b.c:126: symbol = intBuffer >> (intBitsAvailable - 8);
      0004A5 E5*11            [12] 1163 	mov	a,_encode4b6b_intBitsAvailable_1_44
      0004A7 24 F8            [12] 1164 	add	a,#0xF8
      0004A9 FE               [12] 1165 	mov	r6,a
      0004AA E5*12            [12] 1166 	mov	a,(_encode4b6b_intBitsAvailable_1_44 + 1)
      0004AC 34 FF            [12] 1167 	addc	a,#0xFF
      0004AE FF               [12] 1168 	mov	r7,a
      0004AF 8E F0            [24] 1169 	mov	b,r6
      0004B1 05 F0            [12] 1170 	inc	b
      0004B3 A8*0F            [24] 1171 	mov	r0,_encode4b6b_intBuffer_1_44
      0004B5 E5*10            [12] 1172 	mov	a,(_encode4b6b_intBuffer_1_44 + 1)
      0004B7 F9               [12] 1173 	mov	r1,a
      0004B8 33               [12] 1174 	rlc	a
      0004B9 92 D2            [24] 1175 	mov	ov,c
      0004BB 80 08            [24] 1176 	sjmp	00136$
      0004BD                       1177 00135$:
      0004BD A2 D2            [12] 1178 	mov	c,ov
      0004BF E9               [12] 1179 	mov	a,r1
      0004C0 13               [12] 1180 	rrc	a
      0004C1 F9               [12] 1181 	mov	r1,a
      0004C2 E8               [12] 1182 	mov	a,r0
      0004C3 13               [12] 1183 	rrc	a
      0004C4 F8               [12] 1184 	mov	r0,a
      0004C5                       1185 00136$:
      0004C5 D5 F0 F5         [24] 1186 	djnz	b,00135$
      0004C8 88*13            [24] 1187 	mov	_encode4b6b_symbol_1_44,r0
                           0004CA  1188 	C$crc_4b6b.c$127$3$48 ==.
                                   1189 ;	crc_4b6b.c:127: messageOut[*bytesOut] = symbol;
      0004CA 8A 82            [24] 1190 	mov	dpl,r2
      0004CC 8B 83            [24] 1191 	mov	dph,r3
      0004CE 8C F0            [24] 1192 	mov	b,r4
      0004D0 12r00r00         [24] 1193 	lcall	__gptrget
      0004D3 F8               [12] 1194 	mov	r0,a
      0004D4 A3               [24] 1195 	inc	dptr
      0004D5 12r00r00         [24] 1196 	lcall	__gptrget
      0004D8 F9               [12] 1197 	mov	r1,a
      0004D9 E8               [12] 1198 	mov	a,r0
      0004DA 25*02            [12] 1199 	add	a,_encode4b6b_PARM_3
      0004DC F8               [12] 1200 	mov	r0,a
      0004DD E9               [12] 1201 	mov	a,r1
      0004DE 35*03            [12] 1202 	addc	a,(_encode4b6b_PARM_3 + 1)
      0004E0 F9               [12] 1203 	mov	r1,a
      0004E1 AD*04            [24] 1204 	mov	r5,(_encode4b6b_PARM_3 + 2)
      0004E3 88 82            [24] 1205 	mov	dpl,r0
      0004E5 89 83            [24] 1206 	mov	dph,r1
      0004E7 8D F0            [24] 1207 	mov	b,r5
      0004E9 E5*13            [12] 1208 	mov	a,_encode4b6b_symbol_1_44
      0004EB 12r00r00         [24] 1209 	lcall	__gptrput
                           0004EE  1210 	C$crc_4b6b.c$128$3$48 ==.
                                   1211 ;	crc_4b6b.c:128: (*bytesOut)++;
      0004EE 8A 82            [24] 1212 	mov	dpl,r2
      0004F0 8B 83            [24] 1213 	mov	dph,r3
      0004F2 8C F0            [24] 1214 	mov	b,r4
      0004F4 12r00r00         [24] 1215 	lcall	__gptrget
      0004F7 F9               [12] 1216 	mov	r1,a
      0004F8 A3               [24] 1217 	inc	dptr
      0004F9 12r00r00         [24] 1218 	lcall	__gptrget
      0004FC FD               [12] 1219 	mov	r5,a
      0004FD 09               [12] 1220 	inc	r1
      0004FE B9 00 01         [24] 1221 	cjne	r1,#0x00,00137$
      000501 0D               [12] 1222 	inc	r5
      000502                       1223 00137$:
      000502 8A 82            [24] 1224 	mov	dpl,r2
      000504 8B 83            [24] 1225 	mov	dph,r3
      000506 8C F0            [24] 1226 	mov	b,r4
      000508 E9               [12] 1227 	mov	a,r1
      000509 12r00r00         [24] 1228 	lcall	__gptrput
      00050C A3               [24] 1229 	inc	dptr
      00050D ED               [12] 1230 	mov	a,r5
      00050E 12r00r00         [24] 1231 	lcall	__gptrput
                           000511  1232 	C$crc_4b6b.c$129$3$48 ==.
                                   1233 ;	crc_4b6b.c:129: intBitsAvailable -= 8;
      000511 8E*11            [24] 1234 	mov	_encode4b6b_intBitsAvailable_1_44,r6
      000513 8F*12            [24] 1235 	mov	(_encode4b6b_intBitsAvailable_1_44 + 1),r7
                           000515  1236 	C$crc_4b6b.c$130$3$48 ==.
                                   1237 ;	crc_4b6b.c:130: mask = (1 << intBitsAvailable) - 1;
      000515 85*11 F0         [24] 1238 	mov	b,_encode4b6b_intBitsAvailable_1_44
      000518 05 F0            [12] 1239 	inc	b
      00051A 7E 01            [12] 1240 	mov	r6,#0x01
      00051C 7F 00            [12] 1241 	mov	r7,#0x00
      00051E 80 06            [24] 1242 	sjmp	00139$
      000520                       1243 00138$:
      000520 EE               [12] 1244 	mov	a,r6
      000521 2E               [12] 1245 	add	a,r6
      000522 FE               [12] 1246 	mov	r6,a
      000523 EF               [12] 1247 	mov	a,r7
      000524 33               [12] 1248 	rlc	a
      000525 FF               [12] 1249 	mov	r7,a
      000526                       1250 00139$:
      000526 D5 F0 F7         [24] 1251 	djnz	b,00138$
      000529 1E               [12] 1252 	dec	r6
      00052A BE FF 01         [24] 1253 	cjne	r6,#0xFF,00140$
      00052D 1F               [12] 1254 	dec	r7
      00052E                       1255 00140$:
                           00052E  1256 	C$crc_4b6b.c$131$3$48 ==.
                                   1257 ;	crc_4b6b.c:131: intBuffer = intBuffer & mask;
      00052E EE               [12] 1258 	mov	a,r6
      00052F 52*0F            [12] 1259 	anl	_encode4b6b_intBuffer_1_44,a
      000531 EF               [12] 1260 	mov	a,r7
      000532 52*10            [12] 1261 	anl	(_encode4b6b_intBuffer_1_44 + 1),a
      000534                       1262 00111$:
                           000534  1263 	C$crc_4b6b.c$114$1$44 ==.
                                   1264 ;	crc_4b6b.c:114: for( i = 0; i < bytesIn * 2; i++ ) {
      000534 05*0B            [12] 1265 	inc	_encode4b6b_i_1_44
      000536 E4               [12] 1266 	clr	a
      000537 B5*0B 02         [24] 1267 	cjne	a,_encode4b6b_i_1_44,00141$
      00053A 05*0C            [12] 1268 	inc	(_encode4b6b_i_1_44 + 1)
      00053C                       1269 00141$:
      00053C 02r03rE0         [24] 1270 	ljmp	00110$
      00053F                       1271 00106$:
                           00053F  1272 	C$crc_4b6b.c$135$1$44 ==.
                                   1273 ;	crc_4b6b.c:135: if( intBitsAvailable != 0 ) {
      00053F E5*11            [12] 1274 	mov	a,_encode4b6b_intBitsAvailable_1_44
      000541 45*12            [12] 1275 	orl	a,(_encode4b6b_intBitsAvailable_1_44 + 1)
      000543 70 03            [24] 1276 	jnz	00142$
      000545 02r05rD3         [24] 1277 	ljmp	00112$
      000548                       1278 00142$:
                           000548  1279 	C$crc_4b6b.c$136$2$49 ==.
                                   1280 ;	crc_4b6b.c:136: mask = (1 << intBitsAvailable) - 1;
      000548 85*11 F0         [24] 1281 	mov	b,_encode4b6b_intBitsAvailable_1_44
      00054B 05 F0            [12] 1282 	inc	b
      00054D 79 01            [12] 1283 	mov	r1,#0x01
      00054F 7D 00            [12] 1284 	mov	r5,#0x00
      000551 80 06            [24] 1285 	sjmp	00144$
      000553                       1286 00143$:
      000553 E9               [12] 1287 	mov	a,r1
      000554 29               [12] 1288 	add	a,r1
      000555 F9               [12] 1289 	mov	r1,a
      000556 ED               [12] 1290 	mov	a,r5
      000557 33               [12] 1291 	rlc	a
      000558 FD               [12] 1292 	mov	r5,a
      000559                       1293 00144$:
      000559 D5 F0 F7         [24] 1294 	djnz	b,00143$
      00055C E9               [12] 1295 	mov	a,r1
      00055D 24 FF            [12] 1296 	add	a,#0xFF
      00055F FE               [12] 1297 	mov	r6,a
      000560 ED               [12] 1298 	mov	a,r5
      000561 34 FF            [12] 1299 	addc	a,#0xFF
      000563 FF               [12] 1300 	mov	r7,a
                           000564  1301 	C$crc_4b6b.c$137$2$49 ==.
                                   1302 ;	crc_4b6b.c:137: intBuffer = intBuffer & mask;
      000564 EE               [12] 1303 	mov	a,r6
      000565 52*0F            [12] 1304 	anl	_encode4b6b_intBuffer_1_44,a
      000567 EF               [12] 1305 	mov	a,r7
      000568 52*10            [12] 1306 	anl	(_encode4b6b_intBuffer_1_44 + 1),a
                           00056A  1307 	C$crc_4b6b.c$138$2$49 ==.
                                   1308 ;	crc_4b6b.c:138: intBuffer = intBuffer << (8 - intBitsAvailable);
      00056A 74 08            [12] 1309 	mov	a,#0x08
      00056C C3               [12] 1310 	clr	c
      00056D 95*11            [12] 1311 	subb	a,_encode4b6b_intBitsAvailable_1_44
      00056F FE               [12] 1312 	mov	r6,a
      000570 E4               [12] 1313 	clr	a
      000571 95*12            [12] 1314 	subb	a,(_encode4b6b_intBitsAvailable_1_44 + 1)
      000573 FF               [12] 1315 	mov	r7,a
      000574 8E F0            [24] 1316 	mov	b,r6
      000576 05 F0            [12] 1317 	inc	b
      000578 80 0B            [24] 1318 	sjmp	00146$
      00057A                       1319 00145$:
      00057A E5*0F            [12] 1320 	mov	a,_encode4b6b_intBuffer_1_44
      00057C 25*0F            [12] 1321 	add	a,_encode4b6b_intBuffer_1_44
      00057E F5*0F            [12] 1322 	mov	_encode4b6b_intBuffer_1_44,a
      000580 E5*10            [12] 1323 	mov	a,(_encode4b6b_intBuffer_1_44 + 1)
      000582 33               [12] 1324 	rlc	a
      000583 F5*10            [12] 1325 	mov	(_encode4b6b_intBuffer_1_44 + 1),a
      000585                       1326 00146$:
      000585 D5 F0 F2         [24] 1327 	djnz	b,00145$
                           000588  1328 	C$crc_4b6b.c$139$2$49 ==.
                                   1329 ;	crc_4b6b.c:139: symbol = intBuffer & 0x00FF;
      000588 AE*0F            [24] 1330 	mov	r6,_encode4b6b_intBuffer_1_44
      00058A 8E*13            [24] 1331 	mov	_encode4b6b_symbol_1_44,r6
                           00058C  1332 	C$crc_4b6b.c$140$2$49 ==.
                                   1333 ;	crc_4b6b.c:140: messageOut[*bytesOut] = symbol;
      00058C 8A 82            [24] 1334 	mov	dpl,r2
      00058E 8B 83            [24] 1335 	mov	dph,r3
      000590 8C F0            [24] 1336 	mov	b,r4
      000592 12r00r00         [24] 1337 	lcall	__gptrget
      000595 FE               [12] 1338 	mov	r6,a
      000596 A3               [24] 1339 	inc	dptr
      000597 12r00r00         [24] 1340 	lcall	__gptrget
      00059A FF               [12] 1341 	mov	r7,a
      00059B EE               [12] 1342 	mov	a,r6
      00059C 25*02            [12] 1343 	add	a,_encode4b6b_PARM_3
      00059E FE               [12] 1344 	mov	r6,a
      00059F EF               [12] 1345 	mov	a,r7
      0005A0 35*03            [12] 1346 	addc	a,(_encode4b6b_PARM_3 + 1)
      0005A2 FF               [12] 1347 	mov	r7,a
      0005A3 AD*04            [24] 1348 	mov	r5,(_encode4b6b_PARM_3 + 2)
      0005A5 8E 82            [24] 1349 	mov	dpl,r6
      0005A7 8F 83            [24] 1350 	mov	dph,r7
      0005A9 8D F0            [24] 1351 	mov	b,r5
      0005AB E5*13            [12] 1352 	mov	a,_encode4b6b_symbol_1_44
      0005AD 12r00r00         [24] 1353 	lcall	__gptrput
                           0005B0  1354 	C$crc_4b6b.c$141$2$49 ==.
                                   1355 ;	crc_4b6b.c:141: (*bytesOut)++;
      0005B0 8A 82            [24] 1356 	mov	dpl,r2
      0005B2 8B 83            [24] 1357 	mov	dph,r3
      0005B4 8C F0            [24] 1358 	mov	b,r4
      0005B6 12r00r00         [24] 1359 	lcall	__gptrget
      0005B9 FE               [12] 1360 	mov	r6,a
      0005BA A3               [24] 1361 	inc	dptr
      0005BB 12r00r00         [24] 1362 	lcall	__gptrget
      0005BE FF               [12] 1363 	mov	r7,a
      0005BF 0E               [12] 1364 	inc	r6
      0005C0 BE 00 01         [24] 1365 	cjne	r6,#0x00,00147$
      0005C3 0F               [12] 1366 	inc	r7
      0005C4                       1367 00147$:
      0005C4 8A 82            [24] 1368 	mov	dpl,r2
      0005C6 8B 83            [24] 1369 	mov	dph,r3
      0005C8 8C F0            [24] 1370 	mov	b,r4
      0005CA EE               [12] 1371 	mov	a,r6
      0005CB 12r00r00         [24] 1372 	lcall	__gptrput
      0005CE A3               [24] 1373 	inc	dptr
      0005CF EF               [12] 1374 	mov	a,r7
      0005D0 12r00r00         [24] 1375 	lcall	__gptrput
      0005D3                       1376 00112$:
                           0005D3  1377 	C$crc_4b6b.c$143$1$44 ==.
                           0005D3  1378 	XG$encode4b6b$0$0 ==.
      0005D3 22               [24] 1379 	ret
                                   1380 ;------------------------------------------------------------
                                   1381 ;Allocation info for local variables in function 'decode4b6b'
                                   1382 ;------------------------------------------------------------
                                   1383 ;bytesIn                   Allocated with name '_decode4b6b_PARM_2'
                                   1384 ;messageOut                Allocated with name '_decode4b6b_PARM_3'
                                   1385 ;bytesOut                  Allocated with name '_decode4b6b_PARM_4'
                                   1386 ;messageIn                 Allocated with name '_decode4b6b_messageIn_1_50'
                                   1387 ;i                         Allocated with name '_decode4b6b_i_1_51'
                                   1388 ;intBuffer                 Allocated with name '_decode4b6b_intBuffer_1_51'
                                   1389 ;intBitsAvailable          Allocated with name '_decode4b6b_intBitsAvailable_1_51'
                                   1390 ;symbol                    Allocated with name '_decode4b6b_symbol_1_51'
                                   1391 ;recByte                   Allocated to registers r2 
                                   1392 ;nibbleFlag                Allocated with name '_decode4b6b_nibbleFlag_1_51'
                                   1393 ;outBytes                  Allocated with name '_decode4b6b_outBytes_1_51'
                                   1394 ;------------------------------------------------------------
                           0005D4  1395 	G$decode4b6b$0$0 ==.
                           0005D4  1396 	C$crc_4b6b.c$145$1$44 ==.
                                   1397 ;	crc_4b6b.c:145: void decode4b6b( char *messageIn, unsigned int bytesIn, char *messageOut, unsigned int *bytesOut ) {
                                   1398 ;	-----------------------------------------
                                   1399 ;	 function decode4b6b
                                   1400 ;	-----------------------------------------
      0005D4                       1401 _decode4b6b:
      0005D4 85 82*1E         [24] 1402 	mov	_decode4b6b_messageIn_1_50,dpl
      0005D7 85 83*1F         [24] 1403 	mov	(_decode4b6b_messageIn_1_50 + 1),dph
      0005DA 85 F0*20         [24] 1404 	mov	(_decode4b6b_messageIn_1_50 + 2),b
                           0005DD  1405 	C$crc_4b6b.c$147$1$44 ==.
                                   1406 ;	crc_4b6b.c:147: int intBuffer = 0;
      0005DD E4               [12] 1407 	clr	a
      0005DE F5*23            [12] 1408 	mov	_decode4b6b_intBuffer_1_51,a
      0005E0 F5*24            [12] 1409 	mov	(_decode4b6b_intBuffer_1_51 + 1),a
                           0005E2  1410 	C$crc_4b6b.c$149$1$44 ==.
                                   1411 ;	crc_4b6b.c:149: char symbol = 0;
                                   1412 ;	1-genFromRTrack replaced	mov	_decode4b6b_symbol_1_51,#0x00
      0005E2 F5*27            [12] 1413 	mov	_decode4b6b_symbol_1_51,a
                           0005E4  1414 	C$crc_4b6b.c$150$1$44 ==.
                                   1415 ;	crc_4b6b.c:150: char recByte = 0;
      0005E4 7A 00            [12] 1416 	mov	r2,#0x00
                           0005E6  1417 	C$crc_4b6b.c$154$1$51 ==.
                                   1418 ;	crc_4b6b.c:154: intBitsAvailable = 0;
      0005E6 F5*25            [12] 1419 	mov	_decode4b6b_intBitsAvailable_1_51,a
      0005E8 F5*26            [12] 1420 	mov	(_decode4b6b_intBitsAvailable_1_51 + 1),a
                           0005EA  1421 	C$crc_4b6b.c$155$1$51 ==.
                                   1422 ;	crc_4b6b.c:155: nibbleFlag = 0;
                                   1423 ;	1-genFromRTrack replaced	mov	_decode4b6b_nibbleFlag_1_51,#0x00
      0005EA F5*28            [12] 1424 	mov	_decode4b6b_nibbleFlag_1_51,a
                           0005EC  1425 	C$crc_4b6b.c$156$1$51 ==.
                                   1426 ;	crc_4b6b.c:156: outBytes = 0;
                                   1427 ;	1-genFromRTrack replaced	mov	_decode4b6b_outBytes_1_51,#0x00
      0005EC F5*29            [12] 1428 	mov	_decode4b6b_outBytes_1_51,a
                           0005EE  1429 	C$crc_4b6b.c$157$1$51 ==.
                                   1430 ;	crc_4b6b.c:157: for( i = 0; i < bytesIn; i++ ) {
      0005EE F5*21            [12] 1431 	mov	_decode4b6b_i_1_51,a
      0005F0 F5*22            [12] 1432 	mov	(_decode4b6b_i_1_51 + 1),a
      0005F2                       1433 00108$:
      0005F2 C3               [12] 1434 	clr	c
      0005F3 E5*21            [12] 1435 	mov	a,_decode4b6b_i_1_51
      0005F5 95*16            [12] 1436 	subb	a,_decode4b6b_PARM_2
      0005F7 E5*22            [12] 1437 	mov	a,(_decode4b6b_i_1_51 + 1)
      0005F9 95*17            [12] 1438 	subb	a,(_decode4b6b_PARM_2 + 1)
      0005FB 40 03            [24] 1439 	jc	00129$
      0005FD 02r06rCC         [24] 1440 	ljmp	00106$
      000600                       1441 00129$:
                           000600  1442 	C$crc_4b6b.c$158$2$52 ==.
                                   1443 ;	crc_4b6b.c:158: intBuffer = intBuffer << 8;
      000600 85*23*24         [24] 1444 	mov	(_decode4b6b_intBuffer_1_51 + 1),_decode4b6b_intBuffer_1_51
      000603 75*23 00         [24] 1445 	mov	_decode4b6b_intBuffer_1_51,#0x00
                           000606  1446 	C$crc_4b6b.c$159$2$52 ==.
                                   1447 ;	crc_4b6b.c:159: intBuffer |= messageIn[i];
      000606 E5*21            [12] 1448 	mov	a,_decode4b6b_i_1_51
      000608 25*1E            [12] 1449 	add	a,_decode4b6b_messageIn_1_50
      00060A F8               [12] 1450 	mov	r0,a
      00060B E5*22            [12] 1451 	mov	a,(_decode4b6b_i_1_51 + 1)
      00060D 35*1F            [12] 1452 	addc	a,(_decode4b6b_messageIn_1_50 + 1)
      00060F F9               [12] 1453 	mov	r1,a
      000610 AE*20            [24] 1454 	mov	r6,(_decode4b6b_messageIn_1_50 + 2)
      000612 88 82            [24] 1455 	mov	dpl,r0
      000614 89 83            [24] 1456 	mov	dph,r1
      000616 8E F0            [24] 1457 	mov	b,r6
      000618 12r00r00         [24] 1458 	lcall	__gptrget
      00061B F8               [12] 1459 	mov	r0,a
      00061C 33               [12] 1460 	rlc	a
      00061D 95 E0            [12] 1461 	subb	a,acc
      00061F FE               [12] 1462 	mov	r6,a
      000620 E8               [12] 1463 	mov	a,r0
      000621 42*23            [12] 1464 	orl	_decode4b6b_intBuffer_1_51,a
      000623 EE               [12] 1465 	mov	a,r6
      000624 42*24            [12] 1466 	orl	(_decode4b6b_intBuffer_1_51 + 1),a
                           000626  1467 	C$crc_4b6b.c$160$2$52 ==.
                                   1468 ;	crc_4b6b.c:160: intBitsAvailable += 8;
      000626 74 08            [12] 1469 	mov	a,#0x08
      000628 25*25            [12] 1470 	add	a,_decode4b6b_intBitsAvailable_1_51
      00062A F5*25            [12] 1471 	mov	_decode4b6b_intBitsAvailable_1_51,a
      00062C E4               [12] 1472 	clr	a
      00062D 35*26            [12] 1473 	addc	a,(_decode4b6b_intBitsAvailable_1_51 + 1)
      00062F F5*26            [12] 1474 	mov	(_decode4b6b_intBitsAvailable_1_51 + 1),a
                           000631  1475 	C$crc_4b6b.c$162$1$51 ==.
                                   1476 ;	crc_4b6b.c:162: while( intBitsAvailable >= 6 ) {
      000631 AE*29            [24] 1477 	mov	r6,_decode4b6b_outBytes_1_51
      000633 A9*25            [24] 1478 	mov	r1,_decode4b6b_intBitsAvailable_1_51
      000635 AD*26            [24] 1479 	mov	r5,(_decode4b6b_intBitsAvailable_1_51 + 1)
      000637                       1480 00103$:
      000637 C3               [12] 1481 	clr	c
      000638 E9               [12] 1482 	mov	a,r1
      000639 94 06            [12] 1483 	subb	a,#0x06
      00063B ED               [12] 1484 	mov	a,r5
      00063C 64 80            [12] 1485 	xrl	a,#0x80
      00063E 94 80            [12] 1486 	subb	a,#0x80
      000640 40 79            [24] 1487 	jc	00117$
                           000642  1488 	C$crc_4b6b.c$163$3$53 ==.
                                   1489 ;	crc_4b6b.c:163: symbol = intBuffer >> (intBitsAvailable - 6);
      000642 E9               [12] 1490 	mov	a,r1
      000643 24 FA            [12] 1491 	add	a,#0xFA
      000645 F8               [12] 1492 	mov	r0,a
      000646 ED               [12] 1493 	mov	a,r5
      000647 34 FF            [12] 1494 	addc	a,#0xFF
      000649 88 F0            [24] 1495 	mov	b,r0
      00064B 05 F0            [12] 1496 	inc	b
      00064D A8*23            [24] 1497 	mov	r0,_decode4b6b_intBuffer_1_51
      00064F E5*24            [12] 1498 	mov	a,(_decode4b6b_intBuffer_1_51 + 1)
      000651 FF               [12] 1499 	mov	r7,a
      000652 33               [12] 1500 	rlc	a
      000653 92 D2            [24] 1501 	mov	ov,c
      000655 80 08            [24] 1502 	sjmp	00132$
      000657                       1503 00131$:
      000657 A2 D2            [12] 1504 	mov	c,ov
      000659 EF               [12] 1505 	mov	a,r7
      00065A 13               [12] 1506 	rrc	a
      00065B FF               [12] 1507 	mov	r7,a
      00065C E8               [12] 1508 	mov	a,r0
      00065D 13               [12] 1509 	rrc	a
      00065E F8               [12] 1510 	mov	r0,a
      00065F                       1511 00132$:
      00065F D5 F0 F5         [24] 1512 	djnz	b,00131$
      000662 88*27            [24] 1513 	mov	_decode4b6b_symbol_1_51,r0
                           000664  1514 	C$crc_4b6b.c$164$3$53 ==.
                                   1515 ;	crc_4b6b.c:164: symbol &= 0x3F;
      000664 74 3F            [12] 1516 	mov	a,#0x3F
      000666 58               [12] 1517 	anl	a,r0
      000667 F5*27            [12] 1518 	mov	_decode4b6b_symbol_1_51,a
                           000669  1519 	C$crc_4b6b.c$165$3$53 ==.
                                   1520 ;	crc_4b6b.c:165: decode4b6bsymbol( symbol, &symbol );
      000669 75*00r27         [24] 1521 	mov	_decode4b6bsymbol_PARM_2,#_decode4b6b_symbol_1_51
      00066C 75*01 00         [24] 1522 	mov	(_decode4b6bsymbol_PARM_2 + 1),#0x00
      00066F 75*02 40         [24] 1523 	mov	(_decode4b6bsymbol_PARM_2 + 2),#0x40
      000672 85*27 82         [24] 1524 	mov	dpl,_decode4b6b_symbol_1_51
      000675 C0 06            [24] 1525 	push	ar6
      000677 C0 05            [24] 1526 	push	ar5
      000679 C0 02            [24] 1527 	push	ar2
      00067B C0 01            [24] 1528 	push	ar1
      00067D 12r01rCA         [24] 1529 	lcall	_decode4b6bsymbol
      000680 D0 01            [24] 1530 	pop	ar1
      000682 D0 02            [24] 1531 	pop	ar2
      000684 D0 05            [24] 1532 	pop	ar5
      000686 D0 06            [24] 1533 	pop	ar6
                           000688  1534 	C$crc_4b6b.c$166$3$53 ==.
                                   1535 ;	crc_4b6b.c:166: recByte = recByte << 4;
      000688 EA               [12] 1536 	mov	a,r2
      000689 C4               [12] 1537 	swap	a
      00068A 54 F0            [12] 1538 	anl	a,#0xF0
      00068C FA               [12] 1539 	mov	r2,a
                           00068D  1540 	C$crc_4b6b.c$167$3$53 ==.
                                   1541 ;	crc_4b6b.c:167: recByte &= 0xF0;
      00068D 53 02 F0         [24] 1542 	anl	ar2,#0xF0
                           000690  1543 	C$crc_4b6b.c$168$3$53 ==.
                                   1544 ;	crc_4b6b.c:168: recByte |= symbol;
      000690 E5*27            [12] 1545 	mov	a,_decode4b6b_symbol_1_51
      000692 42 02            [12] 1546 	orl	ar2,a
                           000694  1547 	C$crc_4b6b.c$169$3$53 ==.
                                   1548 ;	crc_4b6b.c:169: nibbleFlag ^= 1;
      000694 63*28 01         [24] 1549 	xrl	_decode4b6b_nibbleFlag_1_51,#0x01
                           000697  1550 	C$crc_4b6b.c$170$3$53 ==.
                                   1551 ;	crc_4b6b.c:170: if( nibbleFlag == 0 ) {
      000697 E5*28            [12] 1552 	mov	a,_decode4b6b_nibbleFlag_1_51
      000699 70 15            [24] 1553 	jnz	00102$
                           00069B  1554 	C$crc_4b6b.c$171$4$54 ==.
                                   1555 ;	crc_4b6b.c:171: messageOut[outBytes] = recByte;
      00069B EE               [12] 1556 	mov	a,r6
      00069C 25*18            [12] 1557 	add	a,_decode4b6b_PARM_3
      00069E F8               [12] 1558 	mov	r0,a
      00069F E4               [12] 1559 	clr	a
      0006A0 35*19            [12] 1560 	addc	a,(_decode4b6b_PARM_3 + 1)
      0006A2 FC               [12] 1561 	mov	r4,a
      0006A3 AF*1A            [24] 1562 	mov	r7,(_decode4b6b_PARM_3 + 2)
      0006A5 88 82            [24] 1563 	mov	dpl,r0
      0006A7 8C 83            [24] 1564 	mov	dph,r4
      0006A9 8F F0            [24] 1565 	mov	b,r7
      0006AB EA               [12] 1566 	mov	a,r2
      0006AC 12r00r00         [24] 1567 	lcall	__gptrput
                           0006AF  1568 	C$crc_4b6b.c$172$4$54 ==.
                                   1569 ;	crc_4b6b.c:172: outBytes++;
      0006AF 0E               [12] 1570 	inc	r6
      0006B0                       1571 00102$:
                           0006B0  1572 	C$crc_4b6b.c$174$3$53 ==.
                                   1573 ;	crc_4b6b.c:174: intBitsAvailable -= 6;
      0006B0 E9               [12] 1574 	mov	a,r1
      0006B1 24 FA            [12] 1575 	add	a,#0xFA
      0006B3 F9               [12] 1576 	mov	r1,a
      0006B4 ED               [12] 1577 	mov	a,r5
      0006B5 34 FF            [12] 1578 	addc	a,#0xFF
      0006B7 FD               [12] 1579 	mov	r5,a
      0006B8 02r06r37         [24] 1580 	ljmp	00103$
      0006BB                       1581 00117$:
      0006BB 8E*29            [24] 1582 	mov	_decode4b6b_outBytes_1_51,r6
      0006BD 89*25            [24] 1583 	mov	_decode4b6b_intBitsAvailable_1_51,r1
      0006BF 8D*26            [24] 1584 	mov	(_decode4b6b_intBitsAvailable_1_51 + 1),r5
                           0006C1  1585 	C$crc_4b6b.c$157$1$51 ==.
                                   1586 ;	crc_4b6b.c:157: for( i = 0; i < bytesIn; i++ ) {
      0006C1 05*21            [12] 1587 	inc	_decode4b6b_i_1_51
      0006C3 E4               [12] 1588 	clr	a
      0006C4 B5*21 02         [24] 1589 	cjne	a,_decode4b6b_i_1_51,00134$
      0006C7 05*22            [12] 1590 	inc	(_decode4b6b_i_1_51 + 1)
      0006C9                       1591 00134$:
      0006C9 02r05rF2         [24] 1592 	ljmp	00108$
      0006CC                       1593 00106$:
                           0006CC  1594 	C$crc_4b6b.c$178$1$51 ==.
                                   1595 ;	crc_4b6b.c:178: *bytesOut = outBytes;
      0006CC AD*1B            [24] 1596 	mov	r5,_decode4b6b_PARM_4
      0006CE AE*1C            [24] 1597 	mov	r6,(_decode4b6b_PARM_4 + 1)
      0006D0 AF*1D            [24] 1598 	mov	r7,(_decode4b6b_PARM_4 + 2)
      0006D2 E5*29            [12] 1599 	mov	a,_decode4b6b_outBytes_1_51
      0006D4 FB               [12] 1600 	mov	r3,a
      0006D5 33               [12] 1601 	rlc	a
      0006D6 95 E0            [12] 1602 	subb	a,acc
      0006D8 FC               [12] 1603 	mov	r4,a
      0006D9 8D 82            [24] 1604 	mov	dpl,r5
      0006DB 8E 83            [24] 1605 	mov	dph,r6
      0006DD 8F F0            [24] 1606 	mov	b,r7
      0006DF EB               [12] 1607 	mov	a,r3
      0006E0 12r00r00         [24] 1608 	lcall	__gptrput
      0006E3 A3               [24] 1609 	inc	dptr
      0006E4 EC               [12] 1610 	mov	a,r4
      0006E5 12r00r00         [24] 1611 	lcall	__gptrput
                           0006E8  1612 	C$crc_4b6b.c$179$1$51 ==.
                           0006E8  1613 	XG$decode4b6b$0$0 ==.
      0006E8 22               [24] 1614 	ret
                                   1615 ;------------------------------------------------------------
                                   1616 ;Allocation info for local variables in function 'sleep'
                                   1617 ;------------------------------------------------------------
                                   1618 ;time                      Allocated to registers r6 r7 
                                   1619 ;i                         Allocated to registers r2 r3 
                                   1620 ;j                         Allocated to registers r4 r5 
                                   1621 ;------------------------------------------------------------
                           0006E9  1622 	G$sleep$0$0 ==.
                           0006E9  1623 	C$crc_4b6b.c$181$1$51 ==.
                                   1624 ;	crc_4b6b.c:181: void sleep( int time ) {
                                   1625 ;	-----------------------------------------
                                   1626 ;	 function sleep
                                   1627 ;	-----------------------------------------
      0006E9                       1628 _sleep:
      0006E9 AE 82            [24] 1629 	mov	r6,dpl
                           0006EB  1630 	C$crc_4b6b.c$184$1$56 ==.
                                   1631 ;	crc_4b6b.c:184: for( j = 0; j < time * 4; j++ ) for( i = 0; i < 0xFFFF; i++ ) Nop( );
      0006EB E5 83            [12] 1632 	mov	a,dph
      0006ED CE               [12] 1633 	xch	a,r6
      0006EE 25 E0            [12] 1634 	add	a,acc
      0006F0 CE               [12] 1635 	xch	a,r6
      0006F1 33               [12] 1636 	rlc	a
      0006F2 CE               [12] 1637 	xch	a,r6
      0006F3 25 E0            [12] 1638 	add	a,acc
      0006F5 CE               [12] 1639 	xch	a,r6
      0006F6 33               [12] 1640 	rlc	a
      0006F7 FF               [12] 1641 	mov	r7,a
      0006F8 7C 00            [12] 1642 	mov	r4,#0x00
      0006FA 7D 00            [12] 1643 	mov	r5,#0x00
      0006FC                       1644 00107$:
      0006FC C3               [12] 1645 	clr	c
      0006FD EC               [12] 1646 	mov	a,r4
      0006FE 9E               [12] 1647 	subb	a,r6
      0006FF ED               [12] 1648 	mov	a,r5
      000700 64 80            [12] 1649 	xrl	a,#0x80
      000702 8F F0            [24] 1650 	mov	b,r7
      000704 63 F0 80         [24] 1651 	xrl	b,#0x80
      000707 95 F0            [12] 1652 	subb	a,b
      000709 50 15            [24] 1653 	jnc	00109$
      00070B 7A FF            [12] 1654 	mov	r2,#0xFF
      00070D 7B FF            [12] 1655 	mov	r3,#0xFF
      00070F                       1656 00105$:
      00070F 00               [12] 1657 	nop 
      000710 1A               [12] 1658 	dec	r2
      000711 BA FF 01         [24] 1659 	cjne	r2,#0xFF,00126$
      000714 1B               [12] 1660 	dec	r3
      000715                       1661 00126$:
      000715 EA               [12] 1662 	mov	a,r2
      000716 4B               [12] 1663 	orl	a,r3
      000717 70 F6            [24] 1664 	jnz	00105$
      000719 0C               [12] 1665 	inc	r4
      00071A BC 00 DF         [24] 1666 	cjne	r4,#0x00,00107$
      00071D 0D               [12] 1667 	inc	r5
      00071E 80 DC            [24] 1668 	sjmp	00107$
      000720                       1669 00109$:
                           000720  1670 	C$crc_4b6b.c$185$1$56 ==.
                           000720  1671 	XG$sleep$0$0 ==.
      000720 22               [24] 1672 	ret
                                   1673 	.area CSEG    (CODE)
                                   1674 	.area CONST   (CODE)
                                   1675 	.area XINIT   (CODE)
                                   1676 	.area CABS    (ABS,CODE)
