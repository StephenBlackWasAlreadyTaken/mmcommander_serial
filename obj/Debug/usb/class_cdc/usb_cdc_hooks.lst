                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                                      4 ; This file was generated Fri Apr 24 20:34:20 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module usb_cdc_hooks
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _usbsrHookProcessEvent_PARM_2
                                     13 	.globl _usbsrHookModifyGetStatus_PARM_3
                                     14 	.globl _usbsrHookModifyGetStatus_PARM_2
                                     15 	.globl _usbcrHookProcessOut
                                     16 	.globl _usbcrHookProcessIn
                                     17 	.globl _usbvrHookProcessOut
                                     18 	.globl _usbvrHookProcessIn
                                     19 	.globl _usbsrHookSetDescriptor
                                     20 	.globl _usbsrHookSynchFrame
                                     21 	.globl _usbsrHookClearFeature
                                     22 	.globl _usbsrHookSetFeature
                                     23 	.globl _usbsrHookModifyGetStatus
                                     24 	.globl _usbsrHookProcessEvent
                                     25 	.globl _usbirqHookProcessEvents
                                     26 ;--------------------------------------------------------
                                     27 ; special function registers
                                     28 ;--------------------------------------------------------
                                     29 	.area RSEG    (ABS,DATA)
      000000                         30 	.org 0x0000
                                     31 ;--------------------------------------------------------
                                     32 ; special function bits
                                     33 ;--------------------------------------------------------
                                     34 	.area RSEG    (ABS,DATA)
      000000                         35 	.org 0x0000
                                     36 ;--------------------------------------------------------
                                     37 ; overlayable register banks
                                     38 ;--------------------------------------------------------
                                     39 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                         40 	.ds 8
                                     41 ;--------------------------------------------------------
                                     42 ; internal ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area DSEG    (DATA)
                                     45 ;--------------------------------------------------------
                                     46 ; overlayable items in internal ram 
                                     47 ;--------------------------------------------------------
                                     48 	.area	OSEG    (OVR,DATA)
                           000000    49 Lusb_cdc_hooks.usbsrHookModifyGetStatus$index$1$69==.
      000000                         50 _usbsrHookModifyGetStatus_PARM_2:
      000000                         51 	.ds 1
                           000001    52 Lusb_cdc_hooks.usbsrHookModifyGetStatus$pStatus$1$69==.
      000001                         53 _usbsrHookModifyGetStatus_PARM_3:
      000001                         54 	.ds 2
                                     55 	.area	OSEG    (OVR,DATA)
                           000000    56 Lusb_cdc_hooks.usbsrHookProcessEvent$index$1$71==.
      000000                         57 _usbsrHookProcessEvent_PARM_2:
      000000                         58 	.ds 1
                                     59 ;--------------------------------------------------------
                                     60 ; indirectly addressable internal ram data
                                     61 ;--------------------------------------------------------
                                     62 	.area ISEG    (DATA)
                                     63 ;--------------------------------------------------------
                                     64 ; absolute internal ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area IABS    (ABS,DATA)
                                     67 	.area IABS    (ABS,DATA)
                                     68 ;--------------------------------------------------------
                                     69 ; bit data
                                     70 ;--------------------------------------------------------
                                     71 	.area BSEG    (BIT)
                                     72 ;--------------------------------------------------------
                                     73 ; paged external ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area PSEG    (PAG,XDATA)
                                     76 ;--------------------------------------------------------
                                     77 ; external ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area XSEG    (XDATA)
                                     80 ;--------------------------------------------------------
                                     81 ; absolute external ram data
                                     82 ;--------------------------------------------------------
                                     83 	.area XABS    (ABS,XDATA)
                                     84 ;--------------------------------------------------------
                                     85 ; external initialized ram data
                                     86 ;--------------------------------------------------------
                                     87 	.area XISEG   (XDATA)
                                     88 	.area HOME    (CODE)
                                     89 	.area GSINIT0 (CODE)
                                     90 	.area GSINIT1 (CODE)
                                     91 	.area GSINIT2 (CODE)
                                     92 	.area GSINIT3 (CODE)
                                     93 	.area GSINIT4 (CODE)
                                     94 	.area GSINIT5 (CODE)
                                     95 	.area GSINIT  (CODE)
                                     96 	.area GSFINAL (CODE)
                                     97 	.area CSEG    (CODE)
                                     98 ;--------------------------------------------------------
                                     99 ; global & static initialisations
                                    100 ;--------------------------------------------------------
                                    101 	.area HOME    (CODE)
                                    102 	.area GSINIT  (CODE)
                                    103 	.area GSFINAL (CODE)
                                    104 	.area GSINIT  (CODE)
                                    105 ;--------------------------------------------------------
                                    106 ; Home
                                    107 ;--------------------------------------------------------
                                    108 	.area HOME    (CODE)
                                    109 	.area HOME    (CODE)
                                    110 ;--------------------------------------------------------
                                    111 ; code
                                    112 ;--------------------------------------------------------
                                    113 	.area CSEG    (CODE)
                                    114 ;------------------------------------------------------------
                                    115 ;Allocation info for local variables in function 'usbcrHookProcessOut'
                                    116 ;------------------------------------------------------------
                           000000   117 	G$usbcrHookProcessOut$0$0 ==.
                           000000   118 	C$usb_cdc_hooks.c$32$0$0 ==.
                                    119 ;	usb\class_cdc\usb_cdc_hooks.c:32: void usbcrHookProcessOut( void ) {
                                    120 ;	-----------------------------------------
                                    121 ;	 function usbcrHookProcessOut
                                    122 ;	-----------------------------------------
      000000                        123 _usbcrHookProcessOut:
                           000007   124 	ar7 = 0x07
                           000006   125 	ar6 = 0x06
                           000005   126 	ar5 = 0x05
                           000004   127 	ar4 = 0x04
                           000003   128 	ar3 = 0x03
                           000002   129 	ar2 = 0x02
                           000001   130 	ar1 = 0x01
                           000000   131 	ar0 = 0x00
                           000000   132 	C$usb_cdc_hooks.c$34$1$44 ==.
                                    133 ;	usb\class_cdc\usb_cdc_hooks.c:34: if( usbSetupHeader.request == CDC_SET_CONTROL_LINE_STATE ) {
      000000 90r00r01         [24]  134 	mov	dptr,#(_usbSetupHeader + 0x0001)
      000003 E0               [24]  135 	movx	a,@dptr
      000004 FF               [12]  136 	mov	r7,a
      000005 BF 22 18         [24]  137 	cjne	r7,#0x22,00110$
                           000008   138 	C$usb_cdc_hooks.c$36$2$45 ==.
                                    139 ;	usb\class_cdc\usb_cdc_hooks.c:36: if( usbfwData.ep0Status == EP_IDLE ) {
      000008 90r00r07         [24]  140 	mov	dptr,#(_usbfwData + 0x0007)
      00000B E0               [24]  141 	movx	a,@dptr
      00000C 70 36            [24]  142 	jnz	00112$
                           00000E   143 	C$usb_cdc_hooks.c$37$3$46 ==.
                                    144 ;	usb\class_cdc\usb_cdc_hooks.c:37: cdcRTS = usbSetupHeader.value;
      00000E 90r00r02         [24]  145 	mov	dptr,#(_usbSetupHeader + 0x0002)
      000011 E0               [24]  146 	movx	a,@dptr
      000012 F5*00            [12]  147 	mov	_cdcRTS,a
      000014 A3               [24]  148 	inc	dptr
      000015 E0               [24]  149 	movx	a,@dptr
      000016 F5*01            [12]  150 	mov	(_cdcRTS + 1),a
                           000018   151 	C$usb_cdc_hooks.c$43$3$46 ==.
                                    152 ;	usb\class_cdc\usb_cdc_hooks.c:43: usbfwData.ep0Status = EP_RX;
      000018 90r00r07         [24]  153 	mov	dptr,#(_usbfwData + 0x0007)
      00001B 74 02            [12]  154 	mov	a,#0x02
      00001D F0               [24]  155 	movx	@dptr,a
      00001E 80 24            [24]  156 	sjmp	00112$
      000020                        157 00110$:
                           000020   158 	C$usb_cdc_hooks.c$45$1$44 ==.
                                    159 ;	usb\class_cdc\usb_cdc_hooks.c:45: } else if( usbSetupHeader.request == CDC_SET_LINE_CODING ) {
      000020 BF 20 1B         [24]  160 	cjne	r7,#0x20,00107$
                           000023   161 	C$usb_cdc_hooks.c$46$2$47 ==.
                                    162 ;	usb\class_cdc\usb_cdc_hooks.c:46: if( usbfwData.ep0Status == EP_IDLE ) {
      000023 90r00r07         [24]  163 	mov	dptr,#(_usbfwData + 0x0007)
      000026 E0               [24]  164 	movx	a,@dptr
      000027 70 1B            [24]  165 	jnz	00112$
                           000029   166 	C$usb_cdc_hooks.c$47$3$48 ==.
                                    167 ;	usb\class_cdc\usb_cdc_hooks.c:47: usbSetupData.pBuffer = (uint8_t __xdata *) &currentLineCoding;
      000029 90r00r00         [24]  168 	mov	dptr,#_usbSetupData
      00002C 74r00            [12]  169 	mov	a,#_currentLineCoding
      00002E F0               [24]  170 	movx	@dptr,a
      00002F 74s00            [12]  171 	mov	a,#(_currentLineCoding >> 8)
      000031 A3               [24]  172 	inc	dptr
      000032 F0               [24]  173 	movx	@dptr,a
      000033 E4               [12]  174 	clr	a
      000034 A3               [24]  175 	inc	dptr
      000035 F0               [24]  176 	movx	@dptr,a
                           000036   177 	C$usb_cdc_hooks.c$48$3$48 ==.
                                    178 ;	usb\class_cdc\usb_cdc_hooks.c:48: usbfwData.ep0Status = EP_RX;
      000036 90r00r07         [24]  179 	mov	dptr,#(_usbfwData + 0x0007)
      000039 74 02            [12]  180 	mov	a,#0x02
      00003B F0               [24]  181 	movx	@dptr,a
                           00003C   182 	C$usb_cdc_hooks.c$49$1$44 ==.
                                    183 ;	usb\class_cdc\usb_cdc_hooks.c:49: } else if( usbfwData.ep0Status == EP_RX ) { }
      00003C 80 06            [24]  184 	sjmp	00112$
      00003E                        185 00107$:
                           00003E   186 	C$usb_cdc_hooks.c$53$2$50 ==.
                                    187 ;	usb\class_cdc\usb_cdc_hooks.c:53: usbfwData.ep0Status = EP_STALL;
      00003E 90r00r07         [24]  188 	mov	dptr,#(_usbfwData + 0x0007)
      000041 74 04            [12]  189 	mov	a,#0x04
      000043 F0               [24]  190 	movx	@dptr,a
      000044                        191 00112$:
                           000044   192 	C$usb_cdc_hooks.c$55$1$44 ==.
                           000044   193 	XG$usbcrHookProcessOut$0$0 ==.
      000044 22               [24]  194 	ret
                                    195 ;------------------------------------------------------------
                                    196 ;Allocation info for local variables in function 'usbcrHookProcessIn'
                                    197 ;------------------------------------------------------------
                           000045   198 	G$usbcrHookProcessIn$0$0 ==.
                           000045   199 	C$usb_cdc_hooks.c$58$1$44 ==.
                                    200 ;	usb\class_cdc\usb_cdc_hooks.c:58: void usbcrHookProcessIn( void ) {
                                    201 ;	-----------------------------------------
                                    202 ;	 function usbcrHookProcessIn
                                    203 ;	-----------------------------------------
      000045                        204 _usbcrHookProcessIn:
                           000045   205 	C$usb_cdc_hooks.c$60$1$52 ==.
                                    206 ;	usb\class_cdc\usb_cdc_hooks.c:60: if( usbSetupHeader.request == CDC_GET_LINE_CODING ) {
      000045 90r00r01         [24]  207 	mov	dptr,#(_usbSetupHeader + 0x0001)
      000048 E0               [24]  208 	movx	a,@dptr
      000049 FF               [12]  209 	mov	r7,a
      00004A BF 21 23         [24]  210 	cjne	r7,#0x21,00105$
                           00004D   211 	C$usb_cdc_hooks.c$62$2$53 ==.
                                    212 ;	usb\class_cdc\usb_cdc_hooks.c:62: if( usbfwData.ep0Status == EP_IDLE ) {
      00004D 90r00r07         [24]  213 	mov	dptr,#(_usbfwData + 0x0007)
      000050 E0               [24]  214 	movx	a,@dptr
      000051 70 23            [24]  215 	jnz	00107$
                           000053   216 	C$usb_cdc_hooks.c$63$3$54 ==.
                                    217 ;	usb\class_cdc\usb_cdc_hooks.c:63: usbSetupData.pBuffer = (uint8_t __xdata *) &currentLineCoding;
      000053 90r00r00         [24]  218 	mov	dptr,#_usbSetupData
      000056 74r00            [12]  219 	mov	a,#_currentLineCoding
      000058 F0               [24]  220 	movx	@dptr,a
      000059 74s00            [12]  221 	mov	a,#(_currentLineCoding >> 8)
      00005B A3               [24]  222 	inc	dptr
      00005C F0               [24]  223 	movx	@dptr,a
      00005D E4               [12]  224 	clr	a
      00005E A3               [24]  225 	inc	dptr
      00005F F0               [24]  226 	movx	@dptr,a
                           000060   227 	C$usb_cdc_hooks.c$64$3$54 ==.
                                    228 ;	usb\class_cdc\usb_cdc_hooks.c:64: usbSetupData.bytesLeft = 7;
      000060 90r00r03         [24]  229 	mov	dptr,#(_usbSetupData + 0x0003)
      000063 74 07            [12]  230 	mov	a,#0x07
      000065 F0               [24]  231 	movx	@dptr,a
      000066 E4               [12]  232 	clr	a
      000067 A3               [24]  233 	inc	dptr
      000068 F0               [24]  234 	movx	@dptr,a
                           000069   235 	C$usb_cdc_hooks.c$65$3$54 ==.
                                    236 ;	usb\class_cdc\usb_cdc_hooks.c:65: usbfwData.ep0Status = EP_TX;
      000069 90r00r07         [24]  237 	mov	dptr,#(_usbfwData + 0x0007)
      00006C 04               [12]  238 	inc	a
      00006D F0               [24]  239 	movx	@dptr,a
                           00006E   240 	C$usb_cdc_hooks.c$67$1$52 ==.
                                    241 ;	usb\class_cdc\usb_cdc_hooks.c:67: } else if( usbfwData.ep0Status == EP_TX ) {
      00006E 80 06            [24]  242 	sjmp	00107$
      000070                        243 00105$:
                           000070   244 	C$usb_cdc_hooks.c$71$2$56 ==.
                                    245 ;	usb\class_cdc\usb_cdc_hooks.c:71: usbfwData.ep0Status = EP_STALL;
      000070 90r00r07         [24]  246 	mov	dptr,#(_usbfwData + 0x0007)
      000073 74 04            [12]  247 	mov	a,#0x04
      000075 F0               [24]  248 	movx	@dptr,a
      000076                        249 00107$:
                           000076   250 	C$usb_cdc_hooks.c$73$1$52 ==.
                           000076   251 	XG$usbcrHookProcessIn$0$0 ==.
      000076 22               [24]  252 	ret
                                    253 ;------------------------------------------------------------
                                    254 ;Allocation info for local variables in function 'usbvrHookProcessOut'
                                    255 ;------------------------------------------------------------
                           000077   256 	G$usbvrHookProcessOut$0$0 ==.
                           000077   257 	C$usb_cdc_hooks.c$76$1$52 ==.
                                    258 ;	usb\class_cdc\usb_cdc_hooks.c:76: void usbvrHookProcessOut( void ) { usbfwData.ep0Status = EP_STALL; }
                                    259 ;	-----------------------------------------
                                    260 ;	 function usbvrHookProcessOut
                                    261 ;	-----------------------------------------
      000077                        262 _usbvrHookProcessOut:
      000077 90r00r07         [24]  263 	mov	dptr,#(_usbfwData + 0x0007)
      00007A 74 04            [12]  264 	mov	a,#0x04
      00007C F0               [24]  265 	movx	@dptr,a
                           00007D   266 	C$usb_cdc_hooks.c$76$1$58 ==.
                           00007D   267 	XG$usbvrHookProcessOut$0$0 ==.
      00007D 22               [24]  268 	ret
                                    269 ;------------------------------------------------------------
                                    270 ;Allocation info for local variables in function 'usbvrHookProcessIn'
                                    271 ;------------------------------------------------------------
                           00007E   272 	G$usbvrHookProcessIn$0$0 ==.
                           00007E   273 	C$usb_cdc_hooks.c$77$1$58 ==.
                                    274 ;	usb\class_cdc\usb_cdc_hooks.c:77: void usbvrHookProcessIn( void ) { usbfwData.ep0Status = EP_STALL; }
                                    275 ;	-----------------------------------------
                                    276 ;	 function usbvrHookProcessIn
                                    277 ;	-----------------------------------------
      00007E                        278 _usbvrHookProcessIn:
      00007E 90r00r07         [24]  279 	mov	dptr,#(_usbfwData + 0x0007)
      000081 74 04            [12]  280 	mov	a,#0x04
      000083 F0               [24]  281 	movx	@dptr,a
                           000084   282 	C$usb_cdc_hooks.c$77$1$60 ==.
                           000084   283 	XG$usbvrHookProcessIn$0$0 ==.
      000084 22               [24]  284 	ret
                                    285 ;------------------------------------------------------------
                                    286 ;Allocation info for local variables in function 'usbsrHookSetDescriptor'
                                    287 ;------------------------------------------------------------
                           000085   288 	G$usbsrHookSetDescriptor$0$0 ==.
                           000085   289 	C$usb_cdc_hooks.c$80$1$60 ==.
                                    290 ;	usb\class_cdc\usb_cdc_hooks.c:80: void usbsrHookSetDescriptor( void ) { usbfwData.ep0Status = EP_STALL; }
                                    291 ;	-----------------------------------------
                                    292 ;	 function usbsrHookSetDescriptor
                                    293 ;	-----------------------------------------
      000085                        294 _usbsrHookSetDescriptor:
      000085 90r00r07         [24]  295 	mov	dptr,#(_usbfwData + 0x0007)
      000088 74 04            [12]  296 	mov	a,#0x04
      00008A F0               [24]  297 	movx	@dptr,a
                           00008B   298 	C$usb_cdc_hooks.c$80$1$62 ==.
                           00008B   299 	XG$usbsrHookSetDescriptor$0$0 ==.
      00008B 22               [24]  300 	ret
                                    301 ;------------------------------------------------------------
                                    302 ;Allocation info for local variables in function 'usbsrHookSynchFrame'
                                    303 ;------------------------------------------------------------
                           00008C   304 	G$usbsrHookSynchFrame$0$0 ==.
                           00008C   305 	C$usb_cdc_hooks.c$81$1$62 ==.
                                    306 ;	usb\class_cdc\usb_cdc_hooks.c:81: void usbsrHookSynchFrame( void ) { usbfwData.ep0Status = EP_STALL; }
                                    307 ;	-----------------------------------------
                                    308 ;	 function usbsrHookSynchFrame
                                    309 ;	-----------------------------------------
      00008C                        310 _usbsrHookSynchFrame:
      00008C 90r00r07         [24]  311 	mov	dptr,#(_usbfwData + 0x0007)
      00008F 74 04            [12]  312 	mov	a,#0x04
      000091 F0               [24]  313 	movx	@dptr,a
                           000092   314 	C$usb_cdc_hooks.c$81$1$64 ==.
                           000092   315 	XG$usbsrHookSynchFrame$0$0 ==.
      000092 22               [24]  316 	ret
                                    317 ;------------------------------------------------------------
                                    318 ;Allocation info for local variables in function 'usbsrHookClearFeature'
                                    319 ;------------------------------------------------------------
                           000093   320 	G$usbsrHookClearFeature$0$0 ==.
                           000093   321 	C$usb_cdc_hooks.c$82$1$64 ==.
                                    322 ;	usb\class_cdc\usb_cdc_hooks.c:82: void usbsrHookClearFeature( void ) { usbfwData.ep0Status = EP_STALL; }
                                    323 ;	-----------------------------------------
                                    324 ;	 function usbsrHookClearFeature
                                    325 ;	-----------------------------------------
      000093                        326 _usbsrHookClearFeature:
      000093 90r00r07         [24]  327 	mov	dptr,#(_usbfwData + 0x0007)
      000096 74 04            [12]  328 	mov	a,#0x04
      000098 F0               [24]  329 	movx	@dptr,a
                           000099   330 	C$usb_cdc_hooks.c$82$1$66 ==.
                           000099   331 	XG$usbsrHookClearFeature$0$0 ==.
      000099 22               [24]  332 	ret
                                    333 ;------------------------------------------------------------
                                    334 ;Allocation info for local variables in function 'usbsrHookSetFeature'
                                    335 ;------------------------------------------------------------
                           00009A   336 	G$usbsrHookSetFeature$0$0 ==.
                           00009A   337 	C$usb_cdc_hooks.c$83$1$66 ==.
                                    338 ;	usb\class_cdc\usb_cdc_hooks.c:83: void usbsrHookSetFeature( void ) { usbfwData.ep0Status = EP_STALL; }
                                    339 ;	-----------------------------------------
                                    340 ;	 function usbsrHookSetFeature
                                    341 ;	-----------------------------------------
      00009A                        342 _usbsrHookSetFeature:
      00009A 90r00r07         [24]  343 	mov	dptr,#(_usbfwData + 0x0007)
      00009D 74 04            [12]  344 	mov	a,#0x04
      00009F F0               [24]  345 	movx	@dptr,a
                           0000A0   346 	C$usb_cdc_hooks.c$83$1$68 ==.
                           0000A0   347 	XG$usbsrHookSetFeature$0$0 ==.
      0000A0 22               [24]  348 	ret
                                    349 ;------------------------------------------------------------
                                    350 ;Allocation info for local variables in function 'usbsrHookModifyGetStatus'
                                    351 ;------------------------------------------------------------
                                    352 ;index                     Allocated with name '_usbsrHookModifyGetStatus_PARM_2'
                                    353 ;pStatus                   Allocated with name '_usbsrHookModifyGetStatus_PARM_3'
                                    354 ;recipient                 Allocated to registers 
                                    355 ;------------------------------------------------------------
                           0000A1   356 	G$usbsrHookModifyGetStatus$0$0 ==.
                           0000A1   357 	C$usb_cdc_hooks.c$84$1$68 ==.
                                    358 ;	usb\class_cdc\usb_cdc_hooks.c:84: void usbsrHookModifyGetStatus( uint8_t recipient, uint8_t index, uint16_t __xdata *pStatus ) { }
                                    359 ;	-----------------------------------------
                                    360 ;	 function usbsrHookModifyGetStatus
                                    361 ;	-----------------------------------------
      0000A1                        362 _usbsrHookModifyGetStatus:
                           0000A1   363 	C$usb_cdc_hooks.c$84$1$68 ==.
                           0000A1   364 	XG$usbsrHookModifyGetStatus$0$0 ==.
      0000A1 22               [24]  365 	ret
                                    366 ;------------------------------------------------------------
                                    367 ;Allocation info for local variables in function 'usbsrHookProcessEvent'
                                    368 ;------------------------------------------------------------
                                    369 ;index                     Allocated with name '_usbsrHookProcessEvent_PARM_2'
                                    370 ;event                     Allocated to registers r7 
                                    371 ;------------------------------------------------------------
                           0000A2   372 	G$usbsrHookProcessEvent$0$0 ==.
                           0000A2   373 	C$usb_cdc_hooks.c$88$1$68 ==.
                                    374 ;	usb\class_cdc\usb_cdc_hooks.c:88: void usbsrHookProcessEvent( uint8_t event, uint8_t index ) {
                                    375 ;	-----------------------------------------
                                    376 ;	 function usbsrHookProcessEvent
                                    377 ;	-----------------------------------------
      0000A2                        378 _usbsrHookProcessEvent:
                           0000A2   379 	C$usb_cdc_hooks.c$90$1$72 ==.
                                    380 ;	usb\class_cdc\usb_cdc_hooks.c:90: switch( event ) {
      0000A2 E5 82            [12]  381 	mov	a,dpl
      0000A4 FF               [12]  382 	mov	r7,a
      0000A5 24 F5            [12]  383 	add	a,#0xff - 0x0A
      0000A7 50 03            [24]  384 	jnc	00117$
      0000A9 02r00rE2         [24]  385 	ljmp	00112$
      0000AC                        386 00117$:
      0000AC EF               [12]  387 	mov	a,r7
      0000AD 24 0A            [12]  388 	add	a,#(00118$-3-.)
      0000AF 83               [24]  389 	movc	a,@a+pc
      0000B0 F5 82            [12]  390 	mov	dpl,a
      0000B2 EF               [12]  391 	mov	a,r7
      0000B3 24 0F            [12]  392 	add	a,#(00119$-3-.)
      0000B5 83               [24]  393 	movc	a,@a+pc
      0000B6 F5 83            [12]  394 	mov	dph,a
      0000B8 E4               [12]  395 	clr	a
      0000B9 73               [24]  396 	jmp	@a+dptr
      0000BA                        397 00118$:
      0000BArE2                     398 	.db	00111$
      0000BBrD0                     399 	.db	00101$
      0000BCrD2                     400 	.db	00102$
      0000BDrD4                     401 	.db	00103$
      0000BErD6                     402 	.db	00104$
      0000BFrD8                     403 	.db	00105$
      0000C0rDA                     404 	.db	00106$
      0000C1rDC                     405 	.db	00107$
      0000C2rDE                     406 	.db	00108$
      0000C3rE0                     407 	.db	00109$
      0000C4rE2                     408 	.db	00110$
      0000C5                        409 00119$:
      0000C5s00                     410 	.db	00111$>>8
      0000C6s00                     411 	.db	00101$>>8
      0000C7s00                     412 	.db	00102$>>8
      0000C8s00                     413 	.db	00103$>>8
      0000C9s00                     414 	.db	00104$>>8
      0000CAs00                     415 	.db	00105$>>8
      0000CBs00                     416 	.db	00106$>>8
      0000CCs00                     417 	.db	00107$>>8
      0000CDs00                     418 	.db	00108$>>8
      0000CEs00                     419 	.db	00109$>>8
      0000CFs00                     420 	.db	00110$>>8
                           0000D0   421 	C$usb_cdc_hooks.c$91$2$73 ==.
                                    422 ;	usb\class_cdc\usb_cdc_hooks.c:91: case USBSR_EVENT_CONFIGURATION_CHANGING: //(the device configuration is about to change)
      0000D0                        423 00101$:
                           0000D0   424 	C$usb_cdc_hooks.c$92$2$73 ==.
                                    425 ;	usb\class_cdc\usb_cdc_hooks.c:92: break;
                           0000D0   426 	C$usb_cdc_hooks.c$93$2$73 ==.
                                    427 ;	usb\class_cdc\usb_cdc_hooks.c:93: case USBSR_EVENT_CONFIGURATION_CHANGED:// (the device configuration has changed)
      0000D0 80 10            [24]  428 	sjmp	00112$
      0000D2                        429 00102$:
                           0000D2   430 	C$usb_cdc_hooks.c$94$2$73 ==.
                                    431 ;	usb\class_cdc\usb_cdc_hooks.c:94: break;
                           0000D2   432 	C$usb_cdc_hooks.c$95$2$73 ==.
                                    433 ;	usb\class_cdc\usb_cdc_hooks.c:95: case USBSR_EVENT_INTERFACE_CHANGING://(the alternate setting of the given interface is about to change)
      0000D2 80 0E            [24]  434 	sjmp	00112$
      0000D4                        435 00103$:
                           0000D4   436 	C$usb_cdc_hooks.c$96$2$73 ==.
                                    437 ;	usb\class_cdc\usb_cdc_hooks.c:96: break;
                           0000D4   438 	C$usb_cdc_hooks.c$97$2$73 ==.
                                    439 ;	usb\class_cdc\usb_cdc_hooks.c:97: case USBSR_EVENT_INTERFACE_CHANGED: //(the alternate setting of the given interface has changed)
      0000D4 80 0C            [24]  440 	sjmp	00112$
      0000D6                        441 00104$:
                           0000D6   442 	C$usb_cdc_hooks.c$98$2$73 ==.
                                    443 ;	usb\class_cdc\usb_cdc_hooks.c:98: break;
                           0000D6   444 	C$usb_cdc_hooks.c$99$2$73 ==.
                                    445 ;	usb\class_cdc\usb_cdc_hooks.c:99: case USBSR_EVENT_REMOTE_WAKEUP_ENABLED://(remote wakeup has been enabled by the host)
      0000D6 80 0A            [24]  446 	sjmp	00112$
      0000D8                        447 00105$:
                           0000D8   448 	C$usb_cdc_hooks.c$100$2$73 ==.
                                    449 ;	usb\class_cdc\usb_cdc_hooks.c:100: break;
                           0000D8   450 	C$usb_cdc_hooks.c$101$2$73 ==.
                                    451 ;	usb\class_cdc\usb_cdc_hooks.c:101: case USBSR_EVENT_REMOTE_WAKEUP_DISABLED://(remote wakeup has been disabled by the host)
      0000D8 80 08            [24]  452 	sjmp	00112$
      0000DA                        453 00106$:
                           0000DA   454 	C$usb_cdc_hooks.c$102$2$73 ==.
                                    455 ;	usb\class_cdc\usb_cdc_hooks.c:102: break;
                           0000DA   456 	C$usb_cdc_hooks.c$103$2$73 ==.
                                    457 ;	usb\class_cdc\usb_cdc_hooks.c:103: case USBSR_EVENT_EPIN_STALL_CLEARED://(the given IN endpoint's stall condition has been cleared the host)
      0000DA 80 06            [24]  458 	sjmp	00112$
      0000DC                        459 00107$:
                           0000DC   460 	C$usb_cdc_hooks.c$104$2$73 ==.
                                    461 ;	usb\class_cdc\usb_cdc_hooks.c:104: break;
                           0000DC   462 	C$usb_cdc_hooks.c$105$2$73 ==.
                                    463 ;	usb\class_cdc\usb_cdc_hooks.c:105: case USBSR_EVENT_EPIN_STALL_SET://(the given IN endpoint has been stalled by the host)
      0000DC 80 04            [24]  464 	sjmp	00112$
      0000DE                        465 00108$:
                           0000DE   466 	C$usb_cdc_hooks.c$106$2$73 ==.
                                    467 ;	usb\class_cdc\usb_cdc_hooks.c:106: break;
                           0000DE   468 	C$usb_cdc_hooks.c$107$2$73 ==.
                                    469 ;	usb\class_cdc\usb_cdc_hooks.c:107: case USBSR_EVENT_EPOUT_STALL_CLEARED://(the given OUT endpoint's stall condition has been cleared the host)
      0000DE 80 02            [24]  470 	sjmp	00112$
      0000E0                        471 00109$:
                           0000E0   472 	C$usb_cdc_hooks.c$108$2$73 ==.
                                    473 ;	usb\class_cdc\usb_cdc_hooks.c:108: break;
                           0000E0   474 	C$usb_cdc_hooks.c$109$2$73 ==.
                                    475 ;	usb\class_cdc\usb_cdc_hooks.c:109: case USBSR_EVENT_EPOUT_STALL_SET://(the given OUT endpoint has been stalled by the PC)
      0000E0 80 00            [24]  476 	sjmp	00112$
      0000E2                        477 00110$:
                           0000E2   478 	C$usb_cdc_hooks.c$111$1$72 ==.
                                    479 ;	usb\class_cdc\usb_cdc_hooks.c:111: }
      0000E2                        480 00111$:
      0000E2                        481 00112$:
                           0000E2   482 	C$usb_cdc_hooks.c$112$1$72 ==.
                           0000E2   483 	XG$usbsrHookProcessEvent$0$0 ==.
      0000E2 22               [24]  484 	ret
                                    485 ;------------------------------------------------------------
                                    486 ;Allocation info for local variables in function 'usbirqHookProcessEvents'
                                    487 ;------------------------------------------------------------
                           0000E3   488 	G$usbirqHookProcessEvents$0$0 ==.
                           0000E3   489 	C$usb_cdc_hooks.c$115$1$72 ==.
                                    490 ;	usb\class_cdc\usb_cdc_hooks.c:115: void usbirqHookProcessEvents( void ) {
                                    491 ;	-----------------------------------------
                                    492 ;	 function usbirqHookProcessEvents
                                    493 ;	-----------------------------------------
      0000E3                        494 _usbirqHookProcessEvents:
                           0000E3   495 	C$usb_cdc_hooks.c$117$1$72 ==.
                                    496 ;	usb\class_cdc\usb_cdc_hooks.c:117: }
                           0000E3   497 	C$usb_cdc_hooks.c$117$1$72 ==.
                           0000E3   498 	XG$usbirqHookProcessEvents$0$0 ==.
      0000E3 22               [24]  499 	ret
                                    500 	.area CSEG    (CODE)
                                    501 	.area CONST   (CODE)
                                    502 	.area XINIT   (CODE)
                                    503 	.area CABS    (ABS,CODE)
